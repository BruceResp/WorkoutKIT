
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08001600 	.word	0x08001600

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	08001600 	.word	0x08001600

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000766:	f000 fa76 	bl	8000c56 <Bsp_Init>
	//GUI_Init();
 	GUI_SPI_Init(); //初始化函数
 800076a:	f000 f8e9 	bl	8000940 <GUI_SPI_Init>
	//GUI_Show_Image(1,1);
	// GUI_Draw_Point(3,3);
	// GUI_Draw_Point(10,8);
	// GUI_Draw_Point(50,15);
	//GUI_Show_Char_SPI(5,5,'A');
	uint8_t y = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
	u8 page_Y = 50;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	71bb      	strb	r3, [r7, #6]
			// GUI_SPI_Display_Char_ASCII(3,50,"B",0);
			// GUI_Test();
			// GUI_SPI_Reverse_Y(i,10);
			// Bsp_DelayMS(1000);
			// GUI_SPI_CLEAR_SCREEN();
			GUI_CLEAR_SCREEN();
 8000776:	f000 f875 	bl	8000864 <GUI_CLEAR_SCREEN>
			//GUI_ShowString_FulCoord(i,i,"abcd");
			if (y == 0)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d108      	bne.n	8000792 <main+0x32>
			{
				GUI_Reverse_Y(y,10);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	210a      	movs	r1, #10
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f893 	bl	80008b0 <GUI_Reverse_Y>
				y+=1;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	3301      	adds	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	e031      	b.n	80007f6 <main+0x96>
			}
			else
			{
				y =(uint8_t)( 0.8 * (y-1) + 0.2 * page_Y);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3b01      	subs	r3, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff56 	bl	8000648 <__aeabi_i2d>
 800079c:	a318      	add	r3, pc, #96	; (adr r3, 8000800 <main+0xa0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	f7ff fcd5 	bl	8000150 <__aeabi_dmul>
 80007a6:	4602      	mov	r2, r0
 80007a8:	460b      	mov	r3, r1
 80007aa:	4614      	mov	r4, r2
 80007ac:	461d      	mov	r5, r3
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff49 	bl	8000648 <__aeabi_i2d>
 80007b6:	a314      	add	r3, pc, #80	; (adr r3, 8000808 <main+0xa8>)
 80007b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007bc:	f7ff fcc8 	bl	8000150 <__aeabi_dmul>
 80007c0:	4602      	mov	r2, r0
 80007c2:	460b      	mov	r3, r1
 80007c4:	4620      	mov	r0, r4
 80007c6:	4629      	mov	r1, r5
 80007c8:	f7ff fdf2 	bl	80003b0 <__adddf3>
 80007cc:	4602      	mov	r2, r0
 80007ce:	460b      	mov	r3, r1
 80007d0:	4610      	mov	r0, r2
 80007d2:	4619      	mov	r1, r3
 80007d4:	f7ff ffa2 	bl	800071c <__aeabi_d2uiz>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
				GUI_Reverse_Y(y,10);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	210a      	movs	r1, #10
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f865 	bl	80008b0 <GUI_Reverse_Y>
				Bsp_DelayMS(120);
 80007e6:	2078      	movs	r0, #120	; 0x78
 80007e8:	f000 fa22 	bl	8000c30 <Bsp_DelayMS>
				if (y > 50)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b32      	cmp	r3, #50	; 0x32
 80007f0:	d901      	bls.n	80007f6 <main+0x96>
				{
					y = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]

			
			//GUI_Draw_Line(-2,-10,110,50);
			//GUI_Draw_Line(2,50,110,50);
			//OLED_DrawLine(-2,5,50,9);
		 	GUI_SPI_CLEAR_SCREEN();
 80007f6:	f000 f8f3 	bl	80009e0 <GUI_SPI_CLEAR_SCREEN>
			GUI_CLEAR_SCREEN();
 80007fa:	e7bc      	b.n	8000776 <main+0x16>
 80007fc:	f3af 8000 	nop.w
 8000800:	9999999a 	.word	0x9999999a
 8000804:	3fe99999 	.word	0x3fe99999
 8000808:	9999999a 	.word	0x9999999a
 800080c:	3fc99999 	.word	0x3fc99999

08000810 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000820:	e7fe      	b.n	8000820 <HardFault_Handler+0x4>

08000822 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000826:	e7fe      	b.n	8000826 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800082c:	e7fe      	b.n	800082c <BusFault_Handler+0x4>

0800082e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000832:	e7fe      	b.n	8000832 <UsageFault_Handler+0x4>

08000834 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 800086a:	2300      	movs	r3, #0
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	e013      	b.n	8000898 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 8000870:	2300      	movs	r3, #0
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	e00a      	b.n	800088c <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	490c      	ldr	r1, [pc, #48]	; (80008ac <GUI_CLEAR_SCREEN+0x48>)
 800087c:	01d2      	lsls	r2, r2, #7
 800087e:	440a      	add	r2, r1
 8000880:	4413      	add	r3, r2
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3301      	adds	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b80      	cmp	r3, #128	; 0x80
 8000890:	d9f1      	bls.n	8000876 <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	3301      	adds	r3, #1
 8000896:	71bb      	strb	r3, [r7, #6]
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	2b07      	cmp	r3, #7
 800089c:	d9e8      	bls.n	8000870 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000001c 	.word	0x2000001c

080008b0 <GUI_Reverse_Y>:
*参    数:'y:要反转的y轴坐标 0<y<64 height：反转行的高度' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Reverse_Y(uint8_t y,uint8_t height){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	u8 across_page = y + height;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4413      	add	r3, r2
 80008c6:	737b      	strb	r3, [r7, #13]
	for (uint8_t j = y; j < across_page; j++)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e02b      	b.n	8000926 <GUI_Reverse_Y+0x76>
	{
		u8 Page = j / 8;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	08db      	lsrs	r3, r3, #3
 80008d2:	733b      	strb	r3, [r7, #12]
		u8 shift = j % 8;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	72fb      	strb	r3, [r7, #11]
		for (uint8_t i = 0; i < 128; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e01a      	b.n	8000918 <GUI_Reverse_Y+0x68>
		{
			GUI_DISPLAY_BUF[Page][i] ^= 0x01 << shift; //对行取反
 80008e2:	7b3a      	ldrb	r2, [r7, #12]
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	4915      	ldr	r1, [pc, #84]	; (800093c <GUI_Reverse_Y+0x8c>)
 80008e8:	01d2      	lsls	r2, r2, #7
 80008ea:	440a      	add	r2, r1
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25a      	sxtb	r2, r3
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4053      	eors	r3, r2
 80008fe:	b259      	sxtb	r1, r3
 8000900:	7b3a      	ldrb	r2, [r7, #12]
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	b2c8      	uxtb	r0, r1
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <GUI_Reverse_Y+0x8c>)
 8000908:	01d2      	lsls	r2, r2, #7
 800090a:	440a      	add	r2, r1
 800090c:	4413      	add	r3, r2
 800090e:	4602      	mov	r2, r0
 8000910:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 128; i++)
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	73bb      	strb	r3, [r7, #14]
 8000918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dae0      	bge.n	80008e2 <GUI_Reverse_Y+0x32>
	for (uint8_t j = y; j < across_page; j++)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfa      	ldrb	r2, [r7, #15]
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	429a      	cmp	r2, r3
 800092c:	d3cf      	bcc.n	80008ce <GUI_Reverse_Y+0x1e>
		}
	}

}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000001c 	.word	0x2000001c

08000940 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	Bsp_DelayMS(10); //1000
 8000944:	200a      	movs	r0, #10
 8000946:	f000 f973 	bl	8000c30 <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 800094a:	f000 fa75 	bl	8000e38 <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(10);  //100
 800094e:	200a      	movs	r0, #10
 8000950:	f000 f96e 	bl	8000c30 <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 8000954:	f000 fa7a 	bl	8000e4c <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 8000958:	20ae      	movs	r0, #174	; 0xae
 800095a:	f000 fa3b 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 800095e:	20d5      	movs	r0, #213	; 0xd5
 8000960:	f000 fa38 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x80);//[3:0],分频因子;[7:4],震荡频率
 8000964:	2080      	movs	r0, #128	; 0x80
 8000966:	f000 fa35 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0x81);//设置对比度
 800096a:	2081      	movs	r0, #129	; 0x81
 800096c:	f000 fa32 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 8000970:	207f      	movs	r0, #127	; 0x7f
 8000972:	f000 fa2f 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 8000976:	208d      	movs	r0, #141	; 0x8d
 8000978:	f000 fa2c 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 800097c:	2014      	movs	r0, #20
 800097e:	f000 fa29 	bl	8000dd4 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 8000982:	2020      	movs	r0, #32
 8000984:	f000 fa26 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fa23 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 800098e:	2021      	movs	r0, #33	; 0x21
 8000990:	f000 fa20 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fa1d 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 800099a:	207f      	movs	r0, #127	; 0x7f
 800099c:	f000 fa1a 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 80009a0:	2022      	movs	r0, #34	; 0x22
 80009a2:	f000 fa17 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fa14 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 80009ac:	2007      	movs	r0, #7
 80009ae:	f000 fa11 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 80009b2:	20c9      	movs	r0, #201	; 0xc9
 80009b4:	f000 fa0e 	bl	8000dd4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 80009b8:	20a1      	movs	r0, #161	; 0xa1
 80009ba:	f000 fa0b 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 80009be:	20a4      	movs	r0, #164	; 0xa4
 80009c0:	f000 fa08 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 80009c4:	20a6      	movs	r0, #166	; 0xa6
 80009c6:	f000 fa05 	bl	8000dd4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 80009ca:	20af      	movs	r0, #175	; 0xaf
 80009cc:	f000 fa02 	bl	8000dd4 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 80009d0:	2056      	movs	r0, #86	; 0x56
 80009d2:	f000 f9ff 	bl	8000dd4 <Bsp_SPI_Send_CMD>
   Bsp_SPI_DMA_Init();//DMA初始化
 80009d6:	f000 f947 	bl	8000c68 <Bsp_SPI_DMA_Init>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <GUI_SPI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_CLEAR_SCREEN(){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	e013      	b.n	8000a14 <GUI_SPI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	e00a      	b.n	8000a08 <GUI_SPI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	490c      	ldr	r1, [pc, #48]	; (8000a28 <GUI_SPI_CLEAR_SCREEN+0x48>)
 80009f8:	01d2      	lsls	r2, r2, #7
 80009fa:	440a      	add	r2, r1
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3301      	adds	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b80      	cmp	r3, #128	; 0x80
 8000a0c:	d9f1      	bls.n	80009f2 <GUI_SPI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	3301      	adds	r3, #1
 8000a12:	71bb      	strb	r3, [r7, #6]
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d9e8      	bls.n	80009ec <GUI_SPI_CLEAR_SCREEN+0xc>
		}
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000001c 	.word	0x2000001c

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <SystemInit+0x5c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <SystemInit+0x5c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x5c>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <SystemInit+0x5c>)
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SystemInit+0x60>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x5c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <SystemInit+0x5c>)
 8000a4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0x5c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SystemInit+0x5c>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SystemInit+0x5c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <SystemInit+0x5c>)
 8000a6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SystemInit+0x5c>)
 8000a72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a76:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a78:	f000 f80c 	bl	8000a94 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x64>)
 8000a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a82:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	f8ff0000 	.word	0xf8ff0000
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000a98:	f000 f802 	bl	8000aa0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a39      	ldr	r2, [pc, #228]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <SetSysClockTo72+0x38>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ad6:	d1f0      	bne.n	8000aba <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	e001      	b.n	8000aee <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d14b      	bne.n	8000b8c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000b06:	f023 0303 	bic.w	r3, r3, #3
 8000b0a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <SetSysClockTo72+0xfc>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b3a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b3e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b46:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000b4a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b56:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b58:	bf00      	nop
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f9      	beq.n	8000b5a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b6c:	f023 0303 	bic.w	r3, r3, #3
 8000b70:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b7e:	bf00      	nop
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SetSysClockTo72+0xf8>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d1f9      	bne.n	8000b80 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ff44 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba6:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bbc:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f000 fcf5 	bl	80015b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fdc7 	bl	8000760 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bdc:	08001620 	.word	0x08001620
  ldr r2, =_sbss
 8000be0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000be4:	20000424 	.word	0x20000424

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 8000bf4:	490d      	ldr	r1, [pc, #52]	; (8000c2c <Bsp_DelayUS+0x40>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <Bsp_DelayUS+0x40>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <Bsp_DelayUS+0x40>)
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 8000c0e:	bf00      	nop
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <Bsp_DelayUS+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f9      	beq.n	8000c10 <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <Bsp_DelayUS+0x40>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	601a      	str	r2, [r3, #0]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	while(xms--)
 8000c38:	e003      	b.n	8000c42 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8000c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3e:	f7ff ffd5 	bl	8000bec <Bsp_DelayUS>
	while(xms--)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f6      	bne.n	8000c3a <Bsp_DelayMS+0xa>
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8000c5a:	f000 f85d 	bl	8000d18 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 8000c5e:	f000 f887 	bl	8000d70 <Bsp_SPI_Init>
	//Bsp_I2C_Init();
    
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fb63 	bl	800133c <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <Bsp_SPI_DMA_Init+0x60>)
 8000c78:	f000 f8f2 	bl	8000e60 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <Bsp_SPI_DMA_Init+0x64>)
 8000c7e:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <Bsp_SPI_DMA_Init+0x68>)
 8000c82:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000c84:	2310      	movs	r3, #16
 8000c86:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 8000c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8c:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <Bsp_SPI_DMA_Init+0x60>)
 8000cb2:	f000 f991 	bl	8000fd8 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <Bsp_SPI_DMA_Init+0x60>)
 8000cba:	f000 f9cb 	bl	8001054 <DMA_Cmd>
}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40020030 	.word	0x40020030
 8000ccc:	4001300c 	.word	0x4001300c
 8000cd0:	2000001c 	.word	0x2000001c

08000cd4 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000cd8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cdc:	f000 f9d6 	bl	800108c <DMA_GetFlagStatus>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d012      	beq.n	8000d0c <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8000ce6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cea:	f000 f9f7 	bl	80010dc <DMA_ClearFlag>
		Bsp_DelayUS(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f7ff ff7c 	bl	8000bec <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <DMA1_Channel6_IRQHandler+0x3c>)
 8000cf8:	f000 fae2 	bl	80012c0 <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <DMA1_Channel6_IRQHandler+0x3c>)
 8000d00:	f000 fafd 	bl	80012fe <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8000d04:	2100      	movs	r1, #0
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <DMA1_Channel6_IRQHandler+0x40>)
 8000d08:	f000 f9a4 	bl	8001054 <DMA_Cmd>
	}
}	
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40005400 	.word	0x40005400
 8000d14:	4002006c 	.word	0x4002006c

08000d18 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;



void Bsp_GPIO_Init(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2004      	movs	r0, #4
 8000d20:	f000 fb2a 	bl	8001378 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8000d24:	2101      	movs	r1, #1
 8000d26:	2009      	movs	r0, #9
 8000d28:	f000 fb26 	bl	8001378 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <Bsp_GPIO_Init+0x4c>)
 8000d2e:	2218      	movs	r2, #24
 8000d30:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <Bsp_GPIO_Init+0x4c>)
 8000d34:	2203      	movs	r2, #3
 8000d36:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <Bsp_GPIO_Init+0x4c>)
 8000d3a:	22a0      	movs	r2, #160	; 0xa0
 8000d3c:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <Bsp_GPIO_Init+0x50>)
 8000d40:	2210      	movs	r2, #16
 8000d42:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <Bsp_GPIO_Init+0x50>)
 8000d46:	2203      	movs	r2, #3
 8000d48:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <Bsp_GPIO_Init+0x50>)
 8000d4c:	2250      	movs	r2, #80	; 0x50
 8000d4e:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <Bsp_GPIO_Init+0x4c>)
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <Bsp_GPIO_Init+0x54>)
 8000d54:	f000 f9dc 	bl	8001110 <GPIO_Init>
        GPIO_Init(GPIOA,&GPIO_InitStruct_OUT_PP);
 8000d58:	4903      	ldr	r1, [pc, #12]	; (8000d68 <Bsp_GPIO_Init+0x50>)
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <Bsp_GPIO_Init+0x54>)
 8000d5c:	f000 f9d8 	bl	8001110 <GPIO_Init>
        GPIO_InitStruct_AF_OD.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStruct_AF_OD.GPIO_Pin = GUI_SCL_PIN | GUI_SDA_PIN ;
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000041c 	.word	0x2000041c
 8000d68:	20000420 	.word	0x20000420
 8000d6c:	40010800 	.word	0x40010800

08000d70 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8000d76:	2101      	movs	r1, #1
 8000d78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d7c:	f000 fafc 	bl	8001378 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <Bsp_SPI_Init+0x60>)
 8000d82:	f000 fb53 	bl	800142c <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8000d86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d8a:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000d8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d90:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000d92:	2300      	movs	r3, #0
 8000d94:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000d96:	2300      	movs	r3, #0
 8000d98:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da2:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 8000da4:	2338      	movs	r3, #56	; 0x38
 8000da6:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000da8:	2300      	movs	r3, #0
 8000daa:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000dac:	2307      	movs	r3, #7
 8000dae:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <Bsp_SPI_Init+0x60>)
 8000db6:	f000 fb73 	bl	80014a0 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <Bsp_SPI_Init+0x60>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <Bsp_SPI_Init+0x60>)
 8000dc4:	f000 fbaf 	bl	8001526 <SPI_Cmd>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013000 	.word	0x40013000

08000dd4 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(u8 TxData)                                   //发送命令
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	u8 retry=0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <Bsp_SPI_Send_CMD+0x5c>)
 8000de6:	f000 fa5d 	bl	80012a4 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000dea:	e005      	b.n	8000df8 <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2bc8      	cmp	r3, #200	; 0xc8
 8000df6:	d816      	bhi.n	8000e26 <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000df8:	2102      	movs	r1, #2
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <Bsp_SPI_Send_CMD+0x60>)
 8000dfc:	f000 fbc0 	bl	8001580 <SPI_I2S_GetFlagStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f2      	beq.n	8000dec <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f7ff ff12 	bl	8000c30 <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <Bsp_SPI_Send_CMD+0x60>)
 8000e14:	f000 fba6 	bl	8001564 <SPI_I2S_SendData>
	retry=0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <Bsp_SPI_Send_CMD+0x5c>)
 8000e20:	f000 fa32 	bl	8001288 <GPIO_SetBits>
 8000e24:	e000      	b.n	8000e28 <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 8000e26:	bf00      	nop
}
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40013000 	.word	0x40013000

08000e38 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
   
    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <Bsp_SPI_RES_LOW+0x10>)
 8000e40:	f000 fa30 	bl	80012a4 <GPIO_ResetBits>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010800 	.word	0x40010800

08000e4c <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 8000e50:	2110      	movs	r1, #16
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <Bsp_SPI_RES_HIGH+0x10>)
 8000e54:	f000 fa18 	bl	8001288 <GPIO_SetBits>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010800 	.word	0x40010800

08000e60 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e70:	4013      	ands	r3, r2
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a43      	ldr	r2, [pc, #268]	; (8000fa0 <DMA_DeInit+0x140>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <DMA_DeInit+0x144>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <DMA_DeInit+0x144>)
 8000e9c:	f043 030f 	orr.w	r3, r3, #15
 8000ea0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000ea2:	e077      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <DMA_DeInit+0x148>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000eac:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <DMA_DeInit+0x144>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <DMA_DeInit+0x144>)
 8000eb2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000eb6:	6053      	str	r3, [r2, #4]
}
 8000eb8:	e06c      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <DMA_DeInit+0x14c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <DMA_DeInit+0x144>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <DMA_DeInit+0x144>)
 8000ec8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ecc:	6053      	str	r3, [r2, #4]
}
 8000ece:	e061      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a37      	ldr	r2, [pc, #220]	; (8000fb0 <DMA_DeInit+0x150>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <DMA_DeInit+0x144>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <DMA_DeInit+0x144>)
 8000ede:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000ee2:	6053      	str	r3, [r2, #4]
}
 8000ee4:	e056      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <DMA_DeInit+0x154>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <DMA_DeInit+0x144>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <DMA_DeInit+0x144>)
 8000ef4:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ef8:	6053      	str	r3, [r2, #4]
}
 8000efa:	e04b      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <DMA_DeInit+0x158>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <DMA_DeInit+0x144>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <DMA_DeInit+0x144>)
 8000f0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0e:	6053      	str	r3, [r2, #4]
}
 8000f10:	e040      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <DMA_DeInit+0x15c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <DMA_DeInit+0x144>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <DMA_DeInit+0x144>)
 8000f20:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000f24:	6053      	str	r3, [r2, #4]
}
 8000f26:	e035      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <DMA_DeInit+0x160>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f36:	f043 030f 	orr.w	r3, r3, #15
 8000f3a:	6053      	str	r3, [r2, #4]
}
 8000f3c:	e02a      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <DMA_DeInit+0x168>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f50:	6053      	str	r3, [r2, #4]
}
 8000f52:	e01f      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <DMA_DeInit+0x16c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000f66:	6053      	str	r3, [r2, #4]
}
 8000f68:	e014      	b.n	8000f94 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <DMA_DeInit+0x170>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000f7c:	6053      	str	r3, [r2, #4]
}
 8000f7e:	e009      	b.n	8000f94 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <DMA_DeInit+0x174>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d105      	bne.n	8000f94 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <DMA_DeInit+0x164>)
 8000f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000f92:	6053      	str	r3, [r2, #4]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40020008 	.word	0x40020008
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	4002001c 	.word	0x4002001c
 8000fac:	40020030 	.word	0x40020030
 8000fb0:	40020044 	.word	0x40020044
 8000fb4:	40020058 	.word	0x40020058
 8000fb8:	4002006c 	.word	0x4002006c
 8000fbc:	40020080 	.word	0x40020080
 8000fc0:	40020408 	.word	0x40020408
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	4002041c 	.word	0x4002041c
 8000fcc:	40020430 	.word	0x40020430
 8000fd0:	40020444 	.word	0x40020444
 8000fd4:	40020458 	.word	0x40020458

08000fd8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ff6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001006:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001012:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800101e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60da      	str	r2, [r3, #12]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001072:	e006      	b.n	8001082 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800107c:	4013      	ands	r3, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <DMA_GetFlagStatus+0x48>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	e002      	b.n	80010b4 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <DMA_GetFlagStatus+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e001      	b.n	80010c8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020000 	.word	0x40020000

080010dc <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <DMA_ClearFlag+0x2c>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80010f4:	e002      	b.n	80010fc <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <DMA_ClearFlag+0x30>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6053      	str	r3, [r2, #4]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40020400 	.word	0x40020400
 800110c:	40020000 	.word	0x40020000

08001110 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	78db      	ldrb	r3, [r3, #3]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	461a      	mov	r2, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	4313      	orrs	r3, r2
 8001152:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d044      	beq.n	80011e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	e038      	b.n	80011dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800116a:	2201      	movs	r2, #1
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d126      	bne.n	80011d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800118e:	220f      	movs	r2, #15
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	43db      	mvns	r3, r3
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4013      	ands	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	2b28      	cmp	r3, #40	; 0x28
 80011b6:	d105      	bne.n	80011c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80011b8:	2201      	movs	r2, #1
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	409a      	lsls	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	e008      	b.n	80011d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	2b48      	cmp	r3, #72	; 0x48
 80011ca:	d104      	bne.n	80011d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011cc:	2201      	movs	r2, #1
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	409a      	lsls	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	3301      	adds	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	d9c3      	bls.n	800116a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	2bff      	cmp	r3, #255	; 0xff
 80011ee:	d946      	bls.n	800127e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e03a      	b.n	8001272 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	3308      	adds	r3, #8
 8001200:	2201      	movs	r2, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d127      	bne.n	800126c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001222:	220f      	movs	r2, #15
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	43db      	mvns	r3, r3
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4013      	ands	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	78db      	ldrb	r3, [r3, #3]
 8001248:	2b28      	cmp	r3, #40	; 0x28
 800124a:	d105      	bne.n	8001258 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	3308      	adds	r3, #8
 8001250:	2201      	movs	r2, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	78db      	ldrb	r3, [r3, #3]
 800125c:	2b48      	cmp	r3, #72	; 0x48
 800125e:	d105      	bne.n	800126c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3308      	adds	r3, #8
 8001264:	2201      	movs	r2, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	3301      	adds	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b07      	cmp	r3, #7
 8001276:	d9c1      	bls.n	80011fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	605a      	str	r2, [r3, #4]
  }
}
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80012e2:	e007      	b.n	80012f4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	801a      	strh	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8001320:	e007      	b.n	8001332 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	801a      	strh	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <RCC_AHBPeriphClockCmd+0x38>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <RCC_AHBPeriphClockCmd+0x38>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800135a:	e006      	b.n	800136a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <RCC_AHBPeriphClockCmd+0x38>)
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	43db      	mvns	r3, r3
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <RCC_AHBPeriphClockCmd+0x38>)
 8001366:	4013      	ands	r3, r2
 8001368:	614b      	str	r3, [r1, #20]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000

08001378 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <RCC_APB2PeriphClockCmd+0x38>)
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <RCC_APB2PeriphClockCmd+0x38>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001396:	e006      	b.n	80013a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <RCC_APB2PeriphClockCmd+0x38>)
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	43db      	mvns	r3, r3
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <RCC_APB2PeriphClockCmd+0x38>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	618b      	str	r3, [r1, #24]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <RCC_APB2PeriphResetCmd+0x38>)
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <RCC_APB2PeriphResetCmd+0x38>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80013d2:	e006      	b.n	80013e2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <RCC_APB2PeriphResetCmd+0x38>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <RCC_APB2PeriphResetCmd+0x38>)
 80013de:	4013      	ands	r3, r2
 80013e0:	60cb      	str	r3, [r1, #12]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000

080013f0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800140e:	e006      	b.n	800141e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	43db      	mvns	r3, r3
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 800141a:	4013      	ands	r3, r2
 800141c:	610b      	str	r3, [r1, #16]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000

0800142c <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <SPI_I2S_DeInit+0x68>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d10a      	bne.n	8001452 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800143c:	2101      	movs	r1, #1
 800143e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001442:	f7ff ffb7 	bl	80013b4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001446:	2100      	movs	r1, #0
 8001448:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800144c:	f7ff ffb2 	bl	80013b4 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001450:	e01c      	b.n	800148c <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <SPI_I2S_DeInit+0x6c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10a      	bne.n	8001470 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800145a:	2101      	movs	r1, #1
 800145c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001460:	f7ff ffc6 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001464:	2100      	movs	r1, #0
 8001466:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800146a:	f7ff ffc1 	bl	80013f0 <RCC_APB1PeriphResetCmd>
}
 800146e:	e00d      	b.n	800148c <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SPI_I2S_DeInit+0x70>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d109      	bne.n	800148c <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001478:	2101      	movs	r1, #1
 800147a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800147e:	f7ff ffb7 	bl	80013f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001482:	2100      	movs	r1, #0
 8001484:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001488:	f7ff ffb2 	bl	80013f0 <RCC_APB1PeriphResetCmd>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013000 	.word	0x40013000
 8001498:	40003800 	.word	0x40003800
 800149c:	40003c00 	.word	0x40003c00

080014a0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80014ba:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	885b      	ldrh	r3, [r3, #2]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014dc:	4313      	orrs	r3, r2
 80014de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	89fb      	ldrh	r3, [r7, #14]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	89fa      	ldrh	r2, [r7, #14]
 8001502:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	8b9b      	ldrh	r3, [r3, #28]
 8001508:	b29b      	uxth	r3, r3
 800150a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	8a1a      	ldrh	r2, [r3, #16]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	821a      	strh	r2, [r3, #16]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001548:	e007      	b.n	800155a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	801a      	strh	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	819a      	strh	r2, [r3, #12]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	891b      	ldrh	r3, [r3, #8]
 8001594:	b29a      	uxth	r2, r3
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	4013      	ands	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
	...

080015b8 <__libc_init_array>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	2600      	movs	r6, #0
 80015bc:	4d0c      	ldr	r5, [pc, #48]	; (80015f0 <__libc_init_array+0x38>)
 80015be:	4c0d      	ldr	r4, [pc, #52]	; (80015f4 <__libc_init_array+0x3c>)
 80015c0:	1b64      	subs	r4, r4, r5
 80015c2:	10a4      	asrs	r4, r4, #2
 80015c4:	42a6      	cmp	r6, r4
 80015c6:	d109      	bne.n	80015dc <__libc_init_array+0x24>
 80015c8:	f000 f81a 	bl	8001600 <_init>
 80015cc:	2600      	movs	r6, #0
 80015ce:	4d0a      	ldr	r5, [pc, #40]	; (80015f8 <__libc_init_array+0x40>)
 80015d0:	4c0a      	ldr	r4, [pc, #40]	; (80015fc <__libc_init_array+0x44>)
 80015d2:	1b64      	subs	r4, r4, r5
 80015d4:	10a4      	asrs	r4, r4, #2
 80015d6:	42a6      	cmp	r6, r4
 80015d8:	d105      	bne.n	80015e6 <__libc_init_array+0x2e>
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e0:	4798      	blx	r3
 80015e2:	3601      	adds	r6, #1
 80015e4:	e7ee      	b.n	80015c4 <__libc_init_array+0xc>
 80015e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ea:	4798      	blx	r3
 80015ec:	3601      	adds	r6, #1
 80015ee:	e7f2      	b.n	80015d6 <__libc_init_array+0x1e>
 80015f0:	08001618 	.word	0x08001618
 80015f4:	08001618 	.word	0x08001618
 80015f8:	08001618 	.word	0x08001618
 80015fc:	0800161c 	.word	0x0800161c

08001600 <_init>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr

0800160c <_fini>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	bf00      	nop
 8001610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001612:	bc08      	pop	{r3}
 8001614:	469e      	mov	lr, r3
 8001616:	4770      	bx	lr
