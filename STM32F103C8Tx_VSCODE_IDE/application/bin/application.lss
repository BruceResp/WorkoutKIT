
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001958 	.word	0x08001958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001958 	.word	0x08001958

0800014c <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000152:	f000 fc6a 	bl	8000a2a <Bsp_Init>
	GUI_Init();
 8000156:	f000 f8ee 	bl	8000336 <GUI_Init>
	// OLED_Write(2,1,"B",0);
	// OLED_Write(3,50,"C",0);
	// 	Bsp_DelayMS(5000);
	// 	GUI_Show_String(1,1,a);
		
		for (uint8_t i = 0; i < 63; i++)
 800015a:	2300      	movs	r3, #0
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	e015      	b.n	800018c <main+0x40>
			// GUI_SPI_Display_Char_ASCII(3,50,"B",0);
			// GUI_Test();
			// GUI_SPI_Reverse_Y(i,10);
			// Bsp_DelayMS(1000);
			// GUI_SPI_CLEAR_SCREEN();
			GUI_CLEAR_SCREEN();
 8000160:	f000 f8a0 	bl	80002a4 <GUI_CLEAR_SCREEN>
			//GUI_ShowString_FulCoord(i,i,"abcd");
			GUI_Test();
 8000164:	f000 fb2a 	bl	80007bc <GUI_Test>
			GUI_Reverse_Y(i,10);
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	210a      	movs	r1, #10
 800016c:	4618      	mov	r0, r3
 800016e:	f000 fa1d 	bl	80005ac <GUI_Reverse_Y>
			GUI_Draw_Line(-2,-10,110,50);
 8000172:	2332      	movs	r3, #50	; 0x32
 8000174:	226e      	movs	r2, #110	; 0x6e
 8000176:	f06f 0109 	mvn.w	r1, #9
 800017a:	f06f 0001 	mvn.w	r0, #1
 800017e:	f000 fa59 	bl	8000634 <GUI_Draw_Line>
			//GUI_Draw_Line(2,50,110,50);
			//OLED_DrawLine(-2,5,50,9);
		 	GUI_Update_Screen();
 8000182:	f000 f831 	bl	80001e8 <GUI_Update_Screen>
		for (uint8_t i = 0; i < 63; i++)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	3301      	adds	r3, #1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b3e      	cmp	r3, #62	; 0x3e
 8000190:	d9e6      	bls.n	8000160 <main+0x14>
 8000192:	e7e2      	b.n	800015a <main+0xe>

08000194 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <HardFault_Handler+0x4>

080001a6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001a6:	b480      	push	{r7}
 80001a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001aa:	e7fe      	b.n	80001aa <MemManage_Handler+0x4>

080001ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001b0:	e7fe      	b.n	80001b0 <BusFault_Handler+0x4>

080001b2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001b2:	b480      	push	{r7}
 80001b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80001b6:	e7fe      	b.n	80001b6 <UsageFault_Handler+0x4>

080001b8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr

080001e8 <GUI_Update_Screen>:
*函数功能:' ' 
*说    明: '更新单片机显存缓存矩阵到SSD1306上,如果方法中使用了GUI_DISPLAY_BUF缓存，则必须在最后调用
			这个方法来更新显示' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Update_Screen(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	
	for (size_t j = 0; j < 8; j++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e010      	b.n	8000216 <GUI_Update_Screen+0x2e>
	{	
		GUI_Set_Cursor(j,0);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f878 	bl	80002f0 <GUI_Set_Cursor>
		Bsp_I2C_Write_Bytes(&GUI_DISPLAY_BUF[j],0);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	01db      	lsls	r3, r3, #7
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <GUI_Update_Screen+0x40>)
 8000206:	4413      	add	r3, r2
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fd84 	bl	8000d18 <Bsp_I2C_Write_Bytes>
	for (size_t j = 0; j < 8; j++)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d9eb      	bls.n	80001f4 <GUI_Update_Screen+0xc>
	}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000030 	.word	0x20000030

0800022c <GUI_Draw_Point>:
*函数名称:'GUI_Draw_Point' 
*函数功能:'画 点' 
*参    数:'0<x<64,0<y<128' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Draw_Point(int x,int y){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
	if (x>=0 && x<=127 && y>=0 &&y <= 63)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db2b      	blt.n	8000294 <GUI_Draw_Point+0x68>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b7f      	cmp	r3, #127	; 0x7f
 8000240:	dc28      	bgt.n	8000294 <GUI_Draw_Point+0x68>
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	db25      	blt.n	8000294 <GUI_Draw_Point+0x68>
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	2b3f      	cmp	r3, #63	; 0x3f
 800024c:	dc22      	bgt.n	8000294 <GUI_Draw_Point+0x68>
	{
		GUI_DISPLAY_BUF[y/8][x] |= 0x01 << (y%8);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	da00      	bge.n	8000256 <GUI_Draw_Point+0x2a>
 8000254:	3307      	adds	r3, #7
 8000256:	10db      	asrs	r3, r3, #3
 8000258:	461a      	mov	r2, r3
 800025a:	4911      	ldr	r1, [pc, #68]	; (80002a0 <GUI_Draw_Point+0x74>)
 800025c:	01d3      	lsls	r3, r2, #7
 800025e:	4419      	add	r1, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	440b      	add	r3, r1
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b259      	sxtb	r1, r3
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	4258      	negs	r0, r3
 800026c:	f003 0307 	and.w	r3, r3, #7
 8000270:	f000 0007 	and.w	r0, r0, #7
 8000274:	bf58      	it	pl
 8000276:	4243      	negpl	r3, r0
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f303 	lsl.w	r3, r0, r3
 800027e:	b25b      	sxtb	r3, r3
 8000280:	430b      	orrs	r3, r1
 8000282:	b25b      	sxtb	r3, r3
 8000284:	b2d8      	uxtb	r0, r3
 8000286:	4906      	ldr	r1, [pc, #24]	; (80002a0 <GUI_Draw_Point+0x74>)
 8000288:	01d3      	lsls	r3, r2, #7
 800028a:	18ca      	adds	r2, r1, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	4602      	mov	r2, r0
 8000292:	701a      	strb	r2, [r3, #0]
	}
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000030 	.word	0x20000030

080002a4 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	71bb      	strb	r3, [r7, #6]
 80002ae:	e013      	b.n	80002d8 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 80002b0:	2300      	movs	r3, #0
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	e00a      	b.n	80002cc <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 80002b6:	79ba      	ldrb	r2, [r7, #6]
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	490c      	ldr	r1, [pc, #48]	; (80002ec <GUI_CLEAR_SCREEN+0x48>)
 80002bc:	01d2      	lsls	r2, r2, #7
 80002be:	440a      	add	r2, r1
 80002c0:	4413      	add	r3, r2
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	3301      	adds	r3, #1
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b80      	cmp	r3, #128	; 0x80
 80002d0:	d9f1      	bls.n	80002b6 <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b07      	cmp	r3, #7
 80002dc:	d9e8      	bls.n	80002b0 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000030 	.word	0x20000030

080002f0 <GUI_Set_Cursor>:
 *返 回 值：
 *说    明：0 < x < 8 , 0 < Y < 128,直接操作SSD1306 和 非全尺寸指令配合使用
 *作    者：Danny
 *修改记录：
 *----------------------------------------------------------------------------------------*/
void GUI_Set_Cursor(uint8_t Y,uint8_t X){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]

	Bsp_I2C_SET(0xB0 | Y);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fced 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x10 | ((X & 0xF0) >> 4));
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	091b      	lsrs	r3, r3, #4
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fce4 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00 | (X & 0x0F));  //低位
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fcdd 	bl	8000ce8 <Bsp_I2C_SET>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <GUI_Init>:
@name:'GUI_Init' 
@param ''
@brief:'初始化 GUI' 
@author Danny
*----------------------------------------------------------------------------------------*/ 
void GUI_Init(void) {
 8000336:	b580      	push	{r7, lr}
 8000338:	af00      	add	r7, sp, #0
	
 	Bsp_DelayMS(200);
 800033a:	20c8      	movs	r0, #200	; 0xc8
 800033c:	f000 fb62 	bl	8000a04 <Bsp_DelayMS>
	/**************初始化SSD1306*****************/
	Bsp_I2C_SET(0xAE); //--turn off oled panel
 8000340:	20ae      	movs	r0, #174	; 0xae
 8000342:	f000 fcd1 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00); //---set low column address
 8000346:	2000      	movs	r0, #0
 8000348:	f000 fcce 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x10); //---set high column address
 800034c:	2010      	movs	r0, #16
 800034e:	f000 fccb 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x40 ); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000352:	2040      	movs	r0, #64	; 0x40
 8000354:	f000 fcc8 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x81 ); //--set contrast control register
 8000358:	2081      	movs	r0, #129	; 0x81
 800035a:	f000 fcc5 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xCF ); // Set SEG Output Current Brightness
 800035e:	20cf      	movs	r0, #207	; 0xcf
 8000360:	f000 fcc2 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA1 ); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8000364:	20a1      	movs	r0, #161	; 0xa1
 8000366:	f000 fcbf 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xC8 ); //Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800036a:	20c8      	movs	r0, #200	; 0xc8
 800036c:	f000 fcbc 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA6 ); //--set normal display
 8000370:	20a6      	movs	r0, #166	; 0xa6
 8000372:	f000 fcb9 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA8 ); //--set multiplex ratio(1 to 64)
 8000376:	20a8      	movs	r0, #168	; 0xa8
 8000378:	f000 fcb6 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x3f ); //--1/64 duty
 800037c:	203f      	movs	r0, #63	; 0x3f
 800037e:	f000 fcb3 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xD3 ); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8000382:	20d3      	movs	r0, #211	; 0xd3
 8000384:	f000 fcb0 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00 ); //-not offset
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fcad 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xd5 ); //--set display clock divide ratio/oscillator frequency
 800038e:	20d5      	movs	r0, #213	; 0xd5
 8000390:	f000 fcaa 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x80 ); //--set divide ratio, Set Clock as 100 Frames/Sec
 8000394:	2080      	movs	r0, #128	; 0x80
 8000396:	f000 fca7 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xD9 ); //--set pre-charge period
 800039a:	20d9      	movs	r0, #217	; 0xd9
 800039c:	f000 fca4 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xF1 ); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80003a0:	20f1      	movs	r0, #241	; 0xf1
 80003a2:	f000 fca1 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xDA ); //--set com pins hardware configuration
 80003a6:	20da      	movs	r0, #218	; 0xda
 80003a8:	f000 fc9e 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x12 );
 80003ac:	2012      	movs	r0, #18
 80003ae:	f000 fc9b 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xDB ); //--set vcomh
 80003b2:	20db      	movs	r0, #219	; 0xdb
 80003b4:	f000 fc98 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x40 ); //Set VCOM Deselect Level
 80003b8:	2040      	movs	r0, #64	; 0x40
 80003ba:	f000 fc95 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x20 ); //-Set Page Addressing Mode (0x00/0x01/0x02)
 80003be:	2020      	movs	r0, #32
 80003c0:	f000 fc92 	bl	8000ce8 <Bsp_I2C_SET>
	//OLED_WR_Byte(0x02, OLED_CMD); //
	Bsp_I2C_SET(0x00); //在这里修改位行扫描方式
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fc8f 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x8D); //--set Charge Pump enable/disable
 80003ca:	208d      	movs	r0, #141	; 0x8d
 80003cc:	f000 fc8c 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x14); //--set(0x10) disable
 80003d0:	2014      	movs	r0, #20
 80003d2:	f000 fc89 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA4); // Disable Entire Display On (0xa4/0xa5)
 80003d6:	20a4      	movs	r0, #164	; 0xa4
 80003d8:	f000 fc86 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA6); // Disable Inverse Display On (0xa6/a7)
 80003dc:	20a6      	movs	r0, #166	; 0xa6
 80003de:	f000 fc83 	bl	8000ce8 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xAF);
 80003e2:	20af      	movs	r0, #175	; 0xaf
 80003e4:	f000 fc80 	bl	8000ce8 <Bsp_I2C_SET>
	// Bsp_I2C_SET(0x8D);	//设置充电泵
	// Bsp_I2C_SET(0x14);

	// Bsp_I2C_SET(0xAF);	//开启显示
	// //while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	Bsp_I2C_DMA_Init();
 80003e8:	f000 fb28 	bl	8000a3c <Bsp_I2C_DMA_Init>
	//GUI_CLEAR_SCREEN();				//复位OLED
	//GUI_Update_Screen();				//更新显示，清屏，防止初始化后未显示内容时花屏
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <GUI_Show_Image>:
			Image: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Show_Image(int16_t X, int16_t Y,uint8_t Height,uint8_t Width, const uint8_t *Image){
 80003f0:	b490      	push	{r4, r7}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4604      	mov	r4, r0
 80003f8:	4608      	mov	r0, r1
 80003fa:	4611      	mov	r1, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	4623      	mov	r3, r4
 8000400:	80fb      	strh	r3, [r7, #6]
 8000402:	4603      	mov	r3, r0
 8000404:	80bb      	strh	r3, [r7, #4]
 8000406:	460b      	mov	r3, r1
 8000408:	70fb      	strb	r3, [r7, #3]
 800040a:	4613      	mov	r3, r2
 800040c:	70bb      	strb	r3, [r7, #2]
	uint8_t	across_line = (Height-1) / 8 + 1 ; 			//先看占几行
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	3b01      	subs	r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	da00      	bge.n	8000418 <GUI_Show_Image+0x28>
 8000416:	3307      	adds	r3, #7
 8000418:	10db      	asrs	r3, r3, #3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	3301      	adds	r3, #1
 800041e:	727b      	strb	r3, [r7, #9]
	int16_t Page, shift;
	for (uint8_t j = 0; j < across_line; j++)
 8000420:	2300      	movs	r3, #0
 8000422:	72fb      	strb	r3, [r7, #11]
 8000424:	e0b4      	b.n	8000590 <GUI_Show_Image+0x1a0>
	{	
		for (uint8_t i = 0; i < Width ; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	72bb      	strb	r3, [r7, #10]
 800042a:	e0a9      	b.n	8000580 <GUI_Show_Image+0x190>
		{	
			if ((X + i) > 127 && (X + i) < 0)
 800042c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000430:	7abb      	ldrb	r3, [r7, #10]
 8000432:	4413      	add	r3, r2
 8000434:	2b7f      	cmp	r3, #127	; 0x7f
 8000436:	dd06      	ble.n	8000446 <GUI_Show_Image+0x56>
 8000438:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800043c:	7abb      	ldrb	r3, [r7, #10]
 800043e:	4413      	add	r3, r2
 8000440:	2b00      	cmp	r3, #0
 8000442:	f2c0 8099 	blt.w	8000578 <GUI_Show_Image+0x188>
			{
				continue;
			}
			shift = Y % 8;
 8000446:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800044a:	425a      	negs	r2, r3
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	f002 0207 	and.w	r2, r2, #7
 8000454:	bf58      	it	pl
 8000456:	4253      	negpl	r3, r2
 8000458:	81bb      	strh	r3, [r7, #12]
			Page = Y / 8;
 800045a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	da00      	bge.n	8000464 <GUI_Show_Image+0x74>
 8000462:	3307      	adds	r3, #7
 8000464:	10db      	asrs	r3, r3, #3
 8000466:	81fb      	strh	r3, [r7, #14]

			if (Y < 0)   // Y<-8 的情况可以保证 Page+j<0(j ==0 ) 但是 -8<Y<0的情况会进去像素赋值，而j<0导致i+width出现不准确的情况，我们只需要需要的部分就好了
 8000468:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	da07      	bge.n	8000480 <GUI_Show_Image+0x90>
			{
				Page -= 1;
 8000470:	89fb      	ldrh	r3, [r7, #14]
 8000472:	3b01      	subs	r3, #1
 8000474:	b29b      	uxth	r3, r3
 8000476:	81fb      	strh	r3, [r7, #14]
				shift += 8;
 8000478:	89bb      	ldrh	r3, [r7, #12]
 800047a:	3308      	adds	r3, #8
 800047c:	b29b      	uxth	r3, r3
 800047e:	81bb      	strh	r3, [r7, #12]
			}
			if ((Page + j) >= 0 && (Page + j) < 8)
 8000480:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000484:	7afb      	ldrb	r3, [r7, #11]
 8000486:	4413      	add	r3, r2
 8000488:	2b00      	cmp	r3, #0
 800048a:	db34      	blt.n	80004f6 <GUI_Show_Image+0x106>
 800048c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	4413      	add	r3, r2
 8000494:	2b07      	cmp	r3, #7
 8000496:	dc2e      	bgt.n	80004f6 <GUI_Show_Image+0x106>
			{
				GUI_DISPLAY_BUF[Page + j][X + i] |= Image[i + Width*j] << (shift);
 8000498:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	441a      	add	r2, r3
 80004a0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80004a4:	7abb      	ldrb	r3, [r7, #10]
 80004a6:	440b      	add	r3, r1
 80004a8:	493f      	ldr	r1, [pc, #252]	; (80005a8 <GUI_Show_Image+0x1b8>)
 80004aa:	01d2      	lsls	r2, r2, #7
 80004ac:	440a      	add	r2, r1
 80004ae:	4413      	add	r3, r2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25a      	sxtb	r2, r3
 80004b4:	7ab9      	ldrb	r1, [r7, #10]
 80004b6:	78bb      	ldrb	r3, [r7, #2]
 80004b8:	7af8      	ldrb	r0, [r7, #11]
 80004ba:	fb00 f303 	mul.w	r3, r0, r3
 80004be:	440b      	add	r3, r1
 80004c0:	4619      	mov	r1, r3
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	440b      	add	r3, r1
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b258      	sxtb	r0, r3
 80004d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	441a      	add	r2, r3
 80004e0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80004e4:	7abb      	ldrb	r3, [r7, #10]
 80004e6:	440b      	add	r3, r1
 80004e8:	b2c0      	uxtb	r0, r0
 80004ea:	492f      	ldr	r1, [pc, #188]	; (80005a8 <GUI_Show_Image+0x1b8>)
 80004ec:	01d2      	lsls	r2, r2, #7
 80004ee:	440a      	add	r2, r1
 80004f0:	4413      	add	r3, r2
 80004f2:	4602      	mov	r2, r0
 80004f4:	701a      	strb	r2, [r3, #0]
			}
			if ((Page + j + 1) >= 0 && (Page + j + 1) < 8)
 80004f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004fa:	7afb      	ldrb	r3, [r7, #11]
 80004fc:	4413      	add	r3, r2
 80004fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000502:	db3a      	blt.n	800057a <GUI_Show_Image+0x18a>
 8000504:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000508:	7afb      	ldrb	r3, [r7, #11]
 800050a:	4413      	add	r3, r2
 800050c:	2b06      	cmp	r3, #6
 800050e:	dc34      	bgt.n	800057a <GUI_Show_Image+0x18a>
			{
				GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Image[i + Width*j] >> (8-(shift));
 8000510:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000514:	7afb      	ldrb	r3, [r7, #11]
 8000516:	4413      	add	r3, r2
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800051e:	7abb      	ldrb	r3, [r7, #10]
 8000520:	440b      	add	r3, r1
 8000522:	4921      	ldr	r1, [pc, #132]	; (80005a8 <GUI_Show_Image+0x1b8>)
 8000524:	01d2      	lsls	r2, r2, #7
 8000526:	440a      	add	r2, r1
 8000528:	4413      	add	r3, r2
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b25a      	sxtb	r2, r3
 800052e:	7ab9      	ldrb	r1, [r7, #10]
 8000530:	78bb      	ldrb	r3, [r7, #2]
 8000532:	7af8      	ldrb	r0, [r7, #11]
 8000534:	fb00 f303 	mul.w	r3, r0, r3
 8000538:	440b      	add	r3, r1
 800053a:	4619      	mov	r1, r3
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	440b      	add	r3, r1
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000548:	f1c3 0308 	rsb	r3, r3, #8
 800054c:	fa41 f303 	asr.w	r3, r1, r3
 8000550:	b25b      	sxtb	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b258      	sxtb	r0, r3
 8000556:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	4413      	add	r3, r2
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000564:	7abb      	ldrb	r3, [r7, #10]
 8000566:	440b      	add	r3, r1
 8000568:	b2c0      	uxtb	r0, r0
 800056a:	490f      	ldr	r1, [pc, #60]	; (80005a8 <GUI_Show_Image+0x1b8>)
 800056c:	01d2      	lsls	r2, r2, #7
 800056e:	440a      	add	r2, r1
 8000570:	4413      	add	r3, r2
 8000572:	4602      	mov	r2, r0
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e000      	b.n	800057a <GUI_Show_Image+0x18a>
				continue;
 8000578:	bf00      	nop
		for (uint8_t i = 0; i < Width ; i++)
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	3301      	adds	r3, #1
 800057e:	72bb      	strb	r3, [r7, #10]
 8000580:	7aba      	ldrb	r2, [r7, #10]
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	429a      	cmp	r2, r3
 8000586:	f4ff af51 	bcc.w	800042c <GUI_Show_Image+0x3c>
	for (uint8_t j = 0; j < across_line; j++)
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	3301      	adds	r3, #1
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	7afa      	ldrb	r2, [r7, #11]
 8000592:	7a7b      	ldrb	r3, [r7, #9]
 8000594:	429a      	cmp	r2, r3
 8000596:	f4ff af46 	bcc.w	8000426 <GUI_Show_Image+0x36>
			}
		}
	}

}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc90      	pop	{r4, r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000030 	.word	0x20000030

080005ac <GUI_Reverse_Y>:
*参    数:'y:要反转的y轴坐标 0<y<64 height：反转行的高度' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Reverse_Y(uint8_t y,uint8_t height){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]

	for (uint8_t j = y; j < y+height; j++)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e029      	b.n	8000616 <GUI_Reverse_Y+0x6a>
	{
		for (uint8_t i = 0; i < 128; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	73bb      	strb	r3, [r7, #14]
 80005c6:	e01f      	b.n	8000608 <GUI_Reverse_Y+0x5c>
		{
			GUI_DISPLAY_BUF[j / 8][i] ^= 0x01 << (j % 8); //对行取反
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2d8      	uxtb	r0, r3
 80005ce:	4602      	mov	r2, r0
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	4917      	ldr	r1, [pc, #92]	; (8000630 <GUI_Reverse_Y+0x84>)
 80005d4:	01d2      	lsls	r2, r2, #7
 80005d6:	440a      	add	r2, r1
 80005d8:	4413      	add	r3, r2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f003 0307 	and.w	r3, r3, #7
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	4053      	eors	r3, r2
 80005ee:	b259      	sxtb	r1, r3
 80005f0:	4602      	mov	r2, r0
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	b2c8      	uxtb	r0, r1
 80005f6:	490e      	ldr	r1, [pc, #56]	; (8000630 <GUI_Reverse_Y+0x84>)
 80005f8:	01d2      	lsls	r2, r2, #7
 80005fa:	440a      	add	r2, r1
 80005fc:	4413      	add	r3, r2
 80005fe:	4602      	mov	r2, r0
 8000600:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 128; i++)
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
 8000608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060c:	2b00      	cmp	r3, #0
 800060e:	dadb      	bge.n	80005c8 <GUI_Reverse_Y+0x1c>
	for (uint8_t j = y; j < y+height; j++)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3301      	adds	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	79f9      	ldrb	r1, [r7, #7]
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	440b      	add	r3, r1
 800061e:	429a      	cmp	r2, r3
 8000620:	dbcf      	blt.n	80005c2 <GUI_Reverse_Y+0x16>
		}
	}

}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000030 	.word	0x20000030

08000634 <GUI_Draw_Line>:
		
	// }
	
}

void GUI_Draw_Line(int X1, int Y1,int X2, int Y2){
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	603b      	str	r3, [r7, #0]
	u8 flag = 0 ;
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (Y2-Y1 > X2 - X1)
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1ad2      	subs	r2, r2, r3
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	429a      	cmp	r2, r3
 8000656:	dd0f      	ble.n	8000678 <GUI_Draw_Line+0x44>
	{
		int temp;
		temp = Y1 ; Y1 = X1; X1 = temp;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	623b      	str	r3, [r7, #32]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	60fb      	str	r3, [r7, #12]
		temp = Y2 ; Y2 = X2; X2 = temp;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	623b      	str	r3, [r7, #32]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	6a3b      	ldr	r3, [r7, #32]
 800066e:	607b      	str	r3, [r7, #4]
		flag = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000676:	e025      	b.n	80006c4 <GUI_Draw_Line+0x90>
	}
	else if (Y2 - Y1 < 0)
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	da20      	bge.n	80006c4 <GUI_Draw_Line+0x90>
	{
		Y1 = -Y1; Y2 = -Y2;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	425b      	negs	r3, r3
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	425b      	negs	r3, r3
 800068c:	603b      	str	r3, [r7, #0]
		if (Y2-Y1 > X2 - X1)
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	1acb      	subs	r3, r1, r3
 800069a:	429a      	cmp	r2, r3
 800069c:	dd0f      	ble.n	80006be <GUI_Draw_Line+0x8a>
		{
			int temp;
			temp = Y1 ; Y1 = X1; X1 = temp;
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	60fb      	str	r3, [r7, #12]
			temp = Y2 ; Y2 = X2; X2 = temp;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	607b      	str	r3, [r7, #4]
			flag = 3;
 80006b6:	2303      	movs	r3, #3
 80006b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006bc:	e002      	b.n	80006c4 <GUI_Draw_Line+0x90>
		}
		else{
			flag = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}

	int dx = X2 - X1,dy = Y2 -Y1;	//
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	61bb      	str	r3, [r7, #24]
	int base_part = 2 * dy - dx;
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	005a      	lsls	r2, r3, #1
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
	int inc = 2 * dy;
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
	int inc_dbl = 2 * (dy -dx);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
	
	int y = Y1;
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	switch (flag)
 80006f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d012      	beq.n	8000720 <GUI_Draw_Line+0xec>
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dc17      	bgt.n	800072e <GUI_Draw_Line+0xfa>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d002      	beq.n	8000708 <GUI_Draw_Line+0xd4>
 8000702:	2b02      	cmp	r3, #2
 8000704:	d005      	beq.n	8000712 <GUI_Draw_Line+0xde>
 8000706:	e012      	b.n	800072e <GUI_Draw_Line+0xfa>
	{
	case 1:GUI_Draw_Point(Y1,X1);break;
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	68b8      	ldr	r0, [r7, #8]
 800070c:	f7ff fd8e 	bl	800022c <GUI_Draw_Point>
 8000710:	e012      	b.n	8000738 <GUI_Draw_Line+0x104>
	case 2:GUI_Draw_Point(X1,-Y1);break;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	425b      	negs	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fd87 	bl	800022c <GUI_Draw_Point>
 800071e:	e00b      	b.n	8000738 <GUI_Draw_Line+0x104>
	case 3:GUI_Draw_Point(Y1,-X1);break;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	425b      	negs	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f7ff fd80 	bl	800022c <GUI_Draw_Point>
 800072c:	e004      	b.n	8000738 <GUI_Draw_Line+0x104>
	default:GUI_Draw_Point(X1,Y1);
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff fd7b 	bl	800022c <GUI_Draw_Point>
		break;
 8000736:	bf00      	nop
	}
	//GUI_Draw_Point(X1,Y1);

	for (int x = X1+1; x < X2; x++)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
 800073e:	e034      	b.n	80007aa <GUI_Draw_Line+0x176>
	{
		if (base_part < 0)
 8000740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000742:	2b00      	cmp	r3, #0
 8000744:	da04      	bge.n	8000750 <GUI_Draw_Line+0x11c>
		{
			base_part += inc;
 8000746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	4413      	add	r3, r2
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
 800074e:	e006      	b.n	800075e <GUI_Draw_Line+0x12a>
		}else{
			base_part += inc_dbl;
 8000750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	4413      	add	r3, r2
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
			y += 1;
 8000758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075a:	3301      	adds	r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		switch (flag)
 800075e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000762:	2b03      	cmp	r3, #3
 8000764:	d012      	beq.n	800078c <GUI_Draw_Line+0x158>
 8000766:	2b03      	cmp	r3, #3
 8000768:	dc17      	bgt.n	800079a <GUI_Draw_Line+0x166>
 800076a:	2b01      	cmp	r3, #1
 800076c:	d002      	beq.n	8000774 <GUI_Draw_Line+0x140>
 800076e:	2b02      	cmp	r3, #2
 8000770:	d005      	beq.n	800077e <GUI_Draw_Line+0x14a>
 8000772:	e012      	b.n	800079a <GUI_Draw_Line+0x166>
		{
		case 1:GUI_Draw_Point(y,x);break;
 8000774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000778:	f7ff fd58 	bl	800022c <GUI_Draw_Point>
 800077c:	e012      	b.n	80007a4 <GUI_Draw_Line+0x170>
		case 2:GUI_Draw_Point(x,-y);break;
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	425b      	negs	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000786:	f7ff fd51 	bl	800022c <GUI_Draw_Point>
 800078a:	e00b      	b.n	80007a4 <GUI_Draw_Line+0x170>
		case 3:GUI_Draw_Point(y,-x);break;
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	425b      	negs	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000794:	f7ff fd4a 	bl	800022c <GUI_Draw_Point>
 8000798:	e004      	b.n	80007a4 <GUI_Draw_Line+0x170>
		default:GUI_Draw_Point(x,y);
 800079a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800079c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800079e:	f7ff fd45 	bl	800022c <GUI_Draw_Point>
			break;
 80007a2:	bf00      	nop
	for (int x = X1+1; x < X2; x++)
 80007a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a6:	3301      	adds	r3, #1
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80007aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dbc6      	blt.n	8000740 <GUI_Draw_Line+0x10c>
		}		
	}
	
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3738      	adds	r7, #56	; 0x38
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <GUI_Test>:
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
		}
	}
}

void GUI_Test(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
	
	//Bsp_DelayS(5);
	GUI_Show_Image(100,50,16,16,OLED_Test[0].CellMatrix);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <GUI_Test+0x40>)
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2310      	movs	r3, #16
 80007c8:	2210      	movs	r2, #16
 80007ca:	2132      	movs	r1, #50	; 0x32
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f7ff fe0f 	bl	80003f0 <GUI_Show_Image>
	GUI_Show_Image(1,1,16,16,OLED_Test[0].CellMatrix);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <GUI_Test+0x40>)
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2310      	movs	r3, #16
 80007d8:	2210      	movs	r2, #16
 80007da:	2101      	movs	r1, #1
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fe07 	bl	80003f0 <GUI_Show_Image>
	GUI_Show_Image(-5,-5,16,16,OLED_Test[0].CellMatrix);
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <GUI_Test+0x40>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2310      	movs	r3, #16
 80007e8:	2210      	movs	r2, #16
 80007ea:	f06f 0104 	mvn.w	r1, #4
 80007ee:	f06f 0004 	mvn.w	r0, #4
 80007f2:	f7ff fdfd 	bl	80003f0 <GUI_Show_Image>
	//GUI_SPI_Display_Graph(5,5,16,16,OLED_Test[0].CellMatrix);
	//GUI_Display_OFF();
	//Bsp_DelayS(5);
	//GUI_Display_ON();
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08001970 	.word	0x08001970

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <SystemInit+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <SystemInit+0x5c>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <SystemInit+0x5c>)
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <SystemInit+0x5c>)
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <SystemInit+0x60>)
 8000818:	4013      	ands	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SystemInit+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <SystemInit+0x5c>)
 8000822:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SystemInit+0x5c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SystemInit+0x5c>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <SystemInit+0x5c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <SystemInit+0x5c>)
 800083e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000842:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SystemInit+0x5c>)
 8000846:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800084a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800084c:	f000 f80c 	bl	8000868 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SystemInit+0x64>)
 8000852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000856:	609a      	str	r2, [r3, #8]
#endif 
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	f8ff0000 	.word	0xf8ff0000
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800086c:	f000 f802 	bl	8000874 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <SetSysClockTo72+0xf8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a39      	ldr	r2, [pc, #228]	; (800096c <SetSysClockTo72+0xf8>)
 8000888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <SetSysClockTo72+0xf8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <SetSysClockTo72+0x38>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008aa:	d1f0      	bne.n	800088e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <SetSysClockTo72+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008b8:	2301      	movs	r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	e001      	b.n	80008c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d14b      	bne.n	8000960 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <SetSysClockTo72+0xfc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a28      	ldr	r2, [pc, #160]	; (8000970 <SetSysClockTo72+0xfc>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SetSysClockTo72+0xfc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <SetSysClockTo72+0xfc>)
 80008da:	f023 0303 	bic.w	r3, r3, #3
 80008de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SetSysClockTo72+0xfc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <SetSysClockTo72+0xfc>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <SetSysClockTo72+0xf8>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <SetSysClockTo72+0xf8>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <SetSysClockTo72+0xf8>)
 80008f6:	4a1d      	ldr	r2, [pc, #116]	; (800096c <SetSysClockTo72+0xf8>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <SetSysClockTo72+0xf8>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <SetSysClockTo72+0xf8>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <SetSysClockTo72+0xf8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <SetSysClockTo72+0xf8>)
 800090e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000912:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <SetSysClockTo72+0xf8>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <SetSysClockTo72+0xf8>)
 800091a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800091e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <SetSysClockTo72+0xf8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <SetSysClockTo72+0xf8>)
 8000926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800092c:	bf00      	nop
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <SetSysClockTo72+0xf8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <SetSysClockTo72+0xf8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <SetSysClockTo72+0xf8>)
 8000940:	f023 0303 	bic.w	r3, r3, #3
 8000944:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <SetSysClockTo72+0xf8>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <SetSysClockTo72+0xf8>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000952:	bf00      	nop
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SetSysClockTo72+0xf8>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b08      	cmp	r3, #8
 800095e:	d1f9      	bne.n	8000954 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40022000 	.word	0x40022000

08000974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ff44 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800097a:	490c      	ldr	r1, [pc, #48]	; (80009ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000990:	4c09      	ldr	r4, [pc, #36]	; (80009b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f000 ffb7 	bl	8001910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff fbd3 	bl	800014c <main>
  bx lr
 80009a6:	4770      	bx	lr
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009b0:	080019bc 	.word	0x080019bc
  ldr r2, =_sbss
 80009b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009b8:	20000434 	.word	0x20000434

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 80009c8:	490d      	ldr	r1, [pc, #52]	; (8000a00 <Bsp_DelayUS+0x40>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4613      	mov	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <Bsp_DelayUS+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <Bsp_DelayUS+0x40>)
 80009de:	2205      	movs	r2, #5
 80009e0:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 80009e2:	bf00      	nop
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <Bsp_DelayUS+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f9      	beq.n	80009e4 <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <Bsp_DelayUS+0x40>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	while(xms--)
 8000a0c:	e003      	b.n	8000a16 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f7ff ffd5 	bl	80009c0 <Bsp_DelayUS>
	while(xms--)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f6      	bne.n	8000a0e <Bsp_DelayMS+0xa>
	}
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8000a2e:	f000 f873 	bl	8000b18 <Bsp_GPIO_Init>
	//Bsp_SPI_Init();	
	Bsp_I2C_Init();
 8000a32:	f000 f89f 	bl	8000b74 <Bsp_I2C_Init>
    
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <Bsp_I2C_DMA_Init>:

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
}


void Bsp_I2C_DMA_Init(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
    Bsp_I2C_DMA_Ctrl(ENABLE);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 f886 	bl	8000b54 <Bsp_I2C_DMA_Ctrl>
    
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 fee8 	bl	8001820 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel6);
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <Bsp_I2C_DMA_Init+0x8c>)
 8000a52:	f000 f9ef 	bl	8000e34 <DMA_DeInit>

	DMA_InitTypeDef DMA_InitStructure;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&GUI_I2C->DR; 			//DMA 外设 ADC 基地址
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <Bsp_I2C_DMA_Init+0x90>)
 8000a58:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <Bsp_I2C_DMA_Init+0x94>)
 8000a5c:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000a5e:	2310      	movs	r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 128; 							//DMA 通道的 DMA 缓存的大小
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 8000a76:	2320      	movs	r3, #32
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel6, &DMA_InitStructure); //根据指定的参数初始化
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <Bsp_I2C_DMA_Init+0x8c>)
 8000a8a:	f000 fa8f 	bl	8000fac <DMA_Init>

	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = DMA1_Channel6_IRQn;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f965 	bl	8000d70 <NVIC_Init>

	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <Bsp_I2C_DMA_Init+0x8c>)
 8000aaa:	f000 fabd 	bl	8001028 <DMA_Cmd>
	DMA_Cmd(DMA1_Channel6, DISABLE); 
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <Bsp_I2C_DMA_Init+0x8c>)
 8000ab2:	f000 fab9 	bl	8001028 <DMA_Cmd>
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <Bsp_I2C_DMA_Init+0x8c>)
 8000abc:	f000 fad0 	bl	8001060 <DMA_ITConfig>
}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	4002006c 	.word	0x4002006c
 8000acc:	40005410 	.word	0x40005410
 8000ad0:	20000030 	.word	0x20000030

08000ad4 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000ad8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000adc:	f000 fade 	bl	800109c <DMA_GetFlagStatus>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d012      	beq.n	8000b0c <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8000ae6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000aea:	f000 faff 	bl	80010ec <DMA_ClearFlag>
		Bsp_DelayUS(10);
 8000aee:	200a      	movs	r0, #10
 8000af0:	f7ff ff66 	bl	80009c0 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8000af4:	2101      	movs	r1, #1
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <DMA1_Channel6_IRQHandler+0x3c>)
 8000af8:	f000 fd11 	bl	800151e <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8000afc:	2101      	movs	r1, #1
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <DMA1_Channel6_IRQHandler+0x3c>)
 8000b00:	f000 fd2c 	bl	800155c <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <DMA1_Channel6_IRQHandler+0x40>)
 8000b08:	f000 fa8e 	bl	8001028 <DMA_Cmd>
	}
}	
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	4002006c 	.word	0x4002006c

08000b18 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;



void Bsp_GPIO_Init(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f000 fe9c 	bl	800185c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8000b24:	2101      	movs	r1, #1
 8000b26:	2009      	movs	r0, #9
 8000b28:	f000 fe98 	bl	800185c <RCC_APB2PeriphClockCmd>

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
        GPIO_Init(GPIOA,&GPIO_InitStruct_OUT_PP);
      
    #elif defined(GUI_I2C_MODE_SUPPORT)
        GPIO_InitStruct_AF_OD.GPIO_Mode = GPIO_Mode_AF_OD;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <Bsp_GPIO_Init+0x34>)
 8000b2e:	221c      	movs	r2, #28
 8000b30:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_OD.GPIO_Speed = GPIO_Speed_50MHz;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <Bsp_GPIO_Init+0x34>)
 8000b34:	2203      	movs	r2, #3
 8000b36:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_OD.GPIO_Pin = GUI_SCL_PIN | GUI_SDA_PIN ;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <Bsp_GPIO_Init+0x34>)
 8000b3a:	22c0      	movs	r2, #192	; 0xc0
 8000b3c:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);
 8000b3e:	4903      	ldr	r1, [pc, #12]	; (8000b4c <Bsp_GPIO_Init+0x34>)
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <Bsp_GPIO_Init+0x38>)
 8000b42:	f000 faed 	bl	8001120 <GPIO_Init>

    #endif
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000430 	.word	0x20000430
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <Bsp_I2C_DMA_Ctrl>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_DMA_Ctrl(FunctionalState ctrl){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    I2C_DMACmd(GUI_I2C,ctrl);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	4619      	mov	r1, r3
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <Bsp_I2C_DMA_Ctrl+0x1c>)
 8000b64:	f000 fc9d 	bl	80014a2 <I2C_DMACmd>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400

08000b74 <Bsp_I2C_Init>:
*函数名称:'Bsp_I2C_Init' 
*函数功能:'硬件 I2C 初始化' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_Init(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

    if (GUI_I2C == I2C1){
        RCC_APB1PeriphClockCmd(RCC_APB1ENR_I2C1EN , ENABLE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b80:	f000 fe8a 	bl	8001898 <RCC_APB1PeriphClockCmd>
    }
    else{
        RCC_APB2PeriphClockCmd(RCC_APB1ENR_I2C2EN , ENABLE);
    }

    I2C_DeInit(GUI_I2C);
 8000b84:	481b      	ldr	r0, [pc, #108]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000b86:	f000 fb87 	bl	8001298 <I2C_DeInit>

    GUI_I2C->CR1 |= 0x8000;  // 手动清除清BUSY 避免出现硬件错误
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	8013      	strh	r3, [r2, #0]
	GUI_I2C->CR1 &= ~0x8000;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000ba6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	8013      	strh	r3, [r2, #0]
    
    I2C_InitTypeDef I2C_InitStruct;
    //cutome mode : common mode
    I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	817b      	strh	r3, [r7, #10]
    // I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
    // I2C_InitStruct.I2C_OwnAddress1 = 0x30;
    // I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    // I2C_InitStruct.I2C_ClockSpeed = 400000;

    I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	817b      	strh	r3, [r7, #10]
    I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	80bb      	strh	r3, [r7, #4]
    I2C_InitStruct.I2C_DutyCycle = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	80fb      	strh	r3, [r7, #6]
    I2C_InitStruct.I2C_OwnAddress1 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	813b      	strh	r3, [r7, #8]
    I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bca:	81bb      	strh	r3, [r7, #12]
    I2C_InitStruct.I2C_ClockSpeed = 10000;
 8000bcc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bd0:	603b      	str	r3, [r7, #0]
    I2C_Cmd(GUI_I2C,ENABLE);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000bd6:	f000 fc45 	bl	8001464 <I2C_Cmd>
    I2C_Init(GUI_I2C,&I2C_InitStruct);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <Bsp_I2C_Init+0x80>)
 8000be0:	f000 fb7e 	bl	80012e0 <I2C_Init>

    
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 	
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 fe1a 	bl	8001820 <RCC_AHBPeriphClockCmd>
	// NVIC_Init(&NVIC_InitStructure);  //初始化NVIC寄存器

    // DMA_ITConfig(DMA1_Channel6, DMA_IT_TC, ENABLE);	
    // DMA_Cmd(DMA1_Channel6,ENABLE);
    
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40005400 	.word	0x40005400

08000bf8 <I2C_Write_DATA>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_DATA(const uint8_t dat){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    // int error =0;
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)){
 8000c02:	bf00      	nop
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <I2C_Write_DATA+0x2c>)
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <I2C_Write_DATA+0x30>)
 8000c08:	f000 fcf3 	bl	80015f2 <I2C_CheckEvent>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <I2C_Write_DATA+0xc>
        //ERROR_DECT(*OVER_NUM ,"const char *WARNING");
        //return;    
    };
    
    I2C_SendData(GUI_I2C,dat);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <I2C_Write_DATA+0x30>)
 8000c18:	f000 fcbf 	bl	800159a <I2C_SendData>

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	00070080 	.word	0x00070080
 8000c28:	40005400 	.word	0x40005400

08000c2c <I2C_Write_Ins>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_Ins(const uint8_t Ins){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
    // int error =0;
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)){
 8000c36:	bf00      	nop
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <I2C_Write_Ins+0x2c>)
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <I2C_Write_Ins+0x30>)
 8000c3c:	f000 fcd9 	bl	80015f2 <I2C_CheckEvent>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f8      	beq.n	8000c38 <I2C_Write_Ins+0xc>
        //     printf("\r\n I2C 写 指令 超时 \r\n");
        //     return ;
        // }        
    };
    
    I2C_SendData(GUI_I2C,Ins);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <I2C_Write_Ins+0x30>)
 8000c4c:	f000 fca5 	bl	800159a <I2C_SendData>

}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	00070080 	.word	0x00070080
 8000c5c:	40005400 	.word	0x40005400

08000c60 <I2C_Write_Addr>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_Addr(const uint8_t addr){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
//    uint16_t error =0;
   while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_MODE_SELECT)){}
 8000c6a:	bf00      	nop
 8000c6c:	4908      	ldr	r1, [pc, #32]	; (8000c90 <I2C_Write_Addr+0x30>)
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <I2C_Write_Addr+0x34>)
 8000c70:	f000 fcbf 	bl	80015f2 <I2C_CheckEvent>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f8      	beq.n	8000c6c <I2C_Write_Addr+0xc>
   I2C_Send7bitAddress(GUI_I2C,addr,I2C_Direction_Transmitter);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <I2C_Write_Addr+0x34>)
 8000c82:	f000 fc99 	bl	80015b8 <I2C_Send7bitAddress>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	00030001 	.word	0x00030001
 8000c94:	40005400 	.word	0x40005400

08000c98 <I2C_START>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_START(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    while (I2C_GetFlagStatus(GUI_I2C, I2C_FLAG_BUSY)){};
 8000c9c:	bf00      	nop
 8000c9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <I2C_START+0x24>)
 8000ca4:	f000 fcd4 	bl	8001650 <I2C_GetFlagStatus>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f7      	bne.n	8000c9e <I2C_START+0x6>
    
	I2C_GenerateSTART(GUI_I2C,ENABLE);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <I2C_START+0x24>)
 8000cb2:	f000 fc15 	bl	80014e0 <I2C_GenerateSTART>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40005400 	.word	0x40005400

08000cc0 <I2C_STOP>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_STOP(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    while(!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){};
 8000cc4:	bf00      	nop
 8000cc6:	4906      	ldr	r1, [pc, #24]	; (8000ce0 <I2C_STOP+0x20>)
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <I2C_STOP+0x24>)
 8000cca:	f000 fc92 	bl	80015f2 <I2C_CheckEvent>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f8      	beq.n	8000cc6 <I2C_STOP+0x6>
	
    I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <I2C_STOP+0x24>)
 8000cd8:	f000 fc21 	bl	800151e <I2C_GenerateSTOP>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	00070084 	.word	0x00070084
 8000ce4:	40005400 	.word	0x40005400

08000ce8 <Bsp_I2C_SET>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_SET(const uint8_t CMD){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	I2C_START();
 8000cf2:	f7ff ffd1 	bl	8000c98 <I2C_START>

	I2C_Write_Addr(OLED_ADDRESS);
 8000cf6:	2078      	movs	r0, #120	; 0x78
 8000cf8:	f7ff ffb2 	bl	8000c60 <I2C_Write_Addr>
    I2C_Write_Ins(OLED_SSD1306_SEND_CMD);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ff95 	bl	8000c2c <I2C_Write_Ins>
    I2C_Write_DATA(CMD);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff77 	bl	8000bf8 <I2C_Write_DATA>

	I2C_STOP();
 8000d0a:	f7ff ffd9 	bl	8000cc0 <I2C_STOP>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Bsp_I2C_Write_Bytes>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_Write_Bytes(const uint8_t *dat,uint8_t count){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
    //Bsp_I2C_DMA_Ctrl(ENABLE);

    I2C_START();
 8000d24:	f7ff ffb8 	bl	8000c98 <I2C_START>
	I2C_Write_Addr(OLED_ADDRESS);
 8000d28:	2078      	movs	r0, #120	; 0x78
 8000d2a:	f7ff ff99 	bl	8000c60 <I2C_Write_Addr>
    I2C_Write_Ins(OLED_SSD1306_SEND_DATA);
 8000d2e:	2040      	movs	r0, #64	; 0x40
 8000d30:	f7ff ff7c 	bl	8000c2c <I2C_Write_Ins>
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8000d34:	e003      	b.n	8000d3e <Bsp_I2C_Write_Bytes+0x26>
    DMA_Cmd(DMA1_Channel6,DISABLE);
 8000d36:	2100      	movs	r1, #0
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <Bsp_I2C_Write_Bytes+0x4c>)
 8000d3a:	f000 f975 	bl	8001028 <DMA_Cmd>
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8000d3e:	490a      	ldr	r1, [pc, #40]	; (8000d68 <Bsp_I2C_Write_Bytes+0x50>)
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <Bsp_I2C_Write_Bytes+0x54>)
 8000d42:	f000 fc56 	bl	80015f2 <I2C_CheckEvent>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f4      	beq.n	8000d36 <Bsp_I2C_Write_Bytes+0x1e>
    //DMA_SetCurrDataCounter(DMA1_Channel6, 1024);
    DMA1_Channel6->CMAR = (uint32_t)dat;
 8000d4c:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <Bsp_I2C_Write_Bytes+0x4c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60d3      	str	r3, [r2, #12]
    DMA_Cmd(DMA1_Channel6,ENABLE);
 8000d52:	2101      	movs	r1, #1
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <Bsp_I2C_Write_Bytes+0x4c>)
 8000d56:	f000 f967 	bl	8001028 <DMA_Cmd>
        
    //     I2C_Write_DATA(dat[i]);
    //     //Bsp_printf("\r\n %d \r\n",DMA_GetCurrDataCounter(DMA1_Channel6));
    // }
	//I2C_STOP();
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	4002006c 	.word	0x4002006c
 8000d68:	00070080 	.word	0x00070080
 8000d6c:	40005400 	.word	0x40005400

08000d70 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	78db      	ldrb	r3, [r3, #3]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d03a      	beq.n	8000e02 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <NVIC_Init+0xbc>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f1c3 0304 	rsb	r3, r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	461a      	mov	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	789b      	ldrb	r3, [r3, #2]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <NVIC_Init+0xc0>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	6979      	ldr	r1, [r7, #20]
 8000dd8:	b2c9      	uxtb	r1, r1
 8000dda:	4413      	add	r3, r2
 8000ddc:	460a      	mov	r2, r1
 8000dde:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dea:	4911      	ldr	r1, [pc, #68]	; (8000e30 <NVIC_Init+0xc0>)
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	0952      	lsrs	r2, r2, #5
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000df6:	2201      	movs	r2, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dfc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e00:	e00f      	b.n	8000e22 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e0a:	4909      	ldr	r1, [pc, #36]	; (8000e30 <NVIC_Init+0xc0>)
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	0952      	lsrs	r2, r2, #5
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e16:	2201      	movs	r2, #1
 8000e18:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e1a:	f100 0320 	add.w	r3, r0, #32
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e44:	4013      	ands	r3, r2
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <DMA_DeInit+0x140>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <DMA_DeInit+0x144>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <DMA_DeInit+0x144>)
 8000e70:	f043 030f 	orr.w	r3, r3, #15
 8000e74:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000e76:	e077      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <DMA_DeInit+0x148>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <DMA_DeInit+0x144>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <DMA_DeInit+0x144>)
 8000e86:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000e8a:	6053      	str	r3, [r2, #4]
}
 8000e8c:	e06c      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <DMA_DeInit+0x14c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <DMA_DeInit+0x144>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a37      	ldr	r2, [pc, #220]	; (8000f78 <DMA_DeInit+0x144>)
 8000e9c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ea0:	6053      	str	r3, [r2, #4]
}
 8000ea2:	e061      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a37      	ldr	r2, [pc, #220]	; (8000f84 <DMA_DeInit+0x150>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <DMA_DeInit+0x144>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <DMA_DeInit+0x144>)
 8000eb2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000eb6:	6053      	str	r3, [r2, #4]
}
 8000eb8:	e056      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <DMA_DeInit+0x154>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <DMA_DeInit+0x144>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <DMA_DeInit+0x144>)
 8000ec8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ecc:	6053      	str	r3, [r2, #4]
}
 8000ece:	e04b      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a2e      	ldr	r2, [pc, #184]	; (8000f8c <DMA_DeInit+0x158>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <DMA_DeInit+0x144>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <DMA_DeInit+0x144>)
 8000ede:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee2:	6053      	str	r3, [r2, #4]
}
 8000ee4:	e040      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <DMA_DeInit+0x15c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <DMA_DeInit+0x144>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <DMA_DeInit+0x144>)
 8000ef4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ef8:	6053      	str	r3, [r2, #4]
}
 8000efa:	e035      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <DMA_DeInit+0x160>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <DMA_DeInit+0x164>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <DMA_DeInit+0x164>)
 8000f0a:	f043 030f 	orr.w	r3, r3, #15
 8000f0e:	6053      	str	r3, [r2, #4]
}
 8000f10:	e02a      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <DMA_DeInit+0x168>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <DMA_DeInit+0x164>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <DMA_DeInit+0x164>)
 8000f20:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f24:	6053      	str	r3, [r2, #4]
}
 8000f26:	e01f      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <DMA_DeInit+0x16c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <DMA_DeInit+0x164>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <DMA_DeInit+0x164>)
 8000f36:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000f3a:	6053      	str	r3, [r2, #4]
}
 8000f3c:	e014      	b.n	8000f68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <DMA_DeInit+0x170>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <DMA_DeInit+0x164>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <DMA_DeInit+0x164>)
 8000f4c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000f50:	6053      	str	r3, [r2, #4]
}
 8000f52:	e009      	b.n	8000f68 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <DMA_DeInit+0x174>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d105      	bne.n	8000f68 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <DMA_DeInit+0x164>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <DMA_DeInit+0x164>)
 8000f62:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000f66:	6053      	str	r3, [r2, #4]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40020008 	.word	0x40020008
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	4002001c 	.word	0x4002001c
 8000f80:	40020030 	.word	0x40020030
 8000f84:	40020044 	.word	0x40020044
 8000f88:	40020058 	.word	0x40020058
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	40020080 	.word	0x40020080
 8000f94:	40020408 	.word	0x40020408
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	4002041c 	.word	0x4002041c
 8000fa0:	40020430 	.word	0x40020430
 8000fa4:	40020444 	.word	0x40020444
 8000fa8:	40020458 	.word	0x40020458

08000fac <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000fda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000fe6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ff2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60da      	str	r2, [r3, #12]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001046:	e006      	b.n	8001056 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001050:	4013      	ands	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001080:	e006      	b.n	8001090 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <DMA_GetFlagStatus+0x48>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e002      	b.n	80010c4 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <DMA_GetFlagStatus+0x4c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e001      	b.n	80010d8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020000 	.word	0x40020000

080010ec <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <DMA_ClearFlag+0x2c>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8001104:	e002      	b.n	800110c <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <DMA_ClearFlag+0x30>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6053      	str	r3, [r2, #4]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40020400 	.word	0x40020400
 800111c:	40020000 	.word	0x40020000

08001120 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	789b      	ldrb	r3, [r3, #2]
 800115c:	461a      	mov	r2, r3
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4313      	orrs	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	e038      	b.n	80011ec <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800117a:	2201      	movs	r2, #1
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d126      	bne.n	80011e6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800119e:	220f      	movs	r2, #15
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4013      	ands	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	2b28      	cmp	r3, #40	; 0x28
 80011c6:	d105      	bne.n	80011d4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80011c8:	2201      	movs	r2, #1
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	409a      	lsls	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	e008      	b.n	80011e6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	2b48      	cmp	r3, #72	; 0x48
 80011da:	d104      	bne.n	80011e6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011dc:	2201      	movs	r2, #1
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	409a      	lsls	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d9c3      	bls.n	800117a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	2bff      	cmp	r3, #255	; 0xff
 80011fe:	d946      	bls.n	800128e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	e03a      	b.n	8001282 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	3308      	adds	r3, #8
 8001210:	2201      	movs	r2, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d127      	bne.n	800127c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001232:	220f      	movs	r2, #15
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	43db      	mvns	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4013      	ands	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	78db      	ldrb	r3, [r3, #3]
 8001258:	2b28      	cmp	r3, #40	; 0x28
 800125a:	d105      	bne.n	8001268 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	3308      	adds	r3, #8
 8001260:	2201      	movs	r2, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	78db      	ldrb	r3, [r3, #3]
 800126c:	2b48      	cmp	r3, #72	; 0x48
 800126e:	d105      	bne.n	800127c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	3308      	adds	r3, #8
 8001274:	2201      	movs	r2, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	3301      	adds	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b07      	cmp	r3, #7
 8001286:	d9c1      	bls.n	800120c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	605a      	str	r2, [r3, #4]
  }
}
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <I2C_DeInit+0x44>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10a      	bne.n	80012be <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80012a8:	2101      	movs	r1, #1
 80012aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012ae:	f000 fb11 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80012b2:	2100      	movs	r1, #0
 80012b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012b8:	f000 fb0c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 80012bc:	e009      	b.n	80012d2 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80012be:	2101      	movs	r1, #1
 80012c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80012c4:	f000 fb06 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80012c8:	2100      	movs	r1, #0
 80012ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80012ce:	f000 fb01 	bl	80018d4 <RCC_APB1PeriphResetCmd>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40005400 	.word	0x40005400

080012e0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012ee:	2300      	movs	r3, #0
 80012f0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80012f2:	2304      	movs	r3, #4
 80012f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80012f6:	4b57      	ldr	r3, [pc, #348]	; (8001454 <I2C_Init+0x174>)
 80012f8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8001300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001302:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001306:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f9d1 	bl	80016b4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <I2C_Init+0x178>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001322:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001326:	4313      	orrs	r3, r2
 8001328:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800132e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a44      	ldr	r2, [pc, #272]	; (800145c <I2C_Init+0x17c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d815      	bhi.n	800137a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800135c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800135e:	2b03      	cmp	r3, #3
 8001360:	d801      	bhi.n	8001366 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001362:	2304      	movs	r3, #4
 8001364:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001366:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800136a:	4313      	orrs	r3, r2
 800136c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800136e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001370:	3301      	adds	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	841a      	strh	r2, [r3, #32]
 8001378:	e040      	b.n	80013fc <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	88db      	ldrh	r3, [r3, #6]
 800137e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001382:	4293      	cmp	r3, r2
 8001384:	d109      	bne.n	800139a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001398:	e00e      	b.n	80013b8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80013b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80013b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80013ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013da:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80013dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <I2C_Init+0x180>)
 80013e8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ec:	1192      	asrs	r2, r2, #6
 80013ee:	17db      	asrs	r3, r3, #31
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001400:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800141a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800141e:	f023 0302 	bic.w	r3, r3, #2
 8001422:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	889a      	ldrh	r2, [r3, #4]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	895b      	ldrh	r3, [r3, #10]
 800142c:	4313      	orrs	r3, r2
 800142e:	b29a      	uxth	r2, r3
 8001430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001432:	4313      	orrs	r3, r2
 8001434:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800143a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	899a      	ldrh	r2, [r3, #12]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	4313      	orrs	r3, r2
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	811a      	strh	r2, [r3, #8]
}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	007a1200 	.word	0x007a1200
 8001458:	431bde83 	.word	0x431bde83
 800145c:	000186a0 	.word	0x000186a0
 8001460:	10624dd3 	.word	0x10624dd3

08001464 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8001486:	e007      	b.n	8001498 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	801a      	strh	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	889b      	ldrh	r3, [r3, #4]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
  }
}
 80014c4:	e007      	b.n	80014d6 <I2C_DMACmd+0x34>
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	809a      	strh	r2, [r3, #4]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8001502:	e007      	b.n	8001514 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	801a      	strh	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8001540:	e007      	b.n	8001552 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	801a      	strh	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 800157e:	e007      	b.n	8001590 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	801a      	strh	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	821a      	strh	r2, [r3, #16]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	70fb      	strb	r3, [r7, #3]
 80015d6:	e003      	b.n	80015e0 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	821a      	strh	r2, [r3, #16]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	8a9b      	ldrh	r3, [r3, #20]
 8001610:	b29b      	uxth	r3, r3
 8001612:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	8b1b      	ldrh	r3, [r3, #24]
 8001618:	b29b      	uxth	r3, r3
 800161a:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
 8001628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800162c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4013      	ands	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d102      	bne.n	8001640 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	e001      	b.n	8001644 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001644:	7dfb      	ldrb	r3, [r7, #23]
}
 8001646:	4618      	mov	r0, r3
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	0f1b      	lsrs	r3, r3, #28
 800166e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001676:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3314      	adds	r3, #20
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e005      	b.n	8001692 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3318      	adds	r3, #24
 8001690:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
 80016a2:	e001      	b.n	80016a8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <RCC_GetClocksFreq+0x158>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d011      	beq.n	8001700 <RCC_GetClocksFreq+0x4c>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d83a      	bhi.n	8001758 <RCC_GetClocksFreq+0xa4>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <RCC_GetClocksFreq+0x3c>
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d004      	beq.n	80016f8 <RCC_GetClocksFreq+0x44>
 80016ee:	e033      	b.n	8001758 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <RCC_GetClocksFreq+0x15c>)
 80016f4:	601a      	str	r2, [r3, #0]
      break;
 80016f6:	e033      	b.n	8001760 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a45      	ldr	r2, [pc, #276]	; (8001810 <RCC_GetClocksFreq+0x15c>)
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e02f      	b.n	8001760 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001700:	4b42      	ldr	r3, [pc, #264]	; (800180c <RCC_GetClocksFreq+0x158>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001708:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <RCC_GetClocksFreq+0x158>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	0c9b      	lsrs	r3, r3, #18
 8001718:	3302      	adds	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <RCC_GetClocksFreq+0x160>)
 8001726:	fb03 f202 	mul.w	r2, r3, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800172e:	e017      	b.n	8001760 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <RCC_GetClocksFreq+0x158>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4a35      	ldr	r2, [pc, #212]	; (8001814 <RCC_GetClocksFreq+0x160>)
 8001740:	fb03 f202 	mul.w	r2, r3, r2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
      break;
 8001748:	e00a      	b.n	8001760 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4a30      	ldr	r2, [pc, #192]	; (8001810 <RCC_GetClocksFreq+0x15c>)
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
      break;
 8001756:	e003      	b.n	8001760 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <RCC_GetClocksFreq+0x15c>)
 800175c:	601a      	str	r2, [r3, #0]
      break;
 800175e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <RCC_GetClocksFreq+0x158>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001768:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <RCC_GetClocksFreq+0x164>)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	40da      	lsrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <RCC_GetClocksFreq+0x158>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001790:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <RCC_GetClocksFreq+0x164>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	40da      	lsrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <RCC_GetClocksFreq+0x158>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017b8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	0adb      	lsrs	r3, r3, #11
 80017be:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <RCC_GetClocksFreq+0x164>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <RCC_GetClocksFreq+0x158>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0b9b      	lsrs	r3, r3, #14
 80017e6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <RCC_GetClocksFreq+0x168>)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	611a      	str	r2, [r3, #16]
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	003d0900 	.word	0x003d0900
 8001818:	20000000 	.word	0x20000000
 800181c:	20000010 	.word	0x20000010

08001820 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <RCC_AHBPeriphClockCmd+0x38>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <RCC_AHBPeriphClockCmd+0x38>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800183e:	e006      	b.n	800184e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <RCC_AHBPeriphClockCmd+0x38>)
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	43db      	mvns	r3, r3
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <RCC_AHBPeriphClockCmd+0x38>)
 800184a:	4013      	ands	r3, r2
 800184c:	614b      	str	r3, [r1, #20]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <RCC_APB2PeriphClockCmd+0x38>)
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <RCC_APB2PeriphClockCmd+0x38>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4313      	orrs	r3, r2
 8001878:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800187a:	e006      	b.n	800188a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <RCC_APB2PeriphClockCmd+0x38>)
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	43db      	mvns	r3, r3
 8001884:	4903      	ldr	r1, [pc, #12]	; (8001894 <RCC_APB2PeriphClockCmd+0x38>)
 8001886:	4013      	ands	r3, r2
 8001888:	618b      	str	r3, [r1, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000

08001898 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <RCC_APB1PeriphClockCmd+0x38>)
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <RCC_APB1PeriphClockCmd+0x38>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80018b6:	e006      	b.n	80018c6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <RCC_APB1PeriphClockCmd+0x38>)
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4903      	ldr	r1, [pc, #12]	; (80018d0 <RCC_APB1PeriphClockCmd+0x38>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	61cb      	str	r3, [r1, #28]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <RCC_APB1PeriphResetCmd+0x38>)
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <RCC_APB1PeriphResetCmd+0x38>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80018f2:	e006      	b.n	8001902 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <RCC_APB1PeriphResetCmd+0x38>)
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <RCC_APB1PeriphResetCmd+0x38>)
 80018fe:	4013      	ands	r3, r2
 8001900:	610b      	str	r3, [r1, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000

08001910 <__libc_init_array>:
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	2600      	movs	r6, #0
 8001914:	4d0c      	ldr	r5, [pc, #48]	; (8001948 <__libc_init_array+0x38>)
 8001916:	4c0d      	ldr	r4, [pc, #52]	; (800194c <__libc_init_array+0x3c>)
 8001918:	1b64      	subs	r4, r4, r5
 800191a:	10a4      	asrs	r4, r4, #2
 800191c:	42a6      	cmp	r6, r4
 800191e:	d109      	bne.n	8001934 <__libc_init_array+0x24>
 8001920:	f000 f81a 	bl	8001958 <_init>
 8001924:	2600      	movs	r6, #0
 8001926:	4d0a      	ldr	r5, [pc, #40]	; (8001950 <__libc_init_array+0x40>)
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <__libc_init_array+0x44>)
 800192a:	1b64      	subs	r4, r4, r5
 800192c:	10a4      	asrs	r4, r4, #2
 800192e:	42a6      	cmp	r6, r4
 8001930:	d105      	bne.n	800193e <__libc_init_array+0x2e>
 8001932:	bd70      	pop	{r4, r5, r6, pc}
 8001934:	f855 3b04 	ldr.w	r3, [r5], #4
 8001938:	4798      	blx	r3
 800193a:	3601      	adds	r6, #1
 800193c:	e7ee      	b.n	800191c <__libc_init_array+0xc>
 800193e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001942:	4798      	blx	r3
 8001944:	3601      	adds	r6, #1
 8001946:	e7f2      	b.n	800192e <__libc_init_array+0x1e>
 8001948:	080019b4 	.word	0x080019b4
 800194c:	080019b4 	.word	0x080019b4
 8001950:	080019b4 	.word	0x080019b4
 8001954:	080019b8 	.word	0x080019b8

08001958 <_init>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	bf00      	nop
 800195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195e:	bc08      	pop	{r3}
 8001960:	469e      	mov	lr, r3
 8001962:	4770      	bx	lr

08001964 <_fini>:
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	bf00      	nop
 8001968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196a:	bc08      	pop	{r3}
 800196c:	469e      	mov	lr, r3
 800196e:	4770      	bx	lr
