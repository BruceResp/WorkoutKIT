
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08001248 	.word	0x08001248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08001248 	.word	0x08001248

0800014c <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000150:	f000 fb25 	bl	800079e <Bsp_Init>
	//GUI_Init();
 	GUI_SPI_Init(); //初始化函数
 8000154:	f000 f854 	bl	8000200 <GUI_SPI_Init>
	// u8 page_Y = 50;
	//GUI_Test();
	while (1)
	{
		//GUI_CLEAR_SCREEN();
		Key_Process();
 8000158:	f000 f910 	bl	800037c <Key_Process>
 800015c:	e7fc      	b.n	8000158 <main+0xc>

0800015e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800016e:	e7fe      	b.n	800016e <HardFault_Handler+0x4>

08000170 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000174:	e7fe      	b.n	8000174 <MemManage_Handler+0x4>

08000176 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800017a:	e7fe      	b.n	800017a <BusFault_Handler+0x4>

0800017c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000180:	e7fe      	b.n	8000180 <UsageFault_Handler+0x4>

08000182 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
}
 8000192:	bf00      	nop
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800019a:	b480      	push	{r7}
 800019c:	af00      	add	r7, sp, #0
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr

080001a6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80001a6:	b480      	push	{r7}
 80001a8:	af00      	add	r7, sp, #0
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
	...

080001b4 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	71bb      	strb	r3, [r7, #6]
 80001be:	e013      	b.n	80001e8 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 80001c0:	2300      	movs	r3, #0
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	e00a      	b.n	80001dc <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 80001c6:	79ba      	ldrb	r2, [r7, #6]
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	490c      	ldr	r1, [pc, #48]	; (80001fc <GUI_CLEAR_SCREEN+0x48>)
 80001cc:	01d2      	lsls	r2, r2, #7
 80001ce:	440a      	add	r2, r1
 80001d0:	4413      	add	r3, r2
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	3301      	adds	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	2b80      	cmp	r3, #128	; 0x80
 80001e0:	d9f1      	bls.n	80001c6 <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	3301      	adds	r3, #1
 80001e6:	71bb      	strb	r3, [r7, #6]
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	2b07      	cmp	r3, #7
 80001ec:	d9e8      	bls.n	80001c0 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000024 	.word	0x20000024

08000200 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	Bsp_DelayMS(10); //1000
 8000204:	200a      	movs	r0, #10
 8000206:	f000 fab7 	bl	8000778 <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 800020a:	f000 fc1f 	bl	8000a4c <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(10);  //100
 800020e:	200a      	movs	r0, #10
 8000210:	f000 fab2 	bl	8000778 <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 8000214:	f000 fc24 	bl	8000a60 <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 8000218:	20ae      	movs	r0, #174	; 0xae
 800021a:	f000 fbe5 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 800021e:	20d5      	movs	r0, #213	; 0xd5
 8000220:	f000 fbe2 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x80);//[3:0],分频因子;[7:4],震荡频率
 8000224:	2080      	movs	r0, #128	; 0x80
 8000226:	f000 fbdf 	bl	80009e8 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0x81);//设置对比度
 800022a:	2081      	movs	r0, #129	; 0x81
 800022c:	f000 fbdc 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 8000230:	207f      	movs	r0, #127	; 0x7f
 8000232:	f000 fbd9 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 8000236:	208d      	movs	r0, #141	; 0x8d
 8000238:	f000 fbd6 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 800023c:	2014      	movs	r0, #20
 800023e:	f000 fbd3 	bl	80009e8 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 8000242:	2020      	movs	r0, #32
 8000244:	f000 fbd0 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fbcd 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 800024e:	2021      	movs	r0, #33	; 0x21
 8000250:	f000 fbca 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fbc7 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 800025a:	207f      	movs	r0, #127	; 0x7f
 800025c:	f000 fbc4 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 8000260:	2022      	movs	r0, #34	; 0x22
 8000262:	f000 fbc1 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000266:	2000      	movs	r0, #0
 8000268:	f000 fbbe 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 800026c:	2007      	movs	r0, #7
 800026e:	f000 fbbb 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 8000272:	20c9      	movs	r0, #201	; 0xc9
 8000274:	f000 fbb8 	bl	80009e8 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 8000278:	20a1      	movs	r0, #161	; 0xa1
 800027a:	f000 fbb5 	bl	80009e8 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 800027e:	20a4      	movs	r0, #164	; 0xa4
 8000280:	f000 fbb2 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 8000284:	20a6      	movs	r0, #166	; 0xa6
 8000286:	f000 fbaf 	bl	80009e8 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 800028a:	20af      	movs	r0, #175	; 0xaf
 800028c:	f000 fbac 	bl	80009e8 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 8000290:	2056      	movs	r0, #86	; 0x56
 8000292:	f000 fba9 	bl	80009e8 <Bsp_SPI_Send_CMD>
   Bsp_SPI_DMA_Init();//DMA初始化
 8000296:	f000 fa8b 	bl	80007b0 <Bsp_SPI_DMA_Init>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <GUI_SPI_Display_Char_ASCII>:
*函数功能:'GUI 显示 字符 ASCII格式' 
*参    数:''  
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Display_Char_ASCII(u8 Y,u8 X,char* ascii,u8 size)
{
 80002a0:	b490      	push	{r4, r7}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	603a      	str	r2, [r7, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	460b      	mov	r3, r1
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	4613      	mov	r3, r2
 80002b4:	717b      	strb	r3, [r7, #5]
	u8 i=0,j=0,c=*ascii;
 80002b6:	2300      	movs	r3, #0
 80002b8:	73fb      	strb	r3, [r7, #15]
 80002ba:	2300      	movs	r3, #0
 80002bc:	73bb      	strb	r3, [r7, #14]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	737b      	strb	r3, [r7, #13]
	if (size==S6X8)
 80002c4:	797b      	ldrb	r3, [r7, #5]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d11f      	bne.n	800030a <GUI_SPI_Display_Char_ASCII+0x6a>
	{
		for (i=0;i<6;i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e018      	b.n	8000302 <GUI_SPI_Display_Char_ASCII+0x62>
		{
			GUI_DISPLAY_BUF[Y][X+i]=F6X8[(c-32)*6+1+i];
 80002d0:	7b7b      	ldrb	r3, [r7, #13]
 80002d2:	f1a3 0220 	sub.w	r2, r3, #32
 80002d6:	4613      	mov	r3, r2
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	4413      	add	r3, r2
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	18d1      	adds	r1, r2, r3
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	79b8      	ldrb	r0, [r7, #6]
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	4403      	add	r3, r0
 80002ec:	4820      	ldr	r0, [pc, #128]	; (8000370 <GUI_SPI_Display_Char_ASCII+0xd0>)
 80002ee:	5c40      	ldrb	r0, [r0, r1]
 80002f0:	4920      	ldr	r1, [pc, #128]	; (8000374 <GUI_SPI_Display_Char_ASCII+0xd4>)
 80002f2:	01d2      	lsls	r2, r2, #7
 80002f4:	440a      	add	r2, r1
 80002f6:	4413      	add	r3, r2
 80002f8:	4602      	mov	r2, r0
 80002fa:	701a      	strb	r2, [r3, #0]
		for (i=0;i<6;i++)
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	3301      	adds	r3, #1
 8000300:	73fb      	strb	r3, [r7, #15]
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d9e3      	bls.n	80002d0 <GUI_SPI_Display_Char_ASCII+0x30>
			}
		}
	}


}
 8000308:	e02d      	b.n	8000366 <GUI_SPI_Display_Char_ASCII+0xc6>
	else if(size==S8X16)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12a      	bne.n	8000366 <GUI_SPI_Display_Char_ASCII+0xc6>
		for (j=0;j<2;j++)
 8000310:	2300      	movs	r3, #0
 8000312:	73bb      	strb	r3, [r7, #14]
 8000314:	e024      	b.n	8000360 <GUI_SPI_Display_Char_ASCII+0xc0>
			for (i=0;i<8;i++)
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e01b      	b.n	8000354 <GUI_SPI_Display_Char_ASCII+0xb4>
				GUI_DISPLAY_BUF[Y+j][X+i]=OLED_F8x16[(c-32)*8+1+i][j*8];
 800031c:	7b7b      	ldrb	r3, [r7, #13]
 800031e:	3b20      	subs	r3, #32
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	7bfb      	ldrb	r3, [r7, #15]
 8000326:	18d0      	adds	r0, r2, r3
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	00d9      	lsls	r1, r3, #3
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	441a      	add	r2, r3
 8000332:	79bc      	ldrb	r4, [r7, #6]
 8000334:	7bfb      	ldrb	r3, [r7, #15]
 8000336:	4423      	add	r3, r4
 8000338:	4c0f      	ldr	r4, [pc, #60]	; (8000378 <GUI_SPI_Display_Char_ASCII+0xd8>)
 800033a:	0100      	lsls	r0, r0, #4
 800033c:	4420      	add	r0, r4
 800033e:	4401      	add	r1, r0
 8000340:	7808      	ldrb	r0, [r1, #0]
 8000342:	490c      	ldr	r1, [pc, #48]	; (8000374 <GUI_SPI_Display_Char_ASCII+0xd4>)
 8000344:	01d2      	lsls	r2, r2, #7
 8000346:	440a      	add	r2, r1
 8000348:	4413      	add	r3, r2
 800034a:	4602      	mov	r2, r0
 800034c:	701a      	strb	r2, [r3, #0]
			for (i=0;i<8;i++)
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	3301      	adds	r3, #1
 8000352:	73fb      	strb	r3, [r7, #15]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d9e0      	bls.n	800031c <GUI_SPI_Display_Char_ASCII+0x7c>
		for (j=0;j<2;j++)
 800035a:	7bbb      	ldrb	r3, [r7, #14]
 800035c:	3301      	adds	r3, #1
 800035e:	73bb      	strb	r3, [r7, #14]
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d9d7      	bls.n	8000316 <GUI_SPI_Display_Char_ASCII+0x76>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bc90      	pop	{r4, r7}
 800036e:	4770      	bx	lr
 8000370:	0800127c 	.word	0x0800127c
 8000374:	20000024 	.word	0x20000024
 8000378:	080014a4 	.word	0x080014a4

0800037c <Key_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Process(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
    u8 i = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	71fb      	strb	r3, [r7, #7]
    u8 key_mask = 1;
 8000386:	2301      	movs	r3, #1
 8000388:	71bb      	strb	r3, [r7, #6]
    
    for ( i = 0; i < KEYS_NUM; i++)
 800038a:	2300      	movs	r3, #0
 800038c:	71fb      	strb	r3, [r7, #7]
 800038e:	e040      	b.n	8000412 <Key_Process+0x96>
    {
        /***              去抖           ***/
        if (Bsp_KEY_Probe(i))
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 faaa 	bl	80008ec <Bsp_KEY_Probe>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d017      	beq.n	80003ce <Key_Process+0x52>
        {
            if (Key[i].Tmr1ms <= KEY_DEBOUNCE_TIME)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a6b      	ldr	r2, [pc, #428]	; (8000550 <Key_Process+0x1d4>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	2b14      	cmp	r3, #20
 80003a6:	d82e      	bhi.n	8000406 <Key_Process+0x8a>
            {
                if ( ++Key[i].Tmr1ms > KEY_DEBOUNCE_TIME)
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a69      	ldr	r2, [pc, #420]	; (8000550 <Key_Process+0x1d4>)
 80003ac:	5cd2      	ldrb	r2, [r2, r3]
 80003ae:	3201      	adds	r2, #1
 80003b0:	b2d1      	uxtb	r1, r2
 80003b2:	4a67      	ldr	r2, [pc, #412]	; (8000550 <Key_Process+0x1d4>)
 80003b4:	54d1      	strb	r1, [r2, r3]
 80003b6:	4a66      	ldr	r2, [pc, #408]	; (8000550 <Key_Process+0x1d4>)
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
 80003ba:	2b14      	cmp	r3, #20
 80003bc:	d923      	bls.n	8000406 <Key_Process+0x8a>
                {
                    KeyCtrl.cache |= key_mask ;
 80003be:	4b65      	ldr	r3, [pc, #404]	; (8000554 <Key_Process+0x1d8>)
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b62      	ldr	r3, [pc, #392]	; (8000554 <Key_Process+0x1d8>)
 80003ca:	701a      	strb	r2, [r3, #0]
 80003cc:	e01b      	b.n	8000406 <Key_Process+0x8a>
                }
            }
        }else{
            if (Key[i].Tmr1ms)
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4a5f      	ldr	r2, [pc, #380]	; (8000550 <Key_Process+0x1d4>)
 80003d2:	5cd3      	ldrb	r3, [r2, r3]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d016      	beq.n	8000406 <Key_Process+0x8a>
            {
                if (--Key[i].Tmr1ms == 0)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	4a5d      	ldr	r2, [pc, #372]	; (8000550 <Key_Process+0x1d4>)
 80003dc:	5cd2      	ldrb	r2, [r2, r3]
 80003de:	3a01      	subs	r2, #1
 80003e0:	b2d1      	uxtb	r1, r2
 80003e2:	4a5b      	ldr	r2, [pc, #364]	; (8000550 <Key_Process+0x1d4>)
 80003e4:	54d1      	strb	r1, [r2, r3]
 80003e6:	4a5a      	ldr	r2, [pc, #360]	; (8000550 <Key_Process+0x1d4>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d10b      	bne.n	8000406 <Key_Process+0x8a>
                {
                    KeyCtrl.cache &= ~key_mask ;
 80003ee:	4b59      	ldr	r3, [pc, #356]	; (8000554 <Key_Process+0x1d8>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b25a      	sxtb	r2, r3
 80003f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003f8:	43db      	mvns	r3, r3
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	4013      	ands	r3, r2
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b54      	ldr	r3, [pc, #336]	; (8000554 <Key_Process+0x1d8>)
 8000404:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        key_mask <<= 1;
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	71bb      	strb	r3, [r7, #6]
    for ( i = 0; i < KEYS_NUM; i++)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	3301      	adds	r3, #1
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d9bb      	bls.n	8000390 <Key_Process+0x14>
    }

    if (KeyCtrl.cache != KeyCtrl.value)
 8000418:	4b4e      	ldr	r3, [pc, #312]	; (8000554 <Key_Process+0x1d8>)
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <Key_Process+0x1d8>)
 800041e:	785b      	ldrb	r3, [r3, #1]
 8000420:	429a      	cmp	r2, r3
 8000422:	d01d      	beq.n	8000460 <Key_Process+0xe4>
    {
        KeyCtrl.trg = KeyCtrl.cache & (~KeyCtrl.value);      //存储被按下的按键
 8000424:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <Key_Process+0x1d8>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b25a      	sxtb	r2, r3
 800042a:	4b4a      	ldr	r3, [pc, #296]	; (8000554 <Key_Process+0x1d8>)
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	b25b      	sxtb	r3, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	b25b      	sxtb	r3, r3
 8000434:	4013      	ands	r3, r2
 8000436:	b25b      	sxtb	r3, r3
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b46      	ldr	r3, [pc, #280]	; (8000554 <Key_Process+0x1d8>)
 800043c:	709a      	strb	r2, [r3, #2]
        KeyCtrl.realse = (~KeyCtrl.cache) & KeyCtrl.value;
 800043e:	4b45      	ldr	r3, [pc, #276]	; (8000554 <Key_Process+0x1d8>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b25b      	sxtb	r3, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	b25a      	sxtb	r2, r3
 8000448:	4b42      	ldr	r3, [pc, #264]	; (8000554 <Key_Process+0x1d8>)
 800044a:	785b      	ldrb	r3, [r3, #1]
 800044c:	b25b      	sxtb	r3, r3
 800044e:	4013      	ands	r3, r2
 8000450:	b25b      	sxtb	r3, r3
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <Key_Process+0x1d8>)
 8000456:	70da      	strb	r2, [r3, #3]
        KeyCtrl.value = KeyCtrl.cache;
 8000458:	4b3e      	ldr	r3, [pc, #248]	; (8000554 <Key_Process+0x1d8>)
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <Key_Process+0x1d8>)
 800045e:	705a      	strb	r2, [r3, #1]
    }
    
    if (KeyCtrl.trg)
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <Key_Process+0x1d8>)
 8000462:	789b      	ldrb	r3, [r3, #2]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d033      	beq.n	80004d0 <Key_Process+0x154>
    {
        /* 进入按键按下处理程序 */
        switch (KeyCtrl.trg)
 8000468:	4b3a      	ldr	r3, [pc, #232]	; (8000554 <Key_Process+0x1d8>)
 800046a:	789b      	ldrb	r3, [r3, #2]
 800046c:	3b01      	subs	r3, #1
 800046e:	2b07      	cmp	r3, #7
 8000470:	d82a      	bhi.n	80004c8 <Key_Process+0x14c>
 8000472:	a201      	add	r2, pc, #4	; (adr r2, 8000478 <Key_Process+0xfc>)
 8000474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000478:	080004c3 	.word	0x080004c3
 800047c:	080004b5 	.word	0x080004b5
 8000480:	080004c9 	.word	0x080004c9
 8000484:	080004a7 	.word	0x080004a7
 8000488:	080004c9 	.word	0x080004c9
 800048c:	080004c9 	.word	0x080004c9
 8000490:	080004c9 	.word	0x080004c9
 8000494:	08000499 	.word	0x08000499
        {
            case 0x08: GUI_SPI_Display_Char_ASCII(1,2,"A",0);break;
 8000498:	2300      	movs	r3, #0
 800049a:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <Key_Process+0x1dc>)
 800049c:	2102      	movs	r1, #2
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff fefe 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 80004a4:	e011      	b.n	80004ca <Key_Process+0x14e>
            case 0x04: GUI_SPI_Display_Char_ASCII(1,4,"B",0);break;
 80004a6:	2300      	movs	r3, #0
 80004a8:	4a2c      	ldr	r2, [pc, #176]	; (800055c <Key_Process+0x1e0>)
 80004aa:	2104      	movs	r1, #4
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fef7 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 80004b2:	e00a      	b.n	80004ca <Key_Process+0x14e>
            case 0x02: GUI_SPI_Display_Char_ASCII(1,6,"C",0);break;
 80004b4:	2300      	movs	r3, #0
 80004b6:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <Key_Process+0x1e4>)
 80004b8:	2106      	movs	r1, #6
 80004ba:	2001      	movs	r0, #1
 80004bc:	f7ff fef0 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 80004c0:	e003      	b.n	80004ca <Key_Process+0x14e>
            case 0x01: GUI_CLEAR_SCREEN();break;
 80004c2:	f7ff fe77 	bl	80001b4 <GUI_CLEAR_SCREEN>
 80004c6:	e000      	b.n	80004ca <Key_Process+0x14e>
            default:
            break;
 80004c8:	bf00      	nop
        }
        KeyCtrl.trg = 0;
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <Key_Process+0x1d8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	709a      	strb	r2, [r3, #2]
    }

    if (KeyCtrl.realse)
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <Key_Process+0x1d8>)
 80004d2:	78db      	ldrb	r3, [r3, #3]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d037      	beq.n	8000548 <Key_Process+0x1cc>
    {
        /* 进入按键释放处理程序 */
        switch (KeyCtrl.realse)
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <Key_Process+0x1d8>)
 80004da:	78db      	ldrb	r3, [r3, #3]
 80004dc:	3b01      	subs	r3, #1
 80004de:	2b07      	cmp	r3, #7
 80004e0:	d82e      	bhi.n	8000540 <Key_Process+0x1c4>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <Key_Process+0x16c>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	08000533 	.word	0x08000533
 80004ec:	08000525 	.word	0x08000525
 80004f0:	08000541 	.word	0x08000541
 80004f4:	08000517 	.word	0x08000517
 80004f8:	08000541 	.word	0x08000541
 80004fc:	08000541 	.word	0x08000541
 8000500:	08000541 	.word	0x08000541
 8000504:	08000509 	.word	0x08000509
        {
            case 0x08: GUI_SPI_Display_Char_ASCII(5,2,"E",0);break;
 8000508:	2300      	movs	r3, #0
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <Key_Process+0x1e8>)
 800050c:	2102      	movs	r1, #2
 800050e:	2005      	movs	r0, #5
 8000510:	f7ff fec6 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 8000514:	e015      	b.n	8000542 <Key_Process+0x1c6>
            case 0x04: GUI_SPI_Display_Char_ASCII(5,3,"F",0);break;
 8000516:	2300      	movs	r3, #0
 8000518:	4a13      	ldr	r2, [pc, #76]	; (8000568 <Key_Process+0x1ec>)
 800051a:	2103      	movs	r1, #3
 800051c:	2005      	movs	r0, #5
 800051e:	f7ff febf 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 8000522:	e00e      	b.n	8000542 <Key_Process+0x1c6>
            case 0x02: GUI_SPI_Display_Char_ASCII(5,4,"G",0);break;
 8000524:	2300      	movs	r3, #0
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <Key_Process+0x1f0>)
 8000528:	2104      	movs	r1, #4
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff feb8 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 8000530:	e007      	b.n	8000542 <Key_Process+0x1c6>
            case 0x01: GUI_SPI_Display_Char_ASCII(5,5,"H",0);break;
 8000532:	2300      	movs	r3, #0
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <Key_Process+0x1f4>)
 8000536:	2105      	movs	r1, #5
 8000538:	2005      	movs	r0, #5
 800053a:	f7ff feb1 	bl	80002a0 <GUI_SPI_Display_Char_ASCII>
 800053e:	e000      	b.n	8000542 <Key_Process+0x1c6>
            default:
            break;
 8000540:	bf00      	nop
        }
        KeyCtrl.realse = 0;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <Key_Process+0x1d8>)
 8000544:	2200      	movs	r2, #0
 8000546:	70da      	strb	r2, [r3, #3]
    }
    
    
    
    
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000001c 	.word	0x2000001c
 8000554:	20000020 	.word	0x20000020
 8000558:	08001260 	.word	0x08001260
 800055c:	08001264 	.word	0x08001264
 8000560:	08001268 	.word	0x08001268
 8000564:	0800126c 	.word	0x0800126c
 8000568:	08001270 	.word	0x08001270
 800056c:	08001274 	.word	0x08001274
 8000570:	08001278 	.word	0x08001278

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <SystemInit+0x5c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <SystemInit+0x5c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <SystemInit+0x5c>)
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SystemInit+0x5c>)
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <SystemInit+0x60>)
 800058c:	4013      	ands	r3, r2
 800058e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <SystemInit+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <SystemInit+0x5c>)
 8000596:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800059a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SystemInit+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <SystemInit+0x5c>)
 80005a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SystemInit+0x5c>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SystemInit+0x5c>)
 80005b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SystemInit+0x5c>)
 80005ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005be:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80005c0:	f000 f80c 	bl	80005dc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <SystemInit+0x64>)
 80005c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	f8ff0000 	.word	0xf8ff0000
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80005e0:	f000 f802 	bl	80005e8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <SetSysClockTo72+0xf8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <SetSysClockTo72+0xf8>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <SetSysClockTo72+0x38>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800061e:	d1f0      	bne.n	8000602 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800062c:	2301      	movs	r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	e001      	b.n	8000636 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d14b      	bne.n	80006d4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SetSysClockTo72+0xfc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <SetSysClockTo72+0xfc>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SetSysClockTo72+0xfc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <SetSysClockTo72+0xfc>)
 800064e:	f023 0303 	bic.w	r3, r3, #3
 8000652:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SetSysClockTo72+0xfc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SetSysClockTo72+0xfc>)
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SetSysClockTo72+0xf8>)
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <SetSysClockTo72+0xf8>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SetSysClockTo72+0xf8>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000682:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000686:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SetSysClockTo72+0xf8>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <SetSysClockTo72+0xf8>)
 800068e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000692:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SetSysClockTo72+0xf8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SetSysClockTo72+0xf8>)
 800069a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006a0:	bf00      	nop
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006b4:	f023 0303 	bic.w	r3, r3, #3
 80006b8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80006c6:	bf00      	nop
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SetSysClockTo72+0xf8>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 030c 	and.w	r3, r3, #12
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d1f9      	bne.n	80006c8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40022000 	.word	0x40022000

080006e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff ff44 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ee:	490c      	ldr	r1, [pc, #48]	; (8000720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a09      	ldr	r2, [pc, #36]	; (8000728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000704:	4c09      	ldr	r4, [pc, #36]	; (800072c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f000 fd75 	bl	8001200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fd19 	bl	800014c <main>
  bx lr
 800071a:	4770      	bx	lr
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000724:	08001a9c 	.word	0x08001a9c
  ldr r2, =_sbss
 8000728:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800072c:	20000430 	.word	0x20000430

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 800073c:	490d      	ldr	r1, [pc, #52]	; (8000774 <Bsp_DelayUS+0x40>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4613      	mov	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <Bsp_DelayUS+0x40>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <Bsp_DelayUS+0x40>)
 8000752:	2205      	movs	r2, #5
 8000754:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 8000756:	bf00      	nop
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <Bsp_DelayUS+0x40>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f9      	beq.n	8000758 <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <Bsp_DelayUS+0x40>)
 8000766:	2204      	movs	r2, #4
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	e000e010 	.word	0xe000e010

08000778 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	while(xms--)
 8000780:	e003      	b.n	800078a <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f7ff ffd5 	bl	8000734 <Bsp_DelayUS>
	while(xms--)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f6      	bne.n	8000782 <Bsp_DelayMS+0xa>
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 80007a2:	f000 f85d 	bl	8000860 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 80007a6:	f000 f8ed 	bl	8000984 <Bsp_SPI_Init>
	//Bsp_I2C_Init();
    
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 80007b6:	2101      	movs	r1, #1
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fbe3 	bl	8000f84 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <Bsp_SPI_DMA_Init+0x60>)
 80007c0:	f000 f958 	bl	8000a74 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <Bsp_SPI_DMA_Init+0x64>)
 80007c6:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <Bsp_SPI_DMA_Init+0x68>)
 80007ca:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 80007cc:	2310      	movs	r3, #16
 80007ce:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 80007e6:	2320      	movs	r3, #32
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <Bsp_SPI_DMA_Init+0x60>)
 80007fa:	f000 f9f7 	bl	8000bec <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 80007fe:	2101      	movs	r1, #1
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <Bsp_SPI_DMA_Init+0x60>)
 8000802:	f000 fa31 	bl	8000c68 <DMA_Cmd>
}
 8000806:	bf00      	nop
 8000808:	3730      	adds	r7, #48	; 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40020030 	.word	0x40020030
 8000814:	4001300c 	.word	0x4001300c
 8000818:	20000024 	.word	0x20000024

0800081c <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000820:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000824:	f000 fa3c 	bl	8000ca0 <DMA_GetFlagStatus>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 800082e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000832:	f000 fa5d 	bl	8000cf0 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f7ff ff7c 	bl	8000734 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 800083c:	2101      	movs	r1, #1
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <DMA1_Channel6_IRQHandler+0x3c>)
 8000840:	f000 fb61 	bl	8000f06 <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8000844:	2101      	movs	r1, #1
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <DMA1_Channel6_IRQHandler+0x3c>)
 8000848:	f000 fb7c 	bl	8000f44 <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 800084c:	2100      	movs	r1, #0
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <DMA1_Channel6_IRQHandler+0x40>)
 8000850:	f000 fa0a 	bl	8000c68 <DMA_Cmd>
	}
}	
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40005400 	.word	0x40005400
 800085c:	4002006c 	.word	0x4002006c

08000860 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000864:	2101      	movs	r1, #1
 8000866:	2004      	movs	r0, #4
 8000868:	f000 fbaa 	bl	8000fc0 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 800086c:	2101      	movs	r1, #1
 800086e:	2009      	movs	r0, #9
 8000870:	f000 fba6 	bl	8000fc0 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <Bsp_GPIO_Init+0x78>)
 8000876:	2218      	movs	r2, #24
 8000878:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <Bsp_GPIO_Init+0x78>)
 800087c:	2203      	movs	r2, #3
 800087e:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <Bsp_GPIO_Init+0x78>)
 8000882:	22a0      	movs	r2, #160	; 0xa0
 8000884:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <Bsp_GPIO_Init+0x7c>)
 8000888:	2210      	movs	r2, #16
 800088a:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <Bsp_GPIO_Init+0x7c>)
 800088e:	2203      	movs	r2, #3
 8000890:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <Bsp_GPIO_Init+0x7c>)
 8000894:	2250      	movs	r2, #80	; 0x50
 8000896:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000898:	490f      	ldr	r1, [pc, #60]	; (80008d8 <Bsp_GPIO_Init+0x78>)
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <Bsp_GPIO_Init+0x80>)
 800089c:	f000 fa42 	bl	8000d24 <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 80008a0:	490e      	ldr	r1, [pc, #56]	; (80008dc <Bsp_GPIO_Init+0x7c>)
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <Bsp_GPIO_Init+0x80>)
 80008a4:	f000 fa3e 	bl	8000d24 <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008aa:	2248      	movs	r2, #72	; 0x48
 80008ac:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ba:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 80008bc:	4909      	ldr	r1, [pc, #36]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008be:	4808      	ldr	r0, [pc, #32]	; (80008e0 <Bsp_GPIO_Init+0x80>)
 80008c0:	f000 fa30 	bl	8000d24 <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008c6:	2220      	movs	r2, #32
 80008c8:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <Bsp_GPIO_Init+0x84>)
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <Bsp_GPIO_Init+0x88>)
 80008ce:	f000 fa29 	bl	8000d24 <GPIO_Init>
    #endif
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000424 	.word	0x20000424
 80008dc:	20000428 	.word	0x20000428
 80008e0:	40010800 	.word	0x40010800
 80008e4:	2000042c 	.word	0x2000042c
 80008e8:	40010c00 	.word	0x40010c00

080008ec <Bsp_KEY_Probe>:
*参    数:'void' 
*返 回 值:'none' 
*说    明: '返回 0 表示按键按下 返回 1 表示按键释放' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t Bsp_KEY_Probe(u8 key){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
    switch (key)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d83a      	bhi.n	8000972 <Bsp_KEY_Probe+0x86>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <Bsp_KEY_Probe+0x18>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	0800092d 	.word	0x0800092d
 800090c:	08000945 	.word	0x08000945
 8000910:	0800095d 	.word	0x0800095d
    {
        case KEY_UP: return (GPIO_ReadInputDataBit(KEY_UP_PORT,KEY_UP_PIN) == 0); break;   //这里用 == 0 而不直接读取值，有两个好处 向上层屏蔽了按下和没按下的底层逻辑，上层只需要知道 按下为1 未按下0，如果后续出现改动比如 电平0为释放 1为按下 不用对上层做对应的变化，符合分层 对上层屏蔽细节的作用，便于维护 与阅读 （告诉读者 当前针对 0）
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <Bsp_KEY_Probe+0x90>)
 800091a:	f000 fabf 	bl	8000e9c <GPIO_ReadInputDataBit>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf0c      	ite	eq
 8000924:	2301      	moveq	r3, #1
 8000926:	2300      	movne	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	e023      	b.n	8000974 <Bsp_KEY_Probe+0x88>
        case KEY_DOWN:return (GPIO_ReadInputDataBit(KEY_DOWN_PORT,KEY_DOWN_PIN) == 0); break;
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <Bsp_KEY_Probe+0x90>)
 8000932:	f000 fab3 	bl	8000e9c <GPIO_ReadInputDataBit>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	e017      	b.n	8000974 <Bsp_KEY_Probe+0x88>
        case KEY_SET:return (GPIO_ReadInputDataBit(KEY_SET_PORT,KEY_SET_PIN) == 0);  break;
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <Bsp_KEY_Probe+0x90>)
 800094a:	f000 faa7 	bl	8000e9c <GPIO_ReadInputDataBit>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	e00b      	b.n	8000974 <Bsp_KEY_Probe+0x88>
        case KEY_COMFIRM: return (GPIO_ReadInputDataBit(KEY_COMFIRM_PORT,KEY_COMFIRM_PIN) == 0); break;
 800095c:	2120      	movs	r1, #32
 800095e:	4808      	ldr	r0, [pc, #32]	; (8000980 <Bsp_KEY_Probe+0x94>)
 8000960:	f000 fa9c 	bl	8000e9c <GPIO_ReadInputDataBit>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf0c      	ite	eq
 800096a:	2301      	moveq	r3, #1
 800096c:	2300      	movne	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	e000      	b.n	8000974 <Bsp_KEY_Probe+0x88>
    }
    return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010800 	.word	0x40010800
 8000980:	40010c00 	.word	0x40010c00

08000984 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 800098a:	2101      	movs	r1, #1
 800098c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000990:	f000 fb16 	bl	8000fc0 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <Bsp_SPI_Init+0x60>)
 8000996:	f000 fb6d 	bl	8001074 <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 800099a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800099e:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80009a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009a4:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80009a6:	2300      	movs	r3, #0
 80009a8:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 80009aa:	2300      	movs	r3, #0
 80009ac:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80009ae:	2300      	movs	r3, #0
 80009b0:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 80009b8:	2338      	movs	r3, #56	; 0x38
 80009ba:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 80009bc:	2300      	movs	r3, #0
 80009be:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <Bsp_SPI_Init+0x60>)
 80009ca:	f000 fb8d 	bl	80010e8 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <Bsp_SPI_Init+0x60>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 80009d4:	2101      	movs	r1, #1
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <Bsp_SPI_Init+0x60>)
 80009d8:	f000 fbc9 	bl	800116e <SPI_Cmd>
}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40013000 	.word	0x40013000

080009e8 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(u8 TxData)                                   //发送命令
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	u8 retry=0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <Bsp_SPI_Send_CMD+0x5c>)
 80009fa:	f000 fa76 	bl	8000eea <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 80009fe:	e005      	b.n	8000a0c <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	3301      	adds	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2bc8      	cmp	r3, #200	; 0xc8
 8000a0a:	d816      	bhi.n	8000a3a <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <Bsp_SPI_Send_CMD+0x60>)
 8000a10:	f000 fbda 	bl	80011c8 <SPI_I2S_GetFlagStatus>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f2      	beq.n	8000a00 <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f7ff feac 	bl	8000778 <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <Bsp_SPI_Send_CMD+0x60>)
 8000a28:	f000 fbc0 	bl	80011ac <SPI_I2S_SendData>
	retry=0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <Bsp_SPI_Send_CMD+0x5c>)
 8000a34:	f000 fa4b 	bl	8000ece <GPIO_SetBits>
 8000a38:	e000      	b.n	8000a3c <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 8000a3a:	bf00      	nop
}
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40013000 	.word	0x40013000

08000a4c <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
   
    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 8000a50:	2110      	movs	r1, #16
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <Bsp_SPI_RES_LOW+0x10>)
 8000a54:	f000 fa49 	bl	8000eea <GPIO_ResetBits>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010800 	.word	0x40010800

08000a60 <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 8000a64:	2110      	movs	r1, #16
 8000a66:	4802      	ldr	r0, [pc, #8]	; (8000a70 <Bsp_SPI_RES_HIGH+0x10>)
 8000a68:	f000 fa31 	bl	8000ece <GPIO_SetBits>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010800 	.word	0x40010800

08000a74 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000a84:	4013      	ands	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <DMA_DeInit+0x140>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d106      	bne.n	8000ab8 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000aaa:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <DMA_DeInit+0x144>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <DMA_DeInit+0x144>)
 8000ab0:	f043 030f 	orr.w	r3, r3, #15
 8000ab4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000ab6:	e077      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <DMA_DeInit+0x148>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d106      	bne.n	8000ace <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <DMA_DeInit+0x144>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4a3c      	ldr	r2, [pc, #240]	; (8000bb8 <DMA_DeInit+0x144>)
 8000ac6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000aca:	6053      	str	r3, [r2, #4]
}
 8000acc:	e06c      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <DMA_DeInit+0x14c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <DMA_DeInit+0x144>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a37      	ldr	r2, [pc, #220]	; (8000bb8 <DMA_DeInit+0x144>)
 8000adc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ae0:	6053      	str	r3, [r2, #4]
}
 8000ae2:	e061      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a37      	ldr	r2, [pc, #220]	; (8000bc4 <DMA_DeInit+0x150>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <DMA_DeInit+0x144>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <DMA_DeInit+0x144>)
 8000af2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000af6:	6053      	str	r3, [r2, #4]
}
 8000af8:	e056      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <DMA_DeInit+0x154>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b08:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b0c:	6053      	str	r3, [r2, #4]
}
 8000b0e:	e04b      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <DMA_DeInit+0x158>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b22:	6053      	str	r3, [r2, #4]
}
 8000b24:	e040      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <DMA_DeInit+0x15c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <DMA_DeInit+0x144>)
 8000b34:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000b38:	6053      	str	r3, [r2, #4]
}
 8000b3a:	e035      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <DMA_DeInit+0x160>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d106      	bne.n	8000b52 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b4a:	f043 030f 	orr.w	r3, r3, #15
 8000b4e:	6053      	str	r3, [r2, #4]
}
 8000b50:	e02a      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <DMA_DeInit+0x168>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d106      	bne.n	8000b68 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b64:	6053      	str	r3, [r2, #4]
}
 8000b66:	e01f      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <DMA_DeInit+0x16c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b76:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b7a:	6053      	str	r3, [r2, #4]
}
 8000b7c:	e014      	b.n	8000ba8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <DMA_DeInit+0x170>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d106      	bne.n	8000b94 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b8c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b90:	6053      	str	r3, [r2, #4]
}
 8000b92:	e009      	b.n	8000ba8 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <DMA_DeInit+0x174>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d105      	bne.n	8000ba8 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <DMA_DeInit+0x164>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <DMA_DeInit+0x164>)
 8000ba2:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ba6:	6053      	str	r3, [r2, #4]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40020008 	.word	0x40020008
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	4002001c 	.word	0x4002001c
 8000bc0:	40020030 	.word	0x40020030
 8000bc4:	40020044 	.word	0x40020044
 8000bc8:	40020058 	.word	0x40020058
 8000bcc:	4002006c 	.word	0x4002006c
 8000bd0:	40020080 	.word	0x40020080
 8000bd4:	40020408 	.word	0x40020408
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	4002041c 	.word	0x4002041c
 8000be0:	40020430 	.word	0x40020430
 8000be4:	40020444 	.word	0x40020444
 8000be8:	40020458 	.word	0x40020458

08000bec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c0a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f043 0201 	orr.w	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000c86:	e006      	b.n	8000c96 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c90:	4013      	ands	r3, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <DMA_GetFlagStatus+0x48>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	e002      	b.n	8000cc8 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <DMA_GetFlagStatus+0x4c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e001      	b.n	8000cdc <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40020000 	.word	0x40020000

08000cf0 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000d02:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <DMA_ClearFlag+0x2c>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000d08:	e002      	b.n	8000d10 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <DMA_ClearFlag+0x30>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6053      	str	r3, [r2, #4]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40020000 	.word	0x40020000

08000d24 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	461a      	mov	r2, r3
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d044      	beq.n	8000dfc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e038      	b.n	8000df0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000d7e:	2201      	movs	r2, #1
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d126      	bne.n	8000dea <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000da2:	220f      	movs	r2, #15
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	4013      	ands	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	2b28      	cmp	r3, #40	; 0x28
 8000dca:	d105      	bne.n	8000dd8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	e008      	b.n	8000dea <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	2b48      	cmp	r3, #72	; 0x48
 8000dde:	d104      	bne.n	8000dea <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000de0:	2201      	movs	r2, #1
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	409a      	lsls	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2b07      	cmp	r3, #7
 8000df4:	d9c3      	bls.n	8000d7e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	d946      	bls.n	8000e92 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	e03a      	b.n	8000e86 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	3308      	adds	r3, #8
 8000e14:	2201      	movs	r2, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d127      	bne.n	8000e80 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e36:	220f      	movs	r2, #15
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	4013      	ands	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b28      	cmp	r3, #40	; 0x28
 8000e5e:	d105      	bne.n	8000e6c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	3308      	adds	r3, #8
 8000e64:	2201      	movs	r2, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	78db      	ldrb	r3, [r3, #3]
 8000e70:	2b48      	cmp	r3, #72	; 0x48
 8000e72:	d105      	bne.n	8000e80 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	3308      	adds	r3, #8
 8000e78:	2201      	movs	r2, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d9c1      	bls.n	8000e10 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	605a      	str	r2, [r3, #4]
  }
}
 8000e92:	bf00      	nop
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e001      	b.n	8000ec2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	611a      	str	r2, [r3, #16]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	615a      	str	r2, [r3, #20]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8000f28:	e007      	b.n	8000f3a <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	801a      	strh	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000f66:	e007      	b.n	8000f78 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	801a      	strh	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <RCC_AHBPeriphClockCmd+0x38>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <RCC_AHBPeriphClockCmd+0x38>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000fa2:	e006      	b.n	8000fb2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <RCC_AHBPeriphClockCmd+0x38>)
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <RCC_AHBPeriphClockCmd+0x38>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	614b      	str	r3, [r1, #20]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fd4:	699a      	ldr	r2, [r3, #24]
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fde:	e006      	b.n	8000fee <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	618b      	str	r3, [r1, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4313      	orrs	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800101a:	e006      	b.n	800102a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	43db      	mvns	r3, r3
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001026:	4013      	ands	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000

08001038 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001056:	e006      	b.n	8001066 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	43db      	mvns	r3, r3
 8001060:	4903      	ldr	r1, [pc, #12]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 8001062:	4013      	ands	r3, r2
 8001064:	610b      	str	r3, [r1, #16]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <SPI_I2S_DeInit+0x68>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d10a      	bne.n	800109a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001084:	2101      	movs	r1, #1
 8001086:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800108a:	f7ff ffb7 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800108e:	2100      	movs	r1, #0
 8001090:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001094:	f7ff ffb2 	bl	8000ffc <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001098:	e01c      	b.n	80010d4 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <SPI_I2S_DeInit+0x6c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10a      	bne.n	80010b8 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80010a2:	2101      	movs	r1, #1
 80010a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010a8:	f7ff ffc6 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80010ac:	2100      	movs	r1, #0
 80010ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010b2:	f7ff ffc1 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 80010b6:	e00d      	b.n	80010d4 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SPI_I2S_DeInit+0x70>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d109      	bne.n	80010d4 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80010c0:	2101      	movs	r1, #1
 80010c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010c6:	f7ff ffb7 	bl	8001038 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80010ca:	2100      	movs	r1, #0
 80010cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010d0:	f7ff ffb2 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40003800 	.word	0x40003800
 80010e4:	40003c00 	.word	0x40003c00

080010e8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001102:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	4313      	orrs	r3, r2
 800110e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001114:	4313      	orrs	r3, r2
 8001116:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800111c:	4313      	orrs	r3, r2
 800111e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001124:	4313      	orrs	r3, r2
 8001126:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800112c:	4313      	orrs	r3, r2
 800112e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001134:	4313      	orrs	r3, r2
 8001136:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	4313      	orrs	r3, r2
 8001144:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	89fa      	ldrh	r2, [r7, #14]
 800114a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	8b9b      	ldrh	r3, [r3, #28]
 8001150:	b29b      	uxth	r3, r3
 8001152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	8a1a      	ldrh	r2, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	821a      	strh	r2, [r3, #16]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001190:	e007      	b.n	80011a2 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	801a      	strh	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	819a      	strh	r2, [r3, #12]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	4013      	ands	r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
	...

08001200 <__libc_init_array>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	2600      	movs	r6, #0
 8001204:	4d0c      	ldr	r5, [pc, #48]	; (8001238 <__libc_init_array+0x38>)
 8001206:	4c0d      	ldr	r4, [pc, #52]	; (800123c <__libc_init_array+0x3c>)
 8001208:	1b64      	subs	r4, r4, r5
 800120a:	10a4      	asrs	r4, r4, #2
 800120c:	42a6      	cmp	r6, r4
 800120e:	d109      	bne.n	8001224 <__libc_init_array+0x24>
 8001210:	f000 f81a 	bl	8001248 <_init>
 8001214:	2600      	movs	r6, #0
 8001216:	4d0a      	ldr	r5, [pc, #40]	; (8001240 <__libc_init_array+0x40>)
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <__libc_init_array+0x44>)
 800121a:	1b64      	subs	r4, r4, r5
 800121c:	10a4      	asrs	r4, r4, #2
 800121e:	42a6      	cmp	r6, r4
 8001220:	d105      	bne.n	800122e <__libc_init_array+0x2e>
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	f855 3b04 	ldr.w	r3, [r5], #4
 8001228:	4798      	blx	r3
 800122a:	3601      	adds	r6, #1
 800122c:	e7ee      	b.n	800120c <__libc_init_array+0xc>
 800122e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001232:	4798      	blx	r3
 8001234:	3601      	adds	r6, #1
 8001236:	e7f2      	b.n	800121e <__libc_init_array+0x1e>
 8001238:	08001a94 	.word	0x08001a94
 800123c:	08001a94 	.word	0x08001a94
 8001240:	08001a94 	.word	0x08001a94
 8001244:	08001a98 	.word	0x08001a98

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr
