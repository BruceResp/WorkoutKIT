
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080011c0 	.word	0x080011c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080011c0 	.word	0x080011c0

0800014c <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000150:	f000 fae1 	bl	8000716 <Bsp_Init>
 	GUI_SPI_Init(); //初始化测试下来要4s钟有点长
 8000154:	f000 f82f 	bl	80001b6 <GUI_SPI_Init>
	// u8 page_Y = 50;
	//GUI_Test();
	while (1)
	{
		//GUI_CLEAR_SCREEN();
		Key_Process();
 8000158:	f000 f8f6 	bl	8000348 <Key_Process>
		System_Poll();
 800015c:	f000 f99a 	bl	8000494 <System_Poll>
	{
 8000160:	e7fa      	b.n	8000158 <main+0xc>

08000162 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000162:	b480      	push	{r7}
 8000164:	af00      	add	r7, sp, #0
}
 8000166:	bf00      	nop
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr

0800016e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800016e:	b480      	push	{r7}
 8000170:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000172:	e7fe      	b.n	8000172 <HardFault_Handler+0x4>

08000174 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000178:	e7fe      	b.n	8000178 <MemManage_Handler+0x4>

0800017a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800017a:	b480      	push	{r7}
 800017c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800017e:	e7fe      	b.n	800017e <BusFault_Handler+0x4>

08000180 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000184:	e7fe      	b.n	8000184 <UsageFault_Handler+0x4>

08000186 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000186:	b480      	push	{r7}
 8000188:	af00      	add	r7, sp, #0
}
 800018a:	bf00      	nop
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000192:	b480      	push	{r7}
 8000194:	af00      	add	r7, sp, #0
}
 8000196:	bf00      	nop
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr

080001b6 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	af00      	add	r7, sp, #0
	Bsp_DelayMS(10); //1000
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 fa98 	bl	80006f0 <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 80001c0:	f000 fc00 	bl	80009c4 <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(10);  //100
 80001c4:	200a      	movs	r0, #10
 80001c6:	f000 fa93 	bl	80006f0 <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 80001ca:	f000 fc05 	bl	80009d8 <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 80001ce:	20ae      	movs	r0, #174	; 0xae
 80001d0:	f000 fbc6 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 80001d4:	20d5      	movs	r0, #213	; 0xd5
 80001d6:	f000 fbc3 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x80);//[3:0],分频因子;[7:4],震荡频率
 80001da:	2080      	movs	r0, #128	; 0x80
 80001dc:	f000 fbc0 	bl	8000960 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0x81);//设置对比度
 80001e0:	2081      	movs	r0, #129	; 0x81
 80001e2:	f000 fbbd 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 80001e6:	207f      	movs	r0, #127	; 0x7f
 80001e8:	f000 fbba 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 80001ec:	208d      	movs	r0, #141	; 0x8d
 80001ee:	f000 fbb7 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 80001f2:	2014      	movs	r0, #20
 80001f4:	f000 fbb4 	bl	8000960 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 80001f8:	2020      	movs	r0, #32
 80001fa:	f000 fbb1 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 fbae 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 8000204:	2021      	movs	r0, #33	; 0x21
 8000206:	f000 fbab 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fba8 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 8000210:	207f      	movs	r0, #127	; 0x7f
 8000212:	f000 fba5 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 8000216:	2022      	movs	r0, #34	; 0x22
 8000218:	f000 fba2 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fb9f 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 8000222:	2007      	movs	r0, #7
 8000224:	f000 fb9c 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 8000228:	20c9      	movs	r0, #201	; 0xc9
 800022a:	f000 fb99 	bl	8000960 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 800022e:	20a1      	movs	r0, #161	; 0xa1
 8000230:	f000 fb96 	bl	8000960 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 8000234:	20a4      	movs	r0, #164	; 0xa4
 8000236:	f000 fb93 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 800023a:	20a6      	movs	r0, #166	; 0xa6
 800023c:	f000 fb90 	bl	8000960 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 8000240:	20af      	movs	r0, #175	; 0xaf
 8000242:	f000 fb8d 	bl	8000960 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 8000246:	2056      	movs	r0, #86	; 0x56
 8000248:	f000 fb8a 	bl	8000960 <Bsp_SPI_Send_CMD>
   Bsp_SPI_DMA_Init();//DMA初始化
 800024c:	f000 fa6c 	bl	8000728 <Bsp_SPI_DMA_Init>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <Key_Trig_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Trig_Handler(void){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <Key_Mainpage_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Mainpage_Process(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0

    uint8_t Page_Index = System_Page_Status_Read();
 8000266:	f000 f8fb 	bl	8000460 <System_Page_Status_Read>
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]

    if (KEY_IS_UP_RELEASE())
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <Key_Mainpage_Process+0x78>)
 8000270:	78db      	ldrb	r3, [r3, #3]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	2b00      	cmp	r3, #0
 8000278:	d008      	beq.n	800028c <Key_Mainpage_Process+0x2c>
    {
        if (Page_Index < SYSTEM_MAIN_PAGE_CONFIG_READY )
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b03      	cmp	r3, #3
 800027e:	d803      	bhi.n	8000288 <Key_Mainpage_Process+0x28>
        {
            Page_Index += 2;
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	3302      	adds	r3, #2
 8000284:	71fb      	strb	r3, [r7, #7]
 8000286:	e001      	b.n	800028c <Key_Mainpage_Process+0x2c>
        }else
        {
            Page_Index = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (KEY_IS_DOWN_RELEASE())
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <Key_Mainpage_Process+0x78>)
 800028e:	78db      	ldrb	r3, [r3, #3]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	d008      	beq.n	80002aa <Key_Mainpage_Process+0x4a>
    {
        if (Page_Index > SYSTEM_MAIN_PAGE_START_TRAIN_READY )
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d003      	beq.n	80002a6 <Key_Mainpage_Process+0x46>
        {
            Page_Index -= 2;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	3b02      	subs	r3, #2
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	e001      	b.n	80002aa <Key_Mainpage_Process+0x4a>
        }else
        {
            Page_Index = SYSTEM_MAIN_PAGE_CONFIG_READY;
 80002a6:	2304      	movs	r3, #4
 80002a8:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (KEY_IS_SET_PRESS())
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <Key_Mainpage_Process+0x78>)
 80002ac:	789b      	ldrb	r3, [r3, #2]
 80002ae:	f003 0304 	and.w	r3, r3, #4
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d008      	beq.n	80002c8 <Key_Mainpage_Process+0x68>
    {
        if (Page_Index % 2 == 0)    //选中图标 处于ready状态
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d102      	bne.n	80002c8 <Key_Mainpage_Process+0x68>
        {
            Page_Index += 1;        //系统轮询检测到为奇数 自动跳转
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71fb      	strb	r3, [r7, #7]
        }
    }

    System_Page_Status_Write(Page_Index);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8d2 	bl	8000474 <System_Page_Status_Write>
    
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000020 	.word	0x20000020

080002dc <Key_MenuSelect_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_MenuSelect_Process(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
        
        
    }
    
    
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <Key_MenuEdit_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_MenuEdit_Process(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
            /* 进入选中的菜单内容（根据索引来加载菜单内容 菜单是一个数组） */
        }
        
    }
    
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <Key_ConfigPage_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_ConfigPage_Process(void){
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <Key_release_Handler>:

void Key_release_Handler(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

    switch (SystemCtrl.status)
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <Key_release_Handler+0x44>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d817      	bhi.n	800033c <Key_release_Handler+0x3c>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <Key_release_Handler+0x14>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000325 	.word	0x08000325
 8000318:	0800032b 	.word	0x0800032b
 800031c:	08000331 	.word	0x08000331
 8000320:	08000337 	.word	0x08000337
    {
        case SYSTEM_MAIN_PAGE: Key_Mainpage_Process(); break;
 8000324:	f7ff ff9c 	bl	8000260 <Key_Mainpage_Process>
 8000328:	e009      	b.n	800033e <Key_release_Handler+0x3e>
        case SYSTEM_TARIN_MENU_SELECET_PAGE: Key_MenuSelect_Process(); break;
 800032a:	f7ff ffd7 	bl	80002dc <Key_MenuSelect_Process>
 800032e:	e006      	b.n	800033e <Key_release_Handler+0x3e>
        case SYSTEM_EDIT_MENU_PAGE : Key_MenuEdit_Process(); break;
 8000330:	f7ff ffda 	bl	80002e8 <Key_MenuEdit_Process>
 8000334:	e003      	b.n	800033e <Key_release_Handler+0x3e>
        case SYSTEM_CONFIG_PAGE: Key_ConfigPage_Process(); break;
 8000336:	f7ff ffdd 	bl	80002f4 <Key_ConfigPage_Process>
 800033a:	e000      	b.n	800033e <Key_release_Handler+0x3e>
        default:
            break;
 800033c:	bf00      	nop
    }
    
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000024 	.word	0x20000024

08000348 <Key_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Process(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
    u8 i = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	71fb      	strb	r3, [r7, #7]
    u8 key_mask = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	71bb      	strb	r3, [r7, #6]
    
    for ( i = 0; i < KEYS_NUM; i++)
 8000356:	2300      	movs	r3, #0
 8000358:	71fb      	strb	r3, [r7, #7]
 800035a:	e040      	b.n	80003de <Key_Process+0x96>
    {
        /***              去抖           ***/
        if(Bsp_KEY_Probe(i))
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fa80 	bl	8000864 <Bsp_KEY_Probe>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d017      	beq.n	800039a <Key_Process+0x52>
        {
            if (Key[i].Tmr1ms <= KEY_DEBOUNCE_TIME)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a3a      	ldr	r2, [pc, #232]	; (8000458 <Key_Process+0x110>)
 800036e:	5cd3      	ldrb	r3, [r2, r3]
 8000370:	2b14      	cmp	r3, #20
 8000372:	d82e      	bhi.n	80003d2 <Key_Process+0x8a>
            {
                if ( ++Key[i].Tmr1ms > KEY_DEBOUNCE_TIME)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a38      	ldr	r2, [pc, #224]	; (8000458 <Key_Process+0x110>)
 8000378:	5cd2      	ldrb	r2, [r2, r3]
 800037a:	3201      	adds	r2, #1
 800037c:	b2d1      	uxtb	r1, r2
 800037e:	4a36      	ldr	r2, [pc, #216]	; (8000458 <Key_Process+0x110>)
 8000380:	54d1      	strb	r1, [r2, r3]
 8000382:	4a35      	ldr	r2, [pc, #212]	; (8000458 <Key_Process+0x110>)
 8000384:	5cd3      	ldrb	r3, [r2, r3]
 8000386:	2b14      	cmp	r3, #20
 8000388:	d923      	bls.n	80003d2 <Key_Process+0x8a>
                {
                    KeyCtrl.cache |= key_mask ;
 800038a:	4b34      	ldr	r3, [pc, #208]	; (800045c <Key_Process+0x114>)
 800038c:	781a      	ldrb	r2, [r3, #0]
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	4313      	orrs	r3, r2
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b31      	ldr	r3, [pc, #196]	; (800045c <Key_Process+0x114>)
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	e01b      	b.n	80003d2 <Key_Process+0x8a>
                }
            }
        }else{
            if (Key[i].Tmr1ms)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a2e      	ldr	r2, [pc, #184]	; (8000458 <Key_Process+0x110>)
 800039e:	5cd3      	ldrb	r3, [r2, r3]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d016      	beq.n	80003d2 <Key_Process+0x8a>
            {
                if (--Key[i].Tmr1ms == 0)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <Key_Process+0x110>)
 80003a8:	5cd2      	ldrb	r2, [r2, r3]
 80003aa:	3a01      	subs	r2, #1
 80003ac:	b2d1      	uxtb	r1, r2
 80003ae:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <Key_Process+0x110>)
 80003b0:	54d1      	strb	r1, [r2, r3]
 80003b2:	4a29      	ldr	r2, [pc, #164]	; (8000458 <Key_Process+0x110>)
 80003b4:	5cd3      	ldrb	r3, [r2, r3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d10b      	bne.n	80003d2 <Key_Process+0x8a>
                {
                    KeyCtrl.cache &= ~key_mask ;
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <Key_Process+0x114>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	b25a      	sxtb	r2, r3
 80003c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	4013      	ands	r3, r2
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <Key_Process+0x114>)
 80003d0:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        key_mask <<= 1;
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	71bb      	strb	r3, [r7, #6]
    for ( i = 0; i < KEYS_NUM; i++)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	3301      	adds	r3, #1
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d9bb      	bls.n	800035c <Key_Process+0x14>
    }

    if (KeyCtrl.cache != KeyCtrl.value)
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <Key_Process+0x114>)
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <Key_Process+0x114>)
 80003ea:	785b      	ldrb	r3, [r3, #1]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d01d      	beq.n	800042c <Key_Process+0xe4>
    {
        KeyCtrl.trg = KeyCtrl.cache & (~KeyCtrl.value);      //存储被按下的按键
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <Key_Process+0x114>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b25a      	sxtb	r2, r3
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <Key_Process+0x114>)
 80003f8:	785b      	ldrb	r3, [r3, #1]
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	4013      	ands	r3, r2
 8000402:	b25b      	sxtb	r3, r3
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <Key_Process+0x114>)
 8000408:	709a      	strb	r2, [r3, #2]
        KeyCtrl.release = (~KeyCtrl.cache) & KeyCtrl.value;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <Key_Process+0x114>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	b25b      	sxtb	r3, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	b25a      	sxtb	r2, r3
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <Key_Process+0x114>)
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	b25b      	sxtb	r3, r3
 800041a:	4013      	ands	r3, r2
 800041c:	b25b      	sxtb	r3, r3
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <Key_Process+0x114>)
 8000422:	70da      	strb	r2, [r3, #3]
        KeyCtrl.value = KeyCtrl.cache;
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <Key_Process+0x114>)
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <Key_Process+0x114>)
 800042a:	705a      	strb	r2, [r3, #1]
    }
    
    if (KeyCtrl.trg)
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <Key_Process+0x114>)
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d004      	beq.n	800043e <Key_Process+0xf6>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(1,6,"C",0);break;
        //     case 0x01: GUI_CLEAR_SCREEN();break;
        //     default:
        //     break;
        // }
        Key_Trig_Handler();
 8000434:	f7ff ff0e 	bl	8000254 <Key_Trig_Handler>
        KeyCtrl.trg = 0;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <Key_Process+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	709a      	strb	r2, [r3, #2]
    }

    if (KeyCtrl.release)
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <Key_Process+0x114>)
 8000440:	78db      	ldrb	r3, [r3, #3]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d004      	beq.n	8000450 <Key_Process+0x108>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(5,4,"G",0);break;
        //     case 0x01: GUI_SPI_Display_Char_ASCII(5,5,"H",0);break;
        //     default:
        //     break;
        // }
        Key_release_Handler();
 8000446:	f7ff ff5b 	bl	8000300 <Key_release_Handler>
        KeyCtrl.release = 0;
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <Key_Process+0x114>)
 800044c:	2200      	movs	r2, #0
 800044e:	70da      	strb	r2, [r3, #3]
    }
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000001c 	.word	0x2000001c
 800045c:	20000020 	.word	0x20000020

08000460 <System_Page_Status_Read>:
*参    数:'' 
*返 回 值:'' 
*说    明: '返回当前所处页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t System_Page_Status_Read(void){
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

    return (uint8_t)SystemCtrl.page_index;
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <System_Page_Status_Read+0x10>)
 8000466:	785b      	ldrb	r3, [r3, #1]
    
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000024 	.word	0x20000024

08000474 <System_Page_Status_Write>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Page_Status_Write(uint8_t page_index){
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]

    SystemCtrl.page_index = page_index ;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <System_Page_Status_Write+0x1c>)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	7053      	strb	r3, [r2, #1]

}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000024 	.word	0x20000024

08000494 <System_Poll>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Poll(void){
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

    switch (SystemCtrl.status)
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <System_Poll+0x54>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d81b      	bhi.n	80004d8 <System_Poll+0x44>
 80004a0:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <System_Poll+0x14>)
 80004a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a6:	bf00      	nop
 80004a8:	080004b9 	.word	0x080004b9
 80004ac:	080004d9 	.word	0x080004d9
 80004b0:	080004d9 	.word	0x080004d9
 80004b4:	080004d9 	.word	0x080004d9
    {
        case SYSTEM_MAIN_PAGE:
            if (SystemCtrl.page_index % 2 == 1){
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <System_Poll+0x54>)
 80004ba:	785b      	ldrb	r3, [r3, #1]
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d00a      	beq.n	80004dc <System_Poll+0x48>
                SystemCtrl.status = SystemCtrl.page_index / 2 +1;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <System_Poll+0x54>)
 80004c8:	785b      	ldrb	r3, [r3, #1]
 80004ca:	085b      	lsrs	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <System_Poll+0x54>)
 80004d4:	701a      	strb	r2, [r3, #0]
                
            };
            break;
 80004d6:	e001      	b.n	80004dc <System_Poll+0x48>
            break;
        case SYSTEM_CONFIG_PAGE:
            
            break;
        default:
            break;
 80004d8:	bf00      	nop
 80004da:	e000      	b.n	80004de <System_Poll+0x4a>
            break;
 80004dc:	bf00      	nop
    }
    


 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000024 	.word	0x20000024

080004ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <SystemInit+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <SystemInit+0x5c>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <SystemInit+0x5c>)
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	4911      	ldr	r1, [pc, #68]	; (8000548 <SystemInit+0x5c>)
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <SystemInit+0x60>)
 8000504:	4013      	ands	r3, r2
 8000506:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <SystemInit+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <SystemInit+0x5c>)
 800050e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <SystemInit+0x5c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <SystemInit+0x5c>)
 800051e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000522:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SystemInit+0x5c>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SystemInit+0x5c>)
 800052a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800052e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <SystemInit+0x5c>)
 8000532:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000536:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000538:	f000 f80c 	bl	8000554 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <SystemInit+0x64>)
 800053e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000542:	609a      	str	r2, [r3, #8]
#endif 
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	f8ff0000 	.word	0xf8ff0000
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000558:	f000 f802 	bl	8000560 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <SetSysClockTo72+0xf8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a39      	ldr	r2, [pc, #228]	; (8000658 <SetSysClockTo72+0xf8>)
 8000574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000578:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800057a:	4b37      	ldr	r3, [pc, #220]	; (8000658 <SetSysClockTo72+0xf8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000582:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d103      	bne.n	8000598 <SetSysClockTo72+0x38>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000596:	d1f0      	bne.n	800057a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <SetSysClockTo72+0xf8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005a4:	2301      	movs	r3, #1
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	e001      	b.n	80005ae <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d14b      	bne.n	800064c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SetSysClockTo72+0xfc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a28      	ldr	r2, [pc, #160]	; (800065c <SetSysClockTo72+0xfc>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <SetSysClockTo72+0xfc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <SetSysClockTo72+0xfc>)
 80005c6:	f023 0303 	bic.w	r3, r3, #3
 80005ca:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SetSysClockTo72+0xfc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <SetSysClockTo72+0xfc>)
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SetSysClockTo72+0xf8>)
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <SetSysClockTo72+0xf8>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <SetSysClockTo72+0xf8>)
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <SetSysClockTo72+0xf8>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <SetSysClockTo72+0xf8>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <SetSysClockTo72+0xf8>)
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <SetSysClockTo72+0xf8>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <SetSysClockTo72+0xf8>)
 80005fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80005fe:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <SetSysClockTo72+0xf8>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <SetSysClockTo72+0xf8>)
 8000606:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800060a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <SetSysClockTo72+0xf8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a11      	ldr	r2, [pc, #68]	; (8000658 <SetSysClockTo72+0xf8>)
 8000612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000616:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000618:	bf00      	nop
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <SetSysClockTo72+0xf8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <SetSysClockTo72+0xf8>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <SetSysClockTo72+0xf8>)
 800062c:	f023 0303 	bic.w	r3, r3, #3
 8000630:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <SetSysClockTo72+0xf8>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <SetSysClockTo72+0xf8>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800063e:	bf00      	nop
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <SetSysClockTo72+0xf8>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f003 030c 	and.w	r3, r3, #12
 8000648:	2b08      	cmp	r3, #8
 800064a:	d1f9      	bne.n	8000640 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40022000 	.word	0x40022000

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff ff44 	bl	80004ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f000 fd75 	bl	8001178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fd5d 	bl	800014c <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800069c:	080011e0 	.word	0x080011e0
  ldr r2, =_sbss
 80006a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a4:	20000434 	.word	0x20000434

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <Bsp_DelayUS+0x40>)
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4613      	mov	r3, r2
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4413      	add	r3, r2
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <Bsp_DelayUS+0x40>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <Bsp_DelayUS+0x40>)
 80006ca:	2205      	movs	r2, #5
 80006cc:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 80006ce:	bf00      	nop
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <Bsp_DelayUS+0x40>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <Bsp_DelayUS+0x40>)
 80006de:	2204      	movs	r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	while(xms--)
 80006f8:	e003      	b.n	8000702 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fe:	f7ff ffd5 	bl	80006ac <Bsp_DelayUS>
	while(xms--)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f6      	bne.n	80006fa <Bsp_DelayMS+0xa>
	}
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 800071a:	f000 f85d 	bl	80007d8 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 800071e:	f000 f8ed 	bl	80008fc <Bsp_SPI_Init>
	//Bsp_I2C_Init();
    
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 800072e:	2101      	movs	r1, #1
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fbe3 	bl	8000efc <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <Bsp_SPI_DMA_Init+0x60>)
 8000738:	f000 f958 	bl	80009ec <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <Bsp_SPI_DMA_Init+0x64>)
 800073e:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <Bsp_SPI_DMA_Init+0x68>)
 8000742:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000744:	2310      	movs	r3, #16
 8000746:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 8000748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074c:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 800075e:	2320      	movs	r3, #32
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <Bsp_SPI_DMA_Init+0x60>)
 8000772:	f000 f9f7 	bl	8000b64 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8000776:	2101      	movs	r1, #1
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <Bsp_SPI_DMA_Init+0x60>)
 800077a:	f000 fa31 	bl	8000be0 <DMA_Cmd>
}
 800077e:	bf00      	nop
 8000780:	3730      	adds	r7, #48	; 0x30
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020030 	.word	0x40020030
 800078c:	4001300c 	.word	0x4001300c
 8000790:	20000028 	.word	0x20000028

08000794 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000798:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800079c:	f000 fa3c 	bl	8000c18 <DMA_GetFlagStatus>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d012      	beq.n	80007cc <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 80007a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80007aa:	f000 fa5d 	bl	8000c68 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f7ff ff7c 	bl	80006ac <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 80007b4:	2101      	movs	r1, #1
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <DMA1_Channel6_IRQHandler+0x3c>)
 80007b8:	f000 fb61 	bl	8000e7e <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 80007bc:	2101      	movs	r1, #1
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <DMA1_Channel6_IRQHandler+0x3c>)
 80007c0:	f000 fb7c 	bl	8000ebc <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 80007c4:	2100      	movs	r1, #0
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <DMA1_Channel6_IRQHandler+0x40>)
 80007c8:	f000 fa0a 	bl	8000be0 <DMA_Cmd>
	}
}	
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40005400 	.word	0x40005400
 80007d4:	4002006c 	.word	0x4002006c

080007d8 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 80007dc:	2101      	movs	r1, #1
 80007de:	2004      	movs	r0, #4
 80007e0:	f000 fbaa 	bl	8000f38 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2009      	movs	r0, #9
 80007e8:	f000 fba6 	bl	8000f38 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <Bsp_GPIO_Init+0x78>)
 80007ee:	2218      	movs	r2, #24
 80007f0:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <Bsp_GPIO_Init+0x78>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <Bsp_GPIO_Init+0x78>)
 80007fa:	22a0      	movs	r2, #160	; 0xa0
 80007fc:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <Bsp_GPIO_Init+0x7c>)
 8000800:	2210      	movs	r2, #16
 8000802:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <Bsp_GPIO_Init+0x7c>)
 8000806:	2203      	movs	r2, #3
 8000808:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <Bsp_GPIO_Init+0x7c>)
 800080c:	2250      	movs	r2, #80	; 0x50
 800080e:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000810:	490f      	ldr	r1, [pc, #60]	; (8000850 <Bsp_GPIO_Init+0x78>)
 8000812:	4811      	ldr	r0, [pc, #68]	; (8000858 <Bsp_GPIO_Init+0x80>)
 8000814:	f000 fa42 	bl	8000c9c <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8000818:	490e      	ldr	r1, [pc, #56]	; (8000854 <Bsp_GPIO_Init+0x7c>)
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <Bsp_GPIO_Init+0x80>)
 800081c:	f000 fa3e 	bl	8000c9c <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <Bsp_GPIO_Init+0x84>)
 8000822:	2248      	movs	r2, #72	; 0x48
 8000824:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <Bsp_GPIO_Init+0x84>)
 8000828:	2203      	movs	r2, #3
 800082a:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <Bsp_GPIO_Init+0x84>)
 800082e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000832:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 8000834:	4909      	ldr	r1, [pc, #36]	; (800085c <Bsp_GPIO_Init+0x84>)
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <Bsp_GPIO_Init+0x80>)
 8000838:	f000 fa30 	bl	8000c9c <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <Bsp_GPIO_Init+0x84>)
 800083e:	2220      	movs	r2, #32
 8000840:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 8000842:	4906      	ldr	r1, [pc, #24]	; (800085c <Bsp_GPIO_Init+0x84>)
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <Bsp_GPIO_Init+0x88>)
 8000846:	f000 fa29 	bl	8000c9c <GPIO_Init>
    #endif
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000428 	.word	0x20000428
 8000854:	2000042c 	.word	0x2000042c
 8000858:	40010800 	.word	0x40010800
 800085c:	20000430 	.word	0x20000430
 8000860:	40010c00 	.word	0x40010c00

08000864 <Bsp_KEY_Probe>:
*参    数:'void' 
*返 回 值:'none' 
*说    明: '返回 0 表示按键按下 返回 1 表示按键释放' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t Bsp_KEY_Probe(u8 key){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
    switch (key)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d83a      	bhi.n	80008ea <Bsp_KEY_Probe+0x86>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <Bsp_KEY_Probe+0x18>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	0800088d 	.word	0x0800088d
 8000880:	080008a5 	.word	0x080008a5
 8000884:	080008bd 	.word	0x080008bd
 8000888:	080008d5 	.word	0x080008d5
    {
        case KEY_UP: return (GPIO_ReadInputDataBit(KEY_UP_PORT,KEY_UP_PIN) == 0); break;   //这里用 == 0 而不直接读取值，有两个好处 向上层屏蔽了按下和没按下的底层逻辑，上层只需要知道 按下为1 未按下0，如果后续出现改动比如 电平0为释放 1为按下 不用对上层做对应的变化，符合分层 对上层屏蔽细节的作用，便于维护 与阅读 （告诉读者 当前针对 0）
 800088c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000890:	4818      	ldr	r0, [pc, #96]	; (80008f4 <Bsp_KEY_Probe+0x90>)
 8000892:	f000 fabf 	bl	8000e14 <GPIO_ReadInputDataBit>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf0c      	ite	eq
 800089c:	2301      	moveq	r3, #1
 800089e:	2300      	movne	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	e023      	b.n	80008ec <Bsp_KEY_Probe+0x88>
        case KEY_DOWN:return (GPIO_ReadInputDataBit(KEY_DOWN_PORT,KEY_DOWN_PIN) == 0); break;
 80008a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <Bsp_KEY_Probe+0x90>)
 80008aa:	f000 fab3 	bl	8000e14 <GPIO_ReadInputDataBit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf0c      	ite	eq
 80008b4:	2301      	moveq	r3, #1
 80008b6:	2300      	movne	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	e017      	b.n	80008ec <Bsp_KEY_Probe+0x88>
        case KEY_SET:return (GPIO_ReadInputDataBit(KEY_SET_PORT,KEY_SET_PIN) == 0);  break;
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <Bsp_KEY_Probe+0x90>)
 80008c2:	f000 faa7 	bl	8000e14 <GPIO_ReadInputDataBit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf0c      	ite	eq
 80008cc:	2301      	moveq	r3, #1
 80008ce:	2300      	movne	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	e00b      	b.n	80008ec <Bsp_KEY_Probe+0x88>
        case KEY_COMFIRM: return (GPIO_ReadInputDataBit(KEY_COMFIRM_PORT,KEY_COMFIRM_PIN) == 0); break;
 80008d4:	2120      	movs	r1, #32
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <Bsp_KEY_Probe+0x94>)
 80008d8:	f000 fa9c 	bl	8000e14 <GPIO_ReadInputDataBit>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	e000      	b.n	80008ec <Bsp_KEY_Probe+0x88>
    }
    return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40010c00 	.word	0x40010c00

080008fc <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8000902:	2101      	movs	r1, #1
 8000904:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000908:	f000 fb16 	bl	8000f38 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <Bsp_SPI_Init+0x60>)
 800090e:	f000 fb6d 	bl	8000fec <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8000912:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000916:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000918:	f44f 7382 	mov.w	r3, #260	; 0x104
 800091c:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 800091e:	2300      	movs	r3, #0
 8000920:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000922:	2300      	movs	r3, #0
 8000924:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000926:	2300      	movs	r3, #0
 8000928:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 800092a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092e:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 8000930:	2338      	movs	r3, #56	; 0x38
 8000932:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000934:	2300      	movs	r3, #0
 8000936:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000938:	2307      	movs	r3, #7
 800093a:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <Bsp_SPI_Init+0x60>)
 8000942:	f000 fb8d 	bl	8001060 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <Bsp_SPI_Init+0x60>)
 8000948:	2202      	movs	r2, #2
 800094a:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 800094c:	2101      	movs	r1, #1
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <Bsp_SPI_Init+0x60>)
 8000950:	f000 fbc9 	bl	80010e6 <SPI_Cmd>
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013000 	.word	0x40013000

08000960 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(u8 TxData)                                   //发送命令
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	u8 retry=0;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <Bsp_SPI_Send_CMD+0x5c>)
 8000972:	f000 fa76 	bl	8000e62 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000976:	e005      	b.n	8000984 <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2bc8      	cmp	r3, #200	; 0xc8
 8000982:	d816      	bhi.n	80009b2 <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000984:	2102      	movs	r1, #2
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <Bsp_SPI_Send_CMD+0x60>)
 8000988:	f000 fbda 	bl	8001140 <SPI_I2S_GetFlagStatus>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f2      	beq.n	8000978 <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 8000992:	2064      	movs	r0, #100	; 0x64
 8000994:	f7ff feac 	bl	80006f0 <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	b29b      	uxth	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <Bsp_SPI_Send_CMD+0x60>)
 80009a0:	f000 fbc0 	bl	8001124 <SPI_I2S_SendData>
	retry=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <Bsp_SPI_Send_CMD+0x5c>)
 80009ac:	f000 fa4b 	bl	8000e46 <GPIO_SetBits>
 80009b0:	e000      	b.n	80009b4 <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 80009b2:	bf00      	nop
}
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40013000 	.word	0x40013000

080009c4 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
   
    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 80009c8:	2110      	movs	r1, #16
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <Bsp_SPI_RES_LOW+0x10>)
 80009cc:	f000 fa49 	bl	8000e62 <GPIO_ResetBits>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010800 	.word	0x40010800

080009d8 <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 80009dc:	2110      	movs	r1, #16
 80009de:	4802      	ldr	r0, [pc, #8]	; (80009e8 <Bsp_SPI_RES_HIGH+0x10>)
 80009e0:	f000 fa31 	bl	8000e46 <GPIO_SetBits>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010800 	.word	0x40010800

080009ec <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80009fc:	4013      	ands	r3, r2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <DMA_DeInit+0x140>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000a22:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <DMA_DeInit+0x144>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a42      	ldr	r2, [pc, #264]	; (8000b30 <DMA_DeInit+0x144>)
 8000a28:	f043 030f 	orr.w	r3, r3, #15
 8000a2c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000a2e:	e077      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <DMA_DeInit+0x148>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000a38:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <DMA_DeInit+0x144>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a3c      	ldr	r2, [pc, #240]	; (8000b30 <DMA_DeInit+0x144>)
 8000a3e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a42:	6053      	str	r3, [r2, #4]
}
 8000a44:	e06c      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a3b      	ldr	r2, [pc, #236]	; (8000b38 <DMA_DeInit+0x14c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d106      	bne.n	8000a5c <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <DMA_DeInit+0x144>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a37      	ldr	r2, [pc, #220]	; (8000b30 <DMA_DeInit+0x144>)
 8000a54:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000a58:	6053      	str	r3, [r2, #4]
}
 8000a5a:	e061      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <DMA_DeInit+0x150>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <DMA_DeInit+0x144>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <DMA_DeInit+0x144>)
 8000a6a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a6e:	6053      	str	r3, [r2, #4]
}
 8000a70:	e056      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <DMA_DeInit+0x154>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <DMA_DeInit+0x144>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	; (8000b30 <DMA_DeInit+0x144>)
 8000a80:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000a84:	6053      	str	r3, [r2, #4]
}
 8000a86:	e04b      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <DMA_DeInit+0x158>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <DMA_DeInit+0x144>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <DMA_DeInit+0x144>)
 8000a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9a:	6053      	str	r3, [r2, #4]
}
 8000a9c:	e040      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a29      	ldr	r2, [pc, #164]	; (8000b48 <DMA_DeInit+0x15c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <DMA_DeInit+0x144>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <DMA_DeInit+0x144>)
 8000aac:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ab0:	6053      	str	r3, [r2, #4]
}
 8000ab2:	e035      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <DMA_DeInit+0x160>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d106      	bne.n	8000aca <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <DMA_DeInit+0x164>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <DMA_DeInit+0x164>)
 8000ac2:	f043 030f 	orr.w	r3, r3, #15
 8000ac6:	6053      	str	r3, [r2, #4]
}
 8000ac8:	e02a      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <DMA_DeInit+0x168>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d106      	bne.n	8000ae0 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <DMA_DeInit+0x164>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <DMA_DeInit+0x164>)
 8000ad8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000adc:	6053      	str	r3, [r2, #4]
}
 8000ade:	e01f      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <DMA_DeInit+0x16c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d106      	bne.n	8000af6 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <DMA_DeInit+0x164>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <DMA_DeInit+0x164>)
 8000aee:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000af2:	6053      	str	r3, [r2, #4]
}
 8000af4:	e014      	b.n	8000b20 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <DMA_DeInit+0x170>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <DMA_DeInit+0x164>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <DMA_DeInit+0x164>)
 8000b04:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b08:	6053      	str	r3, [r2, #4]
}
 8000b0a:	e009      	b.n	8000b20 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <DMA_DeInit+0x174>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d105      	bne.n	8000b20 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <DMA_DeInit+0x164>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <DMA_DeInit+0x164>)
 8000b1a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b1e:	6053      	str	r3, [r2, #4]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40020008 	.word	0x40020008
 8000b30:	40020000 	.word	0x40020000
 8000b34:	4002001c 	.word	0x4002001c
 8000b38:	40020030 	.word	0x40020030
 8000b3c:	40020044 	.word	0x40020044
 8000b40:	40020058 	.word	0x40020058
 8000b44:	4002006c 	.word	0x4002006c
 8000b48:	40020080 	.word	0x40020080
 8000b4c:	40020408 	.word	0x40020408
 8000b50:	40020400 	.word	0x40020400
 8000b54:	4002041c 	.word	0x4002041c
 8000b58:	40020430 	.word	0x40020430
 8000b5c:	40020444 	.word	0x40020444
 8000b60:	40020458 	.word	0x40020458

08000b64 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b82:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000b92:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000baa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60da      	str	r2, [r3, #12]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000bfe:	e006      	b.n	8000c0e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c08:	4013      	ands	r3, r2
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <DMA_GetFlagStatus+0x48>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	e002      	b.n	8000c40 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <DMA_GetFlagStatus+0x4c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40020000 	.word	0x40020000

08000c68 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <DMA_ClearFlag+0x2c>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000c80:	e002      	b.n	8000c88 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <DMA_ClearFlag+0x30>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6053      	str	r3, [r2, #4]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020000 	.word	0x40020000

08000c9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d044      	beq.n	8000d74 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	e038      	b.n	8000d68 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d126      	bne.n	8000d62 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	78db      	ldrb	r3, [r3, #3]
 8000d40:	2b28      	cmp	r3, #40	; 0x28
 8000d42:	d105      	bne.n	8000d50 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000d44:	2201      	movs	r2, #1
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	e008      	b.n	8000d62 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	2b48      	cmp	r3, #72	; 0x48
 8000d56:	d104      	bne.n	8000d62 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	d9c3      	bls.n	8000cf6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d946      	bls.n	8000e0a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	e03a      	b.n	8000dfe <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d127      	bne.n	8000df8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000dae:	220f      	movs	r2, #15
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	2b28      	cmp	r3, #40	; 0x28
 8000dd6:	d105      	bne.n	8000de4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	2201      	movs	r2, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	2b48      	cmp	r3, #72	; 0x48
 8000dea:	d105      	bne.n	8000df8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	3308      	adds	r3, #8
 8000df0:	2201      	movs	r2, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2b07      	cmp	r3, #7
 8000e02:	d9c1      	bls.n	8000d88 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	605a      	str	r2, [r3, #4]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e001      	b.n	8000e3a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	611a      	str	r2, [r3, #16]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	615a      	str	r2, [r3, #20]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8000ea0:	e007      	b.n	8000eb2 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	801a      	strh	r2, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d008      	beq.n	8000ee0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000ede:	e007      	b.n	8000ef0 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	801a      	strh	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <RCC_AHBPeriphClockCmd+0x38>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <RCC_AHBPeriphClockCmd+0x38>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000f1a:	e006      	b.n	8000f2a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <RCC_AHBPeriphClockCmd+0x38>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4903      	ldr	r1, [pc, #12]	; (8000f34 <RCC_AHBPeriphClockCmd+0x38>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	614b      	str	r3, [r1, #20]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000

08000f38 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <RCC_APB2PeriphClockCmd+0x38>)
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <RCC_APB2PeriphClockCmd+0x38>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f56:	e006      	b.n	8000f66 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <RCC_APB2PeriphClockCmd+0x38>)
 8000f5a:	699a      	ldr	r2, [r3, #24]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4903      	ldr	r1, [pc, #12]	; (8000f70 <RCC_APB2PeriphClockCmd+0x38>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	618b      	str	r3, [r1, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000

08000f74 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <RCC_APB2PeriphResetCmd+0x38>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <RCC_APB2PeriphResetCmd+0x38>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000f92:	e006      	b.n	8000fa2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <RCC_APB2PeriphResetCmd+0x38>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4903      	ldr	r1, [pc, #12]	; (8000fac <RCC_APB2PeriphResetCmd+0x38>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000

08000fb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <RCC_APB1PeriphResetCmd+0x38>)
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <RCC_APB1PeriphResetCmd+0x38>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000fce:	e006      	b.n	8000fde <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <RCC_APB1PeriphResetCmd+0x38>)
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <RCC_APB1PeriphResetCmd+0x38>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	610b      	str	r3, [r1, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <SPI_I2S_DeInit+0x68>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d10a      	bne.n	8001012 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001002:	f7ff ffb7 	bl	8000f74 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001006:	2100      	movs	r1, #0
 8001008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800100c:	f7ff ffb2 	bl	8000f74 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001010:	e01c      	b.n	800104c <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <SPI_I2S_DeInit+0x6c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10a      	bne.n	8001030 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800101a:	2101      	movs	r1, #1
 800101c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001020:	f7ff ffc6 	bl	8000fb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001024:	2100      	movs	r1, #0
 8001026:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800102a:	f7ff ffc1 	bl	8000fb0 <RCC_APB1PeriphResetCmd>
}
 800102e:	e00d      	b.n	800104c <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SPI_I2S_DeInit+0x70>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d109      	bne.n	800104c <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001038:	2101      	movs	r1, #1
 800103a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800103e:	f7ff ffb7 	bl	8000fb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001042:	2100      	movs	r1, #0
 8001044:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001048:	f7ff ffb2 	bl	8000fb0 <RCC_APB1PeriphResetCmd>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013000 	.word	0x40013000
 8001058:	40003800 	.word	0x40003800
 800105c:	40003c00 	.word	0x40003c00

08001060 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800107a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	4313      	orrs	r3, r2
 8001086:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800108c:	4313      	orrs	r3, r2
 800108e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001094:	4313      	orrs	r3, r2
 8001096:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800109c:	4313      	orrs	r3, r2
 800109e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8b9b      	ldrh	r3, [r3, #28]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	8a1a      	ldrh	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	821a      	strh	r2, [r3, #16]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001108:	e007      	b.n	800111a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	801a      	strh	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	819a      	strh	r2, [r3, #12]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	891b      	ldrh	r3, [r3, #8]
 8001154:	b29a      	uxth	r2, r3
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	4013      	ands	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e001      	b.n	800116a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <__libc_init_array>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	2600      	movs	r6, #0
 800117c:	4d0c      	ldr	r5, [pc, #48]	; (80011b0 <__libc_init_array+0x38>)
 800117e:	4c0d      	ldr	r4, [pc, #52]	; (80011b4 <__libc_init_array+0x3c>)
 8001180:	1b64      	subs	r4, r4, r5
 8001182:	10a4      	asrs	r4, r4, #2
 8001184:	42a6      	cmp	r6, r4
 8001186:	d109      	bne.n	800119c <__libc_init_array+0x24>
 8001188:	f000 f81a 	bl	80011c0 <_init>
 800118c:	2600      	movs	r6, #0
 800118e:	4d0a      	ldr	r5, [pc, #40]	; (80011b8 <__libc_init_array+0x40>)
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <__libc_init_array+0x44>)
 8001192:	1b64      	subs	r4, r4, r5
 8001194:	10a4      	asrs	r4, r4, #2
 8001196:	42a6      	cmp	r6, r4
 8001198:	d105      	bne.n	80011a6 <__libc_init_array+0x2e>
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a0:	4798      	blx	r3
 80011a2:	3601      	adds	r6, #1
 80011a4:	e7ee      	b.n	8001184 <__libc_init_array+0xc>
 80011a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011aa:	4798      	blx	r3
 80011ac:	3601      	adds	r6, #1
 80011ae:	e7f2      	b.n	8001196 <__libc_init_array+0x1e>
 80011b0:	080011d8 	.word	0x080011d8
 80011b4:	080011d8 	.word	0x080011d8
 80011b8:	080011d8 	.word	0x080011d8
 80011bc:	080011dc 	.word	0x080011dc

080011c0 <_init>:
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c2:	bf00      	nop
 80011c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c6:	bc08      	pop	{r3}
 80011c8:	469e      	mov	lr, r3
 80011ca:	4770      	bx	lr

080011cc <_fini>:
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	bf00      	nop
 80011d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d2:	bc08      	pop	{r3}
 80011d4:	469e      	mov	lr, r3
 80011d6:	4770      	bx	lr
