
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080026e8 	.word	0x080026e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	080026e8 	.word	0x080026e8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <main>:
// } 
 
// FILE __stdout;

int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	// uint8_t MID;
	// uint16_t DID;
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
	Bsp_Init();
 8000380:	f000 fcb4 	bl	8000cec <Bsp_Init>
 	GUI_SPI_Init(); //初始化测试下来要4s钟有点长
 8000384:	f000 f934 	bl	80005f0 <GUI_SPI_Init>
	System_Init();
 8000388:	f000 fb3c 	bl	8000a04 <System_Init>
	// 	GUI_CLEAR_SCREEN();
	// }
	// u32 i =0,sum=0;
	while (1)
	{	
		GUI_Test();
 800038c:	f000 fa48 	bl	8000820 <GUI_Test>
 8000390:	e7fc      	b.n	800038c <main+0x10>

08000392 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <MemManage_Handler+0x4>

080003aa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <BusFault_Handler+0x4>

080003b0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <UsageFault_Handler+0x4>

080003b6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
	...

080003e8 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 80003ee:	2300      	movs	r3, #0
 80003f0:	71bb      	strb	r3, [r7, #6]
 80003f2:	e013      	b.n	800041c <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 80003f4:	2300      	movs	r3, #0
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	e00a      	b.n	8000410 <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	490c      	ldr	r1, [pc, #48]	; (8000430 <GUI_CLEAR_SCREEN+0x48>)
 8000400:	01d2      	lsls	r2, r2, #7
 8000402:	440a      	add	r2, r1
 8000404:	4413      	add	r3, r2
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3301      	adds	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	d9f1      	bls.n	80003fa <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	3301      	adds	r3, #1
 800041a:	71bb      	strb	r3, [r7, #6]
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	2b07      	cmp	r3, #7
 8000420:	d9e8      	bls.n	80003f4 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	2000014c 	.word	0x2000014c

08000434 <GUI_Show_Image>:
			Image: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Show_Image(int16_t X, int16_t Y,uint8_t Height,uint8_t Width, const uint8_t *Image){
 8000434:	b490      	push	{r4, r7}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	4604      	mov	r4, r0
 800043c:	4608      	mov	r0, r1
 800043e:	4611      	mov	r1, r2
 8000440:	461a      	mov	r2, r3
 8000442:	4623      	mov	r3, r4
 8000444:	80fb      	strh	r3, [r7, #6]
 8000446:	4603      	mov	r3, r0
 8000448:	80bb      	strh	r3, [r7, #4]
 800044a:	460b      	mov	r3, r1
 800044c:	70fb      	strb	r3, [r7, #3]
 800044e:	4613      	mov	r3, r2
 8000450:	70bb      	strb	r3, [r7, #2]
	uint8_t	across_line = (Height-1) / 8 + 1 ; 			//先看占几行
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	3b01      	subs	r3, #1
 8000456:	2b00      	cmp	r3, #0
 8000458:	da00      	bge.n	800045c <GUI_Show_Image+0x28>
 800045a:	3307      	adds	r3, #7
 800045c:	10db      	asrs	r3, r3, #3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	3301      	adds	r3, #1
 8000462:	727b      	strb	r3, [r7, #9]
	int16_t Page, shift;
	for (uint8_t j = 0; j < across_line; j++)
 8000464:	2300      	movs	r3, #0
 8000466:	72fb      	strb	r3, [r7, #11]
 8000468:	e0b5      	b.n	80005d6 <GUI_Show_Image+0x1a2>
	{	
		for (uint8_t i = 0; i < Width ; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	72bb      	strb	r3, [r7, #10]
 800046e:	e0aa      	b.n	80005c6 <GUI_Show_Image+0x192>
		{	
			if ((X + i) > 127 || (X + i) < 0)
 8000470:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000474:	7abb      	ldrb	r3, [r7, #10]
 8000476:	4413      	add	r3, r2
 8000478:	2b7f      	cmp	r3, #127	; 0x7f
 800047a:	f300 80a0 	bgt.w	80005be <GUI_Show_Image+0x18a>
 800047e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000482:	7abb      	ldrb	r3, [r7, #10]
 8000484:	4413      	add	r3, r2
 8000486:	2b00      	cmp	r3, #0
 8000488:	f2c0 8099 	blt.w	80005be <GUI_Show_Image+0x18a>
			{
				continue;
			}
			shift = Y % 8;
 800048c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000490:	425a      	negs	r2, r3
 8000492:	f003 0307 	and.w	r3, r3, #7
 8000496:	f002 0207 	and.w	r2, r2, #7
 800049a:	bf58      	it	pl
 800049c:	4253      	negpl	r3, r2
 800049e:	81bb      	strh	r3, [r7, #12]
			Page = Y / 8;
 80004a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	da00      	bge.n	80004aa <GUI_Show_Image+0x76>
 80004a8:	3307      	adds	r3, #7
 80004aa:	10db      	asrs	r3, r3, #3
 80004ac:	81fb      	strh	r3, [r7, #14]

			if (Y < 0)   // Y<-8 的情况可以保证 Page+j<0(j ==0 ) 但是 -8<Y<0的情况会进去像素赋值，而j<0导致i+width出现不准确的情况，我们只需要需要的部分就好了
 80004ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da07      	bge.n	80004c6 <GUI_Show_Image+0x92>
			{
				Page -= 1;
 80004b6:	89fb      	ldrh	r3, [r7, #14]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	81fb      	strh	r3, [r7, #14]
				shift += 8;
 80004be:	89bb      	ldrh	r3, [r7, #12]
 80004c0:	3308      	adds	r3, #8
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	81bb      	strh	r3, [r7, #12]
			}
			if ((Page + j) >= 0 && (Page + j) < 8)
 80004c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	4413      	add	r3, r2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	db34      	blt.n	800053c <GUI_Show_Image+0x108>
 80004d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004d6:	7afb      	ldrb	r3, [r7, #11]
 80004d8:	4413      	add	r3, r2
 80004da:	2b07      	cmp	r3, #7
 80004dc:	dc2e      	bgt.n	800053c <GUI_Show_Image+0x108>
			{
				GUI_DISPLAY_BUF[Page + j][X + i] |= Image[i + Width*j] << (shift);
 80004de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	441a      	add	r2, r3
 80004e6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80004ea:	7abb      	ldrb	r3, [r7, #10]
 80004ec:	440b      	add	r3, r1
 80004ee:	493f      	ldr	r1, [pc, #252]	; (80005ec <GUI_Show_Image+0x1b8>)
 80004f0:	01d2      	lsls	r2, r2, #7
 80004f2:	440a      	add	r2, r1
 80004f4:	4413      	add	r3, r2
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b25a      	sxtb	r2, r3
 80004fa:	7ab9      	ldrb	r1, [r7, #10]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	7af8      	ldrb	r0, [r7, #11]
 8000500:	fb00 f303 	mul.w	r3, r0, r3
 8000504:	440b      	add	r3, r1
 8000506:	4619      	mov	r1, r3
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	440b      	add	r3, r1
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	b25b      	sxtb	r3, r3
 800051a:	4313      	orrs	r3, r2
 800051c:	b258      	sxtb	r0, r3
 800051e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	441a      	add	r2, r3
 8000526:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800052a:	7abb      	ldrb	r3, [r7, #10]
 800052c:	440b      	add	r3, r1
 800052e:	b2c0      	uxtb	r0, r0
 8000530:	492e      	ldr	r1, [pc, #184]	; (80005ec <GUI_Show_Image+0x1b8>)
 8000532:	01d2      	lsls	r2, r2, #7
 8000534:	440a      	add	r2, r1
 8000536:	4413      	add	r3, r2
 8000538:	4602      	mov	r2, r0
 800053a:	701a      	strb	r2, [r3, #0]
			}
			if ((Page + j + 1) >= 0 && (Page + j + 1) < 8)
 800053c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000540:	7afb      	ldrb	r3, [r7, #11]
 8000542:	4413      	add	r3, r2
 8000544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000548:	db3a      	blt.n	80005c0 <GUI_Show_Image+0x18c>
 800054a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	4413      	add	r3, r2
 8000552:	2b06      	cmp	r3, #6
 8000554:	dc34      	bgt.n	80005c0 <GUI_Show_Image+0x18c>
			{
				GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Image[i + Width*j] >> (8-(shift));
 8000556:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	4413      	add	r3, r2
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000564:	7abb      	ldrb	r3, [r7, #10]
 8000566:	440b      	add	r3, r1
 8000568:	4920      	ldr	r1, [pc, #128]	; (80005ec <GUI_Show_Image+0x1b8>)
 800056a:	01d2      	lsls	r2, r2, #7
 800056c:	440a      	add	r2, r1
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b25a      	sxtb	r2, r3
 8000574:	7ab9      	ldrb	r1, [r7, #10]
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	7af8      	ldrb	r0, [r7, #11]
 800057a:	fb00 f303 	mul.w	r3, r0, r3
 800057e:	440b      	add	r3, r1
 8000580:	4619      	mov	r1, r3
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	440b      	add	r3, r1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800058e:	f1c3 0308 	rsb	r3, r3, #8
 8000592:	fa41 f303 	asr.w	r3, r1, r3
 8000596:	b25b      	sxtb	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b258      	sxtb	r0, r3
 800059c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	4413      	add	r3, r2
 80005a4:	1c5a      	adds	r2, r3, #1
 80005a6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005aa:	7abb      	ldrb	r3, [r7, #10]
 80005ac:	440b      	add	r3, r1
 80005ae:	b2c0      	uxtb	r0, r0
 80005b0:	490e      	ldr	r1, [pc, #56]	; (80005ec <GUI_Show_Image+0x1b8>)
 80005b2:	01d2      	lsls	r2, r2, #7
 80005b4:	440a      	add	r2, r1
 80005b6:	4413      	add	r3, r2
 80005b8:	4602      	mov	r2, r0
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e000      	b.n	80005c0 <GUI_Show_Image+0x18c>
				continue;
 80005be:	bf00      	nop
		for (uint8_t i = 0; i < Width ; i++)
 80005c0:	7abb      	ldrb	r3, [r7, #10]
 80005c2:	3301      	adds	r3, #1
 80005c4:	72bb      	strb	r3, [r7, #10]
 80005c6:	7aba      	ldrb	r2, [r7, #10]
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	f4ff af50 	bcc.w	8000470 <GUI_Show_Image+0x3c>
	for (uint8_t j = 0; j < across_line; j++)
 80005d0:	7afb      	ldrb	r3, [r7, #11]
 80005d2:	3301      	adds	r3, #1
 80005d4:	72fb      	strb	r3, [r7, #11]
 80005d6:	7afa      	ldrb	r2, [r7, #11]
 80005d8:	7a7b      	ldrb	r3, [r7, #9]
 80005da:	429a      	cmp	r2, r3
 80005dc:	f4ff af45 	bcc.w	800046a <GUI_Show_Image+0x36>
			}
		}
	}

}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc90      	pop	{r4, r7}
 80005ea:	4770      	bx	lr
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//Bsp_DelayMS(1000); //1000

	Bsp_SPI_RES_LOW();
 80005f4:	f000 fcde 	bl	8000fb4 <Bsp_SPI_RES_LOW>
	//Bsp_DelayMS(100);  //100
	Bsp_SPI_RES_HIGH();
 80005f8:	f000 fce6 	bl	8000fc8 <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 80005fc:	20ae      	movs	r0, #174	; 0xae
 80005fe:	f000 fcab 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 8000602:	20d5      	movs	r0, #213	; 0xd5
 8000604:	f000 fca8 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xf0);//[3:0],分频因子;[7:4],震荡频率
 8000608:	20f0      	movs	r0, #240	; 0xf0
 800060a:	f000 fca5 	bl	8000f58 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xd9);//设置时钟分频因子,震荡频率
 800060e:	20d9      	movs	r0, #217	; 0xd9
 8000610:	f000 fca2 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x11);//[3:0],分频因子;[7:4],震荡频率
 8000614:	2011      	movs	r0, #17
 8000616:	f000 fc9f 	bl	8000f58 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x81);//设置对比度
 800061a:	2081      	movs	r0, #129	; 0x81
 800061c:	f000 fc9c 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 8000620:	207f      	movs	r0, #127	; 0x7f
 8000622:	f000 fc99 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 8000626:	208d      	movs	r0, #141	; 0x8d
 8000628:	f000 fc96 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 800062c:	2014      	movs	r0, #20
 800062e:	f000 fc93 	bl	8000f58 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 8000632:	2020      	movs	r0, #32
 8000634:	f000 fc90 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fc8d 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 800063e:	2021      	movs	r0, #33	; 0x21
 8000640:	f000 fc8a 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fc87 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 800064a:	207f      	movs	r0, #127	; 0x7f
 800064c:	f000 fc84 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 8000650:	2022      	movs	r0, #34	; 0x22
 8000652:	f000 fc81 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fc7e 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 800065c:	2007      	movs	r0, #7
 800065e:	f000 fc7b 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 8000662:	20c9      	movs	r0, #201	; 0xc9
 8000664:	f000 fc78 	bl	8000f58 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 8000668:	20a1      	movs	r0, #161	; 0xa1
 800066a:	f000 fc75 	bl	8000f58 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 800066e:	20a4      	movs	r0, #164	; 0xa4
 8000670:	f000 fc72 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 8000674:	20a6      	movs	r0, #166	; 0xa6
 8000676:	f000 fc6f 	bl	8000f58 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 800067a:	20af      	movs	r0, #175	; 0xaf
 800067c:	f000 fc6c 	bl	8000f58 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x56);
 8000680:	2056      	movs	r0, #86	; 0x56
 8000682:	f000 fc69 	bl	8000f58 <Bsp_SPI_Send_CMD>
	//Bsp_DelayMS(100);
	Bsp_SPI_DMA_Init();//DMA初始化
 8000686:	f000 fb3b 	bl	8000d00 <Bsp_SPI_DMA_Init>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <GUI_Map_Chinese_Char_By_Index>:
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
		}
	}
}

void GUI_Map_Chinese_Char_By_Index(char *String,uint8_t *Index){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	
	for (size_t j = 0; strcmp(OLED_Test[j].Index,"") != 0; j++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e025      	b.n	80006ec <GUI_Map_Chinese_Char_By_Index+0x5c>
	{
		if (strcmp(String,OLED_Test[j].Index) == 0 )
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	4613      	mov	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4413      	add	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	3320      	adds	r3, #32
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <GUI_Map_Chinese_Char_By_Index+0x7c>)
 80006ae:	4413      	add	r3, r2
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fd4a 	bl	800014c <strcmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d113      	bne.n	80006e6 <GUI_Map_Chinese_Char_By_Index+0x56>
		{
			GUI_Show_Image(0+16*(*Index),0,16,16,OLED_Test[j].CellMatrix);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b218      	sxth	r0, r3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <GUI_Map_Chinese_Char_By_Index+0x7c>)
 80006d6:	4413      	add	r3, r2
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2310      	movs	r3, #16
 80006dc:	2210      	movs	r2, #16
 80006de:	2100      	movs	r1, #0
 80006e0:	f7ff fea8 	bl	8000434 <GUI_Show_Image>
			break;
 80006e4:	e00e      	b.n	8000704 <GUI_Map_Chinese_Char_By_Index+0x74>
	for (size_t j = 0; strcmp(OLED_Test[j].Index,"") != 0; j++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	3320      	adds	r3, #32
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <GUI_Map_Chinese_Char_By_Index+0x7c>)
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1ce      	bne.n	80006a0 <GUI_Map_Chinese_Char_By_Index+0x10>
		}
		
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08002788 	.word	0x08002788

08000710 <utf_8_Chinese_Char_Recognize>:

char *utf_8_Chinese_Char_Recognize(char *String,uint8_t *Index){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	static char SingleChar[4];
	if (String[0] == '\0')
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <utf_8_Chinese_Char_Recognize+0x16>
	{
		return Flase;
 8000722:	2300      	movs	r3, #0
 8000724:	e04e      	b.n	80007c4 <utf_8_Chinese_Char_Recognize+0xb4>
	}
	
	SingleChar[0] = String[*Index] ;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
 8000734:	701a      	strb	r2, [r3, #0]
	SingleChar[1] = String[++*Index];
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
 8000750:	705a      	strb	r2, [r3, #1]
	SingleChar[2] = String[++*Index];
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
 800076c:	709a      	strb	r2, [r3, #2]
	switch (String[*Index-2] & 0xF0)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3b02      	subs	r3, #2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800077e:	2be0      	cmp	r3, #224	; 0xe0
 8000780:	d002      	beq.n	8000788 <utf_8_Chinese_Char_Recognize+0x78>
 8000782:	2bf0      	cmp	r3, #240	; 0xf0
 8000784:	d004      	beq.n	8000790 <utf_8_Chinese_Char_Recognize+0x80>
 8000786:	e012      	b.n	80007ae <utf_8_Chinese_Char_Recognize+0x9e>
	{
		case 0xE0:
			SingleChar[3] = 0;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	70da      	strb	r2, [r3, #3]
			break;
 800078e:	e012      	b.n	80007b6 <utf_8_Chinese_Char_Recognize+0xa6>
		case 0xF0:
			SingleChar[3] = String[++*Index];
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
 80007aa:	70da      	strb	r2, [r3, #3]
			break;
 80007ac:	e003      	b.n	80007b6 <utf_8_Chinese_Char_Recognize+0xa6>
		default:
			#ifdef Debug_mode
				printf("error code 25 : error font format ");
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <utf_8_Chinese_Char_Recognize+0xc0>)
 80007b0:	f001 f8ac 	bl	800190c <iprintf>
			#endif
			break;
 80007b4:	bf00      	nop
	}
	++*Index;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	701a      	strb	r2, [r3, #0]
	return SingleChar;
 80007c2:	4b02      	ldr	r3, [pc, #8]	; (80007cc <utf_8_Chinese_Char_Recognize+0xbc>)
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000140 	.word	0x20000140
 80007d0:	08002764 	.word	0x08002764

080007d4 <Transfer_Encoding>:
*参    数:'format ： 想要输出的字符串' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Transfer_Encoding(char *String){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	char *SingleChar;
	uint8_t Index = 0 ,Count = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	72fb      	strb	r3, [r7, #11]
 80007e0:	2300      	movs	r3, #0
 80007e2:	72bb      	strb	r3, [r7, #10]
	
	while (String[Index] != '\0')
 80007e4:	e010      	b.n	8000808 <Transfer_Encoding+0x34>
	{	
		SingleChar = utf_8_Chinese_Char_Recognize(String,&Index);
 80007e6:	f107 030b 	add.w	r3, r7, #11
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff8f 	bl	8000710 <utf_8_Chinese_Char_Recognize>
 80007f2:	60f8      	str	r0, [r7, #12]
		GUI_Map_Chinese_Char_By_Index(SingleChar,&Count);
 80007f4:	f107 030a 	add.w	r3, r7, #10
 80007f8:	4619      	mov	r1, r3
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff ff48 	bl	8000690 <GUI_Map_Chinese_Char_By_Index>
		Count++;
 8000800:	7abb      	ldrb	r3, [r7, #10]
 8000802:	3301      	adds	r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	72bb      	strb	r3, [r7, #10]
	while (String[Index] != '\0')
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1e7      	bne.n	80007e6 <Transfer_Encoding+0x12>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <GUI_Test>:

void GUI_Test(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	// GUI_Show_Image(0,0,16,16,OLED_Test[0].CellMatrix);
	// 	GUI_Show_Image(0,0+16,16,16,OLED_Test[1].CellMatrix);
	// 	GUI_Show_Image(0,0+32,16,16,OLED_Test[2].CellMatrix);
	// 	GUI_Show_Image(0,0+48,16,16,OLED_Test[3].CellMatrix);
	Transfer_Encoding(Chinese_Map[0].Chinese_char);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <GUI_Test+0x18>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ffd3 	bl	80007d4 <Transfer_Encoding>
			//GUI_Dispaly_Chinese_matric(0,0,16,16,4,OLED_Test);	
	//Bsp_DelayS(5);
	GUI_CLEAR_SCREEN();
 800082e:	f7ff fddb 	bl	80003e8 <GUI_CLEAR_SCREEN>
	//GUI_Display_OFF();
	
	//GUI_Display_ON();
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000

0800083c <GUI_Shift_Menu>:
*参    数:'' 
*返 回 值:'' 
*说    明: '每次按键按完才能调用一次，不能频繁调用' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Shift_Menu(uint8_t currentpage,uint8_t targetpage){      //用结构体传参
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	u8 base_x = 42,	Delta_x = 44;
 800084c:	232a      	movs	r3, #42	; 0x2a
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	232c      	movs	r3, #44	; 0x2c
 8000852:	73bb      	strb	r3, [r7, #14]
	u8 base_y = 18; //Delta_y = 7
 8000854:	2312      	movs	r3, #18
 8000856:	737b      	strb	r3, [r7, #13]
	if (currentpage == SYSTEM_MAIN_PAGE)//处于ready状态
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 80ad 	bne.w	80009ba <GUI_Shift_Menu+0x17e>
	{
		switch (targetpage)
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	2b09      	cmp	r3, #9
 8000864:	f200 80c1 	bhi.w	80009ea <GUI_Shift_Menu+0x1ae>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <GUI_Shift_Menu+0x34>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000899 	.word	0x08000899
 8000874:	080009eb 	.word	0x080009eb
 8000878:	080009eb 	.word	0x080009eb
 800087c:	08000899 	.word	0x08000899
 8000880:	080009eb 	.word	0x080009eb
 8000884:	080009eb 	.word	0x080009eb
 8000888:	080008f7 	.word	0x080008f7
 800088c:	080009eb 	.word	0x080009eb
 8000890:	080009eb 	.word	0x080009eb
 8000894:	08000959 	.word	0x08000959
		{
			case SYSTEM_MAIN_PAGE:;
			case SYSTEM_TRAIN_MENU_SELECET_PAGE:
				GUI_MainPage.mid_icon.target_x =  base_x;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd16 	bl	80002cc <__aeabi_ui2f>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a55      	ldr	r2, [pc, #340]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008a4:	6193      	str	r3, [r2, #24]
				GUI_MainPage.left_icon.target_x = base_x - Delta_x ;
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd11 	bl	80002d4 <__aeabi_i2f>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a50      	ldr	r2, [pc, #320]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008b6:	6093      	str	r3, [r2, #8]
				GUI_MainPage.right_icon.target_x = base_x + Delta_x ;
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	4413      	add	r3, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fd08 	bl	80002d4 <__aeabi_i2f>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a4c      	ldr	r2, [pc, #304]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008c8:	6293      	str	r3, [r2, #40]	; 0x28

				GUI_MainPage.mid_icon.target_y = base_y; 
 80008ca:	7b7b      	ldrb	r3, [r7, #13]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fcfd 	bl	80002cc <__aeabi_ui2f>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a48      	ldr	r2, [pc, #288]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008d6:	61d3      	str	r3, [r2, #28]
				GUI_MainPage.left_icon.target_y = base_y ;
 80008d8:	7b7b      	ldrb	r3, [r7, #13]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fcf6 	bl	80002cc <__aeabi_ui2f>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a45      	ldr	r2, [pc, #276]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008e4:	60d3      	str	r3, [r2, #12]
				GUI_MainPage.right_icon.target_y = base_y ;
 80008e6:	7b7b      	ldrb	r3, [r7, #13]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fcef 	bl	80002cc <__aeabi_ui2f>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80008f2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80008f4:	e07c      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
			case SYSTEM_EDIT_MENU_SELECT_PAGE:
				GUI_MainPage.mid_icon.target_x =  base_x + Delta_x;
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	4413      	add	r3, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fce9 	bl	80002d4 <__aeabi_i2f>
 8000902:	4603      	mov	r3, r0
 8000904:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000906:	6193      	str	r3, [r2, #24]
				GUI_MainPage.left_icon.target_x = base_x - Delta_x + Delta_x;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fce2 	bl	80002d4 <__aeabi_i2f>
 8000910:	4603      	mov	r3, r0
 8000912:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000914:	6093      	str	r3, [r2, #8]
				GUI_MainPage.right_icon.target_x = base_x + Delta_x + Delta_x;
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	441a      	add	r2, r3
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	4413      	add	r3, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fcd7 	bl	80002d4 <__aeabi_i2f>
 8000926:	4603      	mov	r3, r0
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 800092a:	6293      	str	r3, [r2, #40]	; 0x28

				GUI_MainPage.mid_icon.target_y = base_y; 
 800092c:	7b7b      	ldrb	r3, [r7, #13]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fccc 	bl	80002cc <__aeabi_ui2f>
 8000934:	4603      	mov	r3, r0
 8000936:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000938:	61d3      	str	r3, [r2, #28]
				GUI_MainPage.left_icon.target_y = base_y ;
 800093a:	7b7b      	ldrb	r3, [r7, #13]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fcc5 	bl	80002cc <__aeabi_ui2f>
 8000942:	4603      	mov	r3, r0
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000946:	60d3      	str	r3, [r2, #12]
				GUI_MainPage.right_icon.target_y = base_y ;break;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fcbe 	bl	80002cc <__aeabi_ui2f>
 8000950:	4603      	mov	r3, r0
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000954:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000956:	e04b      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
			case SYSTEM_CONFIG_PAGE:
				GUI_MainPage.mid_icon.target_x =  base_x - Delta_x;
 8000958:	7bfa      	ldrb	r2, [r7, #15]
 800095a:	7bbb      	ldrb	r3, [r7, #14]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fcb8 	bl	80002d4 <__aeabi_i2f>
 8000964:	4603      	mov	r3, r0
 8000966:	4a24      	ldr	r2, [pc, #144]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 8000968:	6193      	str	r3, [r2, #24]
				GUI_MainPage.left_icon.target_x = base_x - Delta_x - Delta_x ;
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fcad 	bl	80002d4 <__aeabi_i2f>
 800097a:	4603      	mov	r3, r0
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 800097e:	6093      	str	r3, [r2, #8]
				GUI_MainPage.right_icon.target_x = base_x + Delta_x - Delta_x;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fca6 	bl	80002d4 <__aeabi_i2f>
 8000988:	4603      	mov	r3, r0
 800098a:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 800098c:	6293      	str	r3, [r2, #40]	; 0x28

				GUI_MainPage.mid_icon.target_y = base_y; 
 800098e:	7b7b      	ldrb	r3, [r7, #13]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc9b 	bl	80002cc <__aeabi_ui2f>
 8000996:	4603      	mov	r3, r0
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 800099a:	61d3      	str	r3, [r2, #28]
				GUI_MainPage.left_icon.target_y = base_y ;
 800099c:	7b7b      	ldrb	r3, [r7, #13]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fc94 	bl	80002cc <__aeabi_ui2f>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80009a8:	60d3      	str	r3, [r2, #12]
				GUI_MainPage.right_icon.target_y = base_y ;break;
 80009aa:	7b7b      	ldrb	r3, [r7, #13]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc8d 	bl	80002cc <__aeabi_ui2f>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <GUI_Shift_Menu+0x1bc>)
 80009b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b8:	e01a      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
			default:
				break;
		}
	}else if (currentpage == SYSTEM_TRAIN_MENU_SELECET_PAGE)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d10e      	bne.n	80009de <GUI_Shift_Menu+0x1a2>
	{
		switch (targetpage)
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	3b03      	subs	r3, #3
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d813      	bhi.n	80009f0 <GUI_Shift_Menu+0x1b4>
		{
			case SYSTEM_TRAIN_MENU_SELECET_PAGE:
			case SYSTEM_START_TRAIN_PAGE:
				GUI_TrainMenuSelectPage.chosen_obj.target_y = SystemCtrl.gui_focus_coord *16;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <GUI_Shift_Menu+0x1c0>)
 80009ca:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc7f 	bl	80002d4 <__aeabi_i2f>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <GUI_Shift_Menu+0x1c4>)
 80009da:	60d3      	str	r3, [r2, #12]
				break;
 80009dc:	e008      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
		}
	}else if (currentpage == SYSTEM_EDIT_MENU_SELECT_PAGE)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d104      	bne.n	80009ee <GUI_Shift_Menu+0x1b2>
	{
		switch (targetpage)
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	2b07      	cmp	r3, #7
			case SYSTEM_EDIT_MOVES_SELECT_PAGE:
				/* code */
				break;
			
			default:
				break;
 80009e8:	e002      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
				break;
 80009ea:	bf00      	nop
 80009ec:	e000      	b.n	80009f0 <GUI_Shift_Menu+0x1b4>
		}
	}
 80009ee:	bf00      	nop
	// 		// 	break;
	// 		default:
	// 		break;
	// 	}	
	
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000c0 	.word	0x200000c0
 80009fc:	20000144 	.word	0x20000144
 8000a00:	20000120 	.word	0x20000120

08000a04 <System_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '页面初始化 设置默认页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Init(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    SystemCtrl.currentpage = SYSTEM_MAIN_PAGE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <System_Init+0x30>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	705a      	strb	r2, [r3, #1]
    SystemCtrl.targetpage = SYSTEM_MAIN_PAGE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <System_Init+0x30>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
    SystemCtrl.gui_focus_coord = 1; 
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <System_Init+0x30>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	70da      	strb	r2, [r3, #3]
    GUI_CLEAR_SCREEN();
 8000a1a:	f7ff fce5 	bl	80003e8 <GUI_CLEAR_SCREEN>
    GUI_Shift_Menu( SystemCtrl.currentpage,SystemCtrl.targetpage);
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <System_Init+0x30>)
 8000a20:	785b      	ldrb	r3, [r3, #1]
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <System_Init+0x30>)
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff07 	bl	800083c <GUI_Shift_Menu>
};
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000144 	.word	0x20000144

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SystemInit+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <SystemInit+0x5c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SystemInit+0x5c>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SystemInit+0x5c>)
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <SystemInit+0x60>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <SystemInit+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <SystemInit+0x5c>)
 8000a5a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <SystemInit+0x5c>)
 8000a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SystemInit+0x5c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SystemInit+0x5c>)
 8000a76:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a7a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SystemInit+0x5c>)
 8000a7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a82:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a84:	f000 f80c 	bl	8000aa0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SystemInit+0x64>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	f8ff0000 	.word	0xf8ff0000
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000aa4:	f000 f802 	bl	8000aac <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d103      	bne.n	8000ae4 <SetSysClockTo72+0x38>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ae2:	d1f0      	bne.n	8000ac6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000af0:	2301      	movs	r3, #1
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	e001      	b.n	8000afa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d14b      	bne.n	8000b98 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a25      	ldr	r2, [pc, #148]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <SetSysClockTo72+0xfc>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b46:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b4a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b52:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000b56:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b62:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b64:	bf00      	nop
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f9      	beq.n	8000b66 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b78:	f023 0303 	bic.w	r3, r3, #3
 8000b7c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b8a:	bf00      	nop
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SetSysClockTo72+0xf8>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d1f9      	bne.n	8000b8c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40022000 	.word	0x40022000

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ff44 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb2:	490c      	ldr	r1, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc8:	4c09      	ldr	r4, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f000 fdcb 	bl	8001770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fbcf 	bl	800037c <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000be8:	080028b8 	.word	0x080028b8
  ldr r2, =_sbss
 8000bec:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000bf0:	2000056c 	.word	0x2000056c

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>

08000bf6 <__NOP>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <ITM_SendChar>:
 * The function outputs a character via the ITM channel 0. 
 * The function returns when no debugger is connected that has booked the output.  
 * It is blocking when a debugger is connected, but the previous character send is not transmitted. 
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <ITM_SendChar+0x58>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d01a      	beq.n	8000c4e <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c20:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d012      	beq.n	8000c4e <ITM_SendChar+0x4a>
      (ITM->TER & (1ul << 0)        )                    )     /* ITM Port #0 enabled */
 8000c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c30:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00a      	beq.n	8000c4e <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8000c38:	bf00      	nop
 8000c3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0fa      	beq.n	8000c3a <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8000c44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	701a      	strb	r2, [r3, #0]
  }  
  return (ch);
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000edf0 	.word	0xe000edf0

08000c60 <_write>:
#include <stdarg.h>
#include <stdlib.h>


int _write(int handle, char *data, int size ) 
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
    int count ;

    handle = handle ; // unused

    for( count = 0; count < size; count++) 
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e009      	b.n	8000c86 <_write+0x26>
    {
        ITM_SendChar( data[count] ) ;  // Your low-level output function here.
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffc2 	bl	8000c04 <ITM_SendChar>
    for( count = 0; count < size; count++) 
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf1      	blt.n	8000c72 <_write+0x12>
    }

    return count;
 8000c8e:	697b      	ldr	r3, [r7, #20]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '采用阻塞方式的延时' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	// SysTick->LOAD = 72 * xus;				//设置定时器重装值
	// SysTick->VAL = 0x00;					//清空当前计数值
	// SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
	// while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
	// SysTick->CTRL = 0x00000004;				//关闭定时器
    __IO uint32_t us= xus * 2;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
    while (us > 0)
 8000ca6:	e006      	b.n	8000cb6 <Bsp_DelayUS+0x1e>
    {
        us--;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
        __NOP();
 8000cae:	f7ff ffa2 	bl	8000bf6 <__NOP>
        __NOP();
 8000cb2:	f7ff ffa0 	bl	8000bf6 <__NOP>
    while (us > 0)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f5      	bne.n	8000ca8 <Bsp_DelayUS+0x10>
    }
    
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	while(xms--)
 8000cce:	e003      	b.n	8000cd8 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd4:	f7ff ffe0 	bl	8000c98 <Bsp_DelayUS>
	while(xms--)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f6      	bne.n	8000cd0 <Bsp_DelayMS+0xa>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8000cf0:	f000 f88c 	bl	8000e0c <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 8000cf4:	f000 f8fa 	bl	8000eec <Bsp_SPI_Init>
    Bsp_Flash_Init();
 8000cf8:	f000 f85a 	bl	8000db0 <Bsp_Flash_Init>
	//Bsp_I2C_Init();
    
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fbd5 	bl	80014b8 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <Bsp_SPI_DMA_Init+0x60>)
 8000d10:	f000 f964 	bl	8000fdc <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <Bsp_SPI_DMA_Init+0x64>)
 8000d16:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <Bsp_SPI_DMA_Init+0x68>)
 8000d1a:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 8000d36:	2320      	movs	r3, #32
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <Bsp_SPI_DMA_Init+0x60>)
 8000d4a:	f000 fa03 	bl	8001154 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <Bsp_SPI_DMA_Init+0x60>)
 8000d52:	f000 fa3d 	bl	80011d0 <DMA_Cmd>
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40020030 	.word	0x40020030
 8000d64:	4001300c 	.word	0x4001300c
 8000d68:	2000014c 	.word	0x2000014c

08000d6c <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000d70:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d74:	f000 fa48 	bl	8001208 <DMA_GetFlagStatus>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d012      	beq.n	8000da4 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8000d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d82:	f000 fa69 	bl	8001258 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f7ff ff86 	bl	8000c98 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <DMA1_Channel6_IRQHandler+0x3c>)
 8000d90:	f000 fb54 	bl	800143c <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8000d94:	2101      	movs	r1, #1
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <DMA1_Channel6_IRQHandler+0x3c>)
 8000d98:	f000 fb6f 	bl	800147a <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <DMA1_Channel6_IRQHandler+0x40>)
 8000da0:	f000 fa16 	bl	80011d0 <DMA_Cmd>
	}
}	
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40005400 	.word	0x40005400
 8000dac:	4002006c 	.word	0x4002006c

08000db0 <Bsp_Flash_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '初始化flash' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Flash_Init(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef FLASH_SPI_InitStruct;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 , ENABLE);
 8000db6:	2101      	movs	r1, #1
 8000db8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dbc:	f000 fbb8 	bl	8001530 <RCC_APB1PeriphClockCmd>
    
    SPI_I2S_DeInit(FLASH_SPI);
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <Bsp_Flash_Init+0x58>)
 8000dc2:	f000 fc0f 	bl	80015e4 <SPI_I2S_DeInit>
    FLASH_SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	80bb      	strh	r3, [r7, #4]
    FLASH_SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000dca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000dce:	80fb      	strh	r3, [r7, #6]
    FLASH_SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	813b      	strh	r3, [r7, #8]
    FLASH_SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	817b      	strh	r3, [r7, #10]
    FLASH_SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                  //奇数边沿
 8000dd8:	2300      	movs	r3, #0
 8000dda:	81bb      	strh	r3, [r7, #12]
    FLASH_SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de0:	81fb      	strh	r3, [r7, #14]
    FLASH_SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000de2:	2330      	movs	r3, #48	; 0x30
 8000de4:	823b      	strh	r3, [r7, #16]
    FLASH_SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000de6:	2300      	movs	r3, #0
 8000de8:	827b      	strh	r3, [r7, #18]
    FLASH_SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	82bb      	strh	r3, [r7, #20]

    SPI_Init(FLASH_SPI,&FLASH_SPI_InitStruct);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <Bsp_Flash_Init+0x58>)
 8000df4:	f000 fc30 	bl	8001658 <SPI_Init>
    
    SPI_Cmd(FLASH_SPI,ENABLE);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <Bsp_Flash_Init+0x58>)
 8000dfc:	f000 fc6f 	bl	80016de <SPI_Cmd>
    
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40003800 	.word	0x40003800

08000e0c <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000e10:	2101      	movs	r1, #1
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fb6e 	bl	80014f4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2009      	movs	r0, #9
 8000e1c:	f000 fb6a 	bl	80014f4 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e22:	2218      	movs	r2, #24
 8000e24:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e2e:	22a0      	movs	r2, #160	; 0xa0
 8000e30:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000e34:	2210      	movs	r2, #16
 8000e36:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000e40:	2250      	movs	r2, #80	; 0x50
 8000e42:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000e44:	4924      	ldr	r1, [pc, #144]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <Bsp_GPIO_Init+0xd4>)
 8000e48:	f000 fa20 	bl	800128c <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8000e4c:	4923      	ldr	r1, [pc, #140]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000e4e:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <Bsp_GPIO_Init+0xd4>)
 8000e50:	f000 fa1c 	bl	800128c <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e56:	2248      	movs	r2, #72	; 0x48
 8000e58:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e66:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 8000e68:	491e      	ldr	r1, [pc, #120]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <Bsp_GPIO_Init+0xd4>)
 8000e6c:	f000 fa0e 	bl	800128c <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 8000e76:	491b      	ldr	r1, [pc, #108]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e78:	481b      	ldr	r0, [pc, #108]	; (8000ee8 <Bsp_GPIO_Init+0xdc>)
 8000e7a:	f000 fa07 	bl	800128c <GPIO_Init>
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e80:	2218      	movs	r2, #24
 8000e82:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e86:	2203      	movs	r2, #3
 8000e88:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000e8c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000e90:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e94:	2248      	movs	r2, #72	; 0x48
 8000e96:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea4:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000eae:	2203      	movs	r2, #3
 8000eb0:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb8:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <Bsp_GPIO_Init+0xd0>)
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <Bsp_GPIO_Init+0xdc>)
 8000ebe:	f000 f9e5 	bl	800128c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8000ec2:	4905      	ldr	r1, [pc, #20]	; (8000ed8 <Bsp_GPIO_Init+0xcc>)
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <Bsp_GPIO_Init+0xdc>)
 8000ec6:	f000 f9e1 	bl	800128c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 8000eca:	4906      	ldr	r1, [pc, #24]	; (8000ee4 <Bsp_GPIO_Init+0xd8>)
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <Bsp_GPIO_Init+0xdc>)
 8000ece:	f000 f9dd 	bl	800128c <GPIO_Init>
    #endif

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000054c 	.word	0x2000054c
 8000edc:	20000550 	.word	0x20000550
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	20000554 	.word	0x20000554
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ef8:	f000 fafc 	bl	80014f4 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <Bsp_SPI_Init+0x68>)
 8000efe:	f000 fb71 	bl	80015e4 <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8000f02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f06:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000f08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f0c:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000f12:	2300      	movs	r3, #0
 8000f14:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000f16:	2300      	movs	r3, #0
 8000f18:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000f20:	2318      	movs	r3, #24
 8000f22:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000f24:	2300      	movs	r3, #0
 8000f26:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <Bsp_SPI_Init+0x68>)
 8000f32:	f000 fb91 	bl	8001658 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <Bsp_SPI_Init+0x68>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <Bsp_SPI_Init+0x68>)
 8000f40:	f000 fbcd 	bl	80016de <SPI_Cmd>
    Bsp_DelayMS(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f7ff febe 	bl	8000cc6 <Bsp_DelayMS>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000

08000f58 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(uint8_t TxData)                                   //发送命令
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8_t retry=0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <Bsp_SPI_Send_CMD+0x54>)
 8000f6a:	f000 fa59 	bl	8001420 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000f6e:	e005      	b.n	8000f7c <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2bc8      	cmp	r3, #200	; 0xc8
 8000f7a:	d813      	bhi.n	8000fa4 <Bsp_SPI_Send_CMD+0x4c>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <Bsp_SPI_Send_CMD+0x58>)
 8000f80:	f000 fbda 	bl	8001738 <SPI_I2S_GetFlagStatus>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f2      	beq.n	8000f70 <Bsp_SPI_Send_CMD+0x18>
	}
	
	//Bsp_DelayMS(100);
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <Bsp_SPI_Send_CMD+0x58>)
 8000f92:	f000 fbc3 	bl	800171c <SPI_I2S_SendData>
	retry=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <Bsp_SPI_Send_CMD+0x54>)
 8000f9e:	f000 fa31 	bl	8001404 <GPIO_SetBits>
 8000fa2:	e000      	b.n	8000fa6 <Bsp_SPI_Send_CMD+0x4e>
		if(retry>200) return ;
 8000fa4:	bf00      	nop
}
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <Bsp_SPI_RES_LOW+0x10>)
 8000fbc:	f000 fa30 	bl	8001420 <GPIO_ResetBits>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <Bsp_SPI_RES_HIGH+0x10>)
 8000fd0:	f000 fa18 	bl	8001404 <GPIO_SetBits>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010800 	.word	0x40010800

08000fdc <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000fec:	4013      	ands	r3, r2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a43      	ldr	r2, [pc, #268]	; (800111c <DMA_DeInit+0x140>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d106      	bne.n	8001020 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <DMA_DeInit+0x144>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <DMA_DeInit+0x144>)
 8001018:	f043 030f 	orr.w	r3, r3, #15
 800101c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 800101e:	e077      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a40      	ldr	r2, [pc, #256]	; (8001124 <DMA_DeInit+0x148>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d106      	bne.n	8001036 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8001028:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <DMA_DeInit+0x144>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <DMA_DeInit+0x144>)
 800102e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001032:	6053      	str	r3, [r2, #4]
}
 8001034:	e06c      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a3b      	ldr	r2, [pc, #236]	; (8001128 <DMA_DeInit+0x14c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d106      	bne.n	800104c <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <DMA_DeInit+0x144>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <DMA_DeInit+0x144>)
 8001044:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001048:	6053      	str	r3, [r2, #4]
}
 800104a:	e061      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a37      	ldr	r2, [pc, #220]	; (800112c <DMA_DeInit+0x150>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d106      	bne.n	8001062 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <DMA_DeInit+0x144>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <DMA_DeInit+0x144>)
 800105a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800105e:	6053      	str	r3, [r2, #4]
}
 8001060:	e056      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <DMA_DeInit+0x154>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d106      	bne.n	8001078 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <DMA_DeInit+0x144>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a2c      	ldr	r2, [pc, #176]	; (8001120 <DMA_DeInit+0x144>)
 8001070:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001074:	6053      	str	r3, [r2, #4]
}
 8001076:	e04b      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <DMA_DeInit+0x158>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d106      	bne.n	800108e <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <DMA_DeInit+0x144>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <DMA_DeInit+0x144>)
 8001086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108a:	6053      	str	r3, [r2, #4]
}
 800108c:	e040      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a29      	ldr	r2, [pc, #164]	; (8001138 <DMA_DeInit+0x15c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d106      	bne.n	80010a4 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <DMA_DeInit+0x144>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <DMA_DeInit+0x144>)
 800109c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80010a0:	6053      	str	r3, [r2, #4]
}
 80010a2:	e035      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a25      	ldr	r2, [pc, #148]	; (800113c <DMA_DeInit+0x160>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d106      	bne.n	80010ba <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <DMA_DeInit+0x164>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <DMA_DeInit+0x164>)
 80010b2:	f043 030f 	orr.w	r3, r3, #15
 80010b6:	6053      	str	r3, [r2, #4]
}
 80010b8:	e02a      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <DMA_DeInit+0x168>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d106      	bne.n	80010d0 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <DMA_DeInit+0x164>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <DMA_DeInit+0x164>)
 80010c8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010cc:	6053      	str	r3, [r2, #4]
}
 80010ce:	e01f      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <DMA_DeInit+0x16c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d106      	bne.n	80010e6 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <DMA_DeInit+0x164>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a18      	ldr	r2, [pc, #96]	; (8001140 <DMA_DeInit+0x164>)
 80010de:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80010e2:	6053      	str	r3, [r2, #4]
}
 80010e4:	e014      	b.n	8001110 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <DMA_DeInit+0x170>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <DMA_DeInit+0x164>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <DMA_DeInit+0x164>)
 80010f4:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80010f8:	6053      	str	r3, [r2, #4]
}
 80010fa:	e009      	b.n	8001110 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <DMA_DeInit+0x174>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d105      	bne.n	8001110 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <DMA_DeInit+0x164>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <DMA_DeInit+0x164>)
 800110a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800110e:	6053      	str	r3, [r2, #4]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40020008 	.word	0x40020008
 8001120:	40020000 	.word	0x40020000
 8001124:	4002001c 	.word	0x4002001c
 8001128:	40020030 	.word	0x40020030
 800112c:	40020044 	.word	0x40020044
 8001130:	40020058 	.word	0x40020058
 8001134:	4002006c 	.word	0x4002006c
 8001138:	40020080 	.word	0x40020080
 800113c:	40020408 	.word	0x40020408
 8001140:	40020400 	.word	0x40020400
 8001144:	4002041c 	.word	0x4002041c
 8001148:	40020430 	.word	0x40020430
 800114c:	40020444 	.word	0x40020444
 8001150:	40020458 	.word	0x40020458

08001154 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800116e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001172:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001182:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800118e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800119a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 80011ee:	e006      	b.n	80011fe <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80011f8:	4013      	ands	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <DMA_GetFlagStatus+0x48>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	e002      	b.n	8001230 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <DMA_GetFlagStatus+0x4c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e001      	b.n	8001244 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40020400 	.word	0x40020400
 8001254:	40020000 	.word	0x40020000

08001258 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <DMA_ClearFlag+0x2c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8001270:	e002      	b.n	8001278 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <DMA_ClearFlag+0x30>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6053      	str	r3, [r2, #4]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000

0800128c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d044      	beq.n	8001364 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	e038      	b.n	8001358 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80012e6:	2201      	movs	r2, #1
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d126      	bne.n	8001352 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800130a:	220f      	movs	r2, #15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	43db      	mvns	r3, r3
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4013      	ands	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	2b28      	cmp	r3, #40	; 0x28
 8001332:	d105      	bne.n	8001340 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001334:	2201      	movs	r2, #1
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	409a      	lsls	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	e008      	b.n	8001352 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2b48      	cmp	r3, #72	; 0x48
 8001346:	d104      	bne.n	8001352 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001348:	2201      	movs	r2, #1
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	3301      	adds	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d9c3      	bls.n	80012e6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	d946      	bls.n	80013fa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	e03a      	b.n	80013ee <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	3308      	adds	r3, #8
 800137c:	2201      	movs	r2, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d127      	bne.n	80013e8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800139e:	220f      	movs	r2, #15
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	4013      	ands	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	78db      	ldrb	r3, [r3, #3]
 80013c4:	2b28      	cmp	r3, #40	; 0x28
 80013c6:	d105      	bne.n	80013d4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	3308      	adds	r3, #8
 80013cc:	2201      	movs	r2, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	78db      	ldrb	r3, [r3, #3]
 80013d8:	2b48      	cmp	r3, #72	; 0x48
 80013da:	d105      	bne.n	80013e8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	3308      	adds	r3, #8
 80013e0:	2201      	movs	r2, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3301      	adds	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d9c1      	bls.n	8001378 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	605a      	str	r2, [r3, #4]
  }
}
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	611a      	str	r2, [r3, #16]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800142c:	887a      	ldrh	r2, [r7, #2]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	615a      	str	r2, [r3, #20]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800145e:	e007      	b.n	8001470 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	801a      	strh	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 800149c:	e007      	b.n	80014ae <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	801a      	strh	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80014d6:	e006      	b.n	80014e6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	614b      	str	r3, [r1, #20]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000

080014f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <RCC_APB2PeriphClockCmd+0x38>)
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <RCC_APB2PeriphClockCmd+0x38>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001512:	e006      	b.n	8001522 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <RCC_APB2PeriphClockCmd+0x38>)
 8001516:	699a      	ldr	r2, [r3, #24]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	43db      	mvns	r3, r3
 800151c:	4903      	ldr	r1, [pc, #12]	; (800152c <RCC_APB2PeriphClockCmd+0x38>)
 800151e:	4013      	ands	r3, r2
 8001520:	618b      	str	r3, [r1, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000

08001530 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <RCC_APB1PeriphClockCmd+0x38>)
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <RCC_APB1PeriphClockCmd+0x38>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800154e:	e006      	b.n	800155e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <RCC_APB1PeriphClockCmd+0x38>)
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	43db      	mvns	r3, r3
 8001558:	4903      	ldr	r1, [pc, #12]	; (8001568 <RCC_APB1PeriphClockCmd+0x38>)
 800155a:	4013      	ands	r3, r2
 800155c:	61cb      	str	r3, [r1, #28]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <RCC_APB2PeriphResetCmd+0x38>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <RCC_APB2PeriphResetCmd+0x38>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800158a:	e006      	b.n	800159a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <RCC_APB2PeriphResetCmd+0x38>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	43db      	mvns	r3, r3
 8001594:	4903      	ldr	r1, [pc, #12]	; (80015a4 <RCC_APB2PeriphResetCmd+0x38>)
 8001596:	4013      	ands	r3, r2
 8001598:	60cb      	str	r3, [r1, #12]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000

080015a8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <RCC_APB1PeriphResetCmd+0x38>)
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <RCC_APB1PeriphResetCmd+0x38>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80015c6:	e006      	b.n	80015d6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <RCC_APB1PeriphResetCmd+0x38>)
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4903      	ldr	r1, [pc, #12]	; (80015e0 <RCC_APB1PeriphResetCmd+0x38>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	610b      	str	r3, [r1, #16]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <SPI_I2S_DeInit+0x68>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d10a      	bne.n	800160a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80015f4:	2101      	movs	r1, #1
 80015f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015fa:	f7ff ffb7 	bl	800156c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80015fe:	2100      	movs	r1, #0
 8001600:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001604:	f7ff ffb2 	bl	800156c <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001608:	e01c      	b.n	8001644 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <SPI_I2S_DeInit+0x6c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10a      	bne.n	8001628 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001612:	2101      	movs	r1, #1
 8001614:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001618:	f7ff ffc6 	bl	80015a8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800161c:	2100      	movs	r1, #0
 800161e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001622:	f7ff ffc1 	bl	80015a8 <RCC_APB1PeriphResetCmd>
}
 8001626:	e00d      	b.n	8001644 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SPI_I2S_DeInit+0x70>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d109      	bne.n	8001644 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001630:	2101      	movs	r1, #1
 8001632:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001636:	f7ff ffb7 	bl	80015a8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800163a:	2100      	movs	r1, #0
 800163c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001640:	f7ff ffb2 	bl	80015a8 <RCC_APB1PeriphResetCmd>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40013000 	.word	0x40013000
 8001650:	40003800 	.word	0x40003800
 8001654:	40003c00 	.word	0x40003c00

08001658 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001672:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	4313      	orrs	r3, r2
 800167e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800168c:	4313      	orrs	r3, r2
 800168e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001694:	4313      	orrs	r3, r2
 8001696:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800169c:	4313      	orrs	r3, r2
 800169e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	89fa      	ldrh	r2, [r7, #14]
 80016ba:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b9b      	ldrh	r3, [r3, #28]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	8a1a      	ldrh	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	821a      	strh	r2, [r3, #16]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001700:	e007      	b.n	8001712 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	801a      	strh	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	819a      	strh	r2, [r3, #12]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	891b      	ldrh	r3, [r3, #8]
 800174c:	b29a      	uxth	r2, r3
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	4013      	ands	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
	...

08001770 <__libc_init_array>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	2600      	movs	r6, #0
 8001774:	4d0c      	ldr	r5, [pc, #48]	; (80017a8 <__libc_init_array+0x38>)
 8001776:	4c0d      	ldr	r4, [pc, #52]	; (80017ac <__libc_init_array+0x3c>)
 8001778:	1b64      	subs	r4, r4, r5
 800177a:	10a4      	asrs	r4, r4, #2
 800177c:	42a6      	cmp	r6, r4
 800177e:	d109      	bne.n	8001794 <__libc_init_array+0x24>
 8001780:	f000 ffb2 	bl	80026e8 <_init>
 8001784:	2600      	movs	r6, #0
 8001786:	4d0a      	ldr	r5, [pc, #40]	; (80017b0 <__libc_init_array+0x40>)
 8001788:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <__libc_init_array+0x44>)
 800178a:	1b64      	subs	r4, r4, r5
 800178c:	10a4      	asrs	r4, r4, #2
 800178e:	42a6      	cmp	r6, r4
 8001790:	d105      	bne.n	800179e <__libc_init_array+0x2e>
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	f855 3b04 	ldr.w	r3, [r5], #4
 8001798:	4798      	blx	r3
 800179a:	3601      	adds	r6, #1
 800179c:	e7ee      	b.n	800177c <__libc_init_array+0xc>
 800179e:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a2:	4798      	blx	r3
 80017a4:	3601      	adds	r6, #1
 80017a6:	e7f2      	b.n	800178e <__libc_init_array+0x1e>
 80017a8:	080028b0 	.word	0x080028b0
 80017ac:	080028b0 	.word	0x080028b0
 80017b0:	080028b0 	.word	0x080028b0
 80017b4:	080028b4 	.word	0x080028b4

080017b8 <memset>:
 80017b8:	4603      	mov	r3, r0
 80017ba:	4402      	add	r2, r0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d100      	bne.n	80017c2 <memset+0xa>
 80017c0:	4770      	bx	lr
 80017c2:	f803 1b01 	strb.w	r1, [r3], #1
 80017c6:	e7f9      	b.n	80017bc <memset+0x4>

080017c8 <_free_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4605      	mov	r5, r0
 80017cc:	2900      	cmp	r1, #0
 80017ce:	d040      	beq.n	8001852 <_free_r+0x8a>
 80017d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017d4:	1f0c      	subs	r4, r1, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bfb8      	it	lt
 80017da:	18e4      	addlt	r4, r4, r3
 80017dc:	f000 fb9a 	bl	8001f14 <__malloc_lock>
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <_free_r+0x8c>)
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	b933      	cbnz	r3, 80017f4 <_free_r+0x2c>
 80017e6:	6063      	str	r3, [r4, #4]
 80017e8:	6014      	str	r4, [r2, #0]
 80017ea:	4628      	mov	r0, r5
 80017ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017f0:	f000 bb96 	b.w	8001f20 <__malloc_unlock>
 80017f4:	42a3      	cmp	r3, r4
 80017f6:	d908      	bls.n	800180a <_free_r+0x42>
 80017f8:	6820      	ldr	r0, [r4, #0]
 80017fa:	1821      	adds	r1, r4, r0
 80017fc:	428b      	cmp	r3, r1
 80017fe:	bf01      	itttt	eq
 8001800:	6819      	ldreq	r1, [r3, #0]
 8001802:	685b      	ldreq	r3, [r3, #4]
 8001804:	1809      	addeq	r1, r1, r0
 8001806:	6021      	streq	r1, [r4, #0]
 8001808:	e7ed      	b.n	80017e6 <_free_r+0x1e>
 800180a:	461a      	mov	r2, r3
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b10b      	cbz	r3, 8001814 <_free_r+0x4c>
 8001810:	42a3      	cmp	r3, r4
 8001812:	d9fa      	bls.n	800180a <_free_r+0x42>
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	1850      	adds	r0, r2, r1
 8001818:	42a0      	cmp	r0, r4
 800181a:	d10b      	bne.n	8001834 <_free_r+0x6c>
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	4401      	add	r1, r0
 8001820:	1850      	adds	r0, r2, r1
 8001822:	4283      	cmp	r3, r0
 8001824:	6011      	str	r1, [r2, #0]
 8001826:	d1e0      	bne.n	80017ea <_free_r+0x22>
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4401      	add	r1, r0
 800182e:	6011      	str	r1, [r2, #0]
 8001830:	6053      	str	r3, [r2, #4]
 8001832:	e7da      	b.n	80017ea <_free_r+0x22>
 8001834:	d902      	bls.n	800183c <_free_r+0x74>
 8001836:	230c      	movs	r3, #12
 8001838:	602b      	str	r3, [r5, #0]
 800183a:	e7d6      	b.n	80017ea <_free_r+0x22>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	1821      	adds	r1, r4, r0
 8001840:	428b      	cmp	r3, r1
 8001842:	bf01      	itttt	eq
 8001844:	6819      	ldreq	r1, [r3, #0]
 8001846:	685b      	ldreq	r3, [r3, #4]
 8001848:	1809      	addeq	r1, r1, r0
 800184a:	6021      	streq	r1, [r4, #0]
 800184c:	6063      	str	r3, [r4, #4]
 800184e:	6054      	str	r4, [r2, #4]
 8001850:	e7cb      	b.n	80017ea <_free_r+0x22>
 8001852:	bd38      	pop	{r3, r4, r5, pc}
 8001854:	20000558 	.word	0x20000558

08001858 <_malloc_r>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	1ccd      	adds	r5, r1, #3
 800185c:	f025 0503 	bic.w	r5, r5, #3
 8001860:	3508      	adds	r5, #8
 8001862:	2d0c      	cmp	r5, #12
 8001864:	bf38      	it	cc
 8001866:	250c      	movcc	r5, #12
 8001868:	2d00      	cmp	r5, #0
 800186a:	4606      	mov	r6, r0
 800186c:	db01      	blt.n	8001872 <_malloc_r+0x1a>
 800186e:	42a9      	cmp	r1, r5
 8001870:	d903      	bls.n	800187a <_malloc_r+0x22>
 8001872:	230c      	movs	r3, #12
 8001874:	6033      	str	r3, [r6, #0]
 8001876:	2000      	movs	r0, #0
 8001878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187a:	f000 fb4b 	bl	8001f14 <__malloc_lock>
 800187e:	4921      	ldr	r1, [pc, #132]	; (8001904 <_malloc_r+0xac>)
 8001880:	680a      	ldr	r2, [r1, #0]
 8001882:	4614      	mov	r4, r2
 8001884:	b99c      	cbnz	r4, 80018ae <_malloc_r+0x56>
 8001886:	4f20      	ldr	r7, [pc, #128]	; (8001908 <_malloc_r+0xb0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b923      	cbnz	r3, 8001896 <_malloc_r+0x3e>
 800188c:	4621      	mov	r1, r4
 800188e:	4630      	mov	r0, r6
 8001890:	f000 f854 	bl	800193c <_sbrk_r>
 8001894:	6038      	str	r0, [r7, #0]
 8001896:	4629      	mov	r1, r5
 8001898:	4630      	mov	r0, r6
 800189a:	f000 f84f 	bl	800193c <_sbrk_r>
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	d123      	bne.n	80018ea <_malloc_r+0x92>
 80018a2:	230c      	movs	r3, #12
 80018a4:	4630      	mov	r0, r6
 80018a6:	6033      	str	r3, [r6, #0]
 80018a8:	f000 fb3a 	bl	8001f20 <__malloc_unlock>
 80018ac:	e7e3      	b.n	8001876 <_malloc_r+0x1e>
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	1b5b      	subs	r3, r3, r5
 80018b2:	d417      	bmi.n	80018e4 <_malloc_r+0x8c>
 80018b4:	2b0b      	cmp	r3, #11
 80018b6:	d903      	bls.n	80018c0 <_malloc_r+0x68>
 80018b8:	6023      	str	r3, [r4, #0]
 80018ba:	441c      	add	r4, r3
 80018bc:	6025      	str	r5, [r4, #0]
 80018be:	e004      	b.n	80018ca <_malloc_r+0x72>
 80018c0:	6863      	ldr	r3, [r4, #4]
 80018c2:	42a2      	cmp	r2, r4
 80018c4:	bf0c      	ite	eq
 80018c6:	600b      	streq	r3, [r1, #0]
 80018c8:	6053      	strne	r3, [r2, #4]
 80018ca:	4630      	mov	r0, r6
 80018cc:	f000 fb28 	bl	8001f20 <__malloc_unlock>
 80018d0:	f104 000b 	add.w	r0, r4, #11
 80018d4:	1d23      	adds	r3, r4, #4
 80018d6:	f020 0007 	bic.w	r0, r0, #7
 80018da:	1ac2      	subs	r2, r0, r3
 80018dc:	d0cc      	beq.n	8001878 <_malloc_r+0x20>
 80018de:	1a1b      	subs	r3, r3, r0
 80018e0:	50a3      	str	r3, [r4, r2]
 80018e2:	e7c9      	b.n	8001878 <_malloc_r+0x20>
 80018e4:	4622      	mov	r2, r4
 80018e6:	6864      	ldr	r4, [r4, #4]
 80018e8:	e7cc      	b.n	8001884 <_malloc_r+0x2c>
 80018ea:	1cc4      	adds	r4, r0, #3
 80018ec:	f024 0403 	bic.w	r4, r4, #3
 80018f0:	42a0      	cmp	r0, r4
 80018f2:	d0e3      	beq.n	80018bc <_malloc_r+0x64>
 80018f4:	1a21      	subs	r1, r4, r0
 80018f6:	4630      	mov	r0, r6
 80018f8:	f000 f820 	bl	800193c <_sbrk_r>
 80018fc:	3001      	adds	r0, #1
 80018fe:	d1dd      	bne.n	80018bc <_malloc_r+0x64>
 8001900:	e7cf      	b.n	80018a2 <_malloc_r+0x4a>
 8001902:	bf00      	nop
 8001904:	20000558 	.word	0x20000558
 8001908:	2000055c 	.word	0x2000055c

0800190c <iprintf>:
 800190c:	b40f      	push	{r0, r1, r2, r3}
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <iprintf+0x2c>)
 8001910:	b513      	push	{r0, r1, r4, lr}
 8001912:	681c      	ldr	r4, [r3, #0]
 8001914:	b124      	cbz	r4, 8001920 <iprintf+0x14>
 8001916:	69a3      	ldr	r3, [r4, #24]
 8001918:	b913      	cbnz	r3, 8001920 <iprintf+0x14>
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f9f4 	bl	8001d08 <__sinit>
 8001920:	ab05      	add	r3, sp, #20
 8001922:	4620      	mov	r0, r4
 8001924:	9a04      	ldr	r2, [sp, #16]
 8001926:	68a1      	ldr	r1, [r4, #8]
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	f000 fb27 	bl	8001f7c <_vfiprintf_r>
 800192e:	b002      	add	sp, #8
 8001930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001934:	b004      	add	sp, #16
 8001936:	4770      	bx	lr
 8001938:	20000040 	.word	0x20000040

0800193c <_sbrk_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	2300      	movs	r3, #0
 8001940:	4d05      	ldr	r5, [pc, #20]	; (8001958 <_sbrk_r+0x1c>)
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	602b      	str	r3, [r5, #0]
 8001948:	f000 fec0 	bl	80026cc <_sbrk>
 800194c:	1c43      	adds	r3, r0, #1
 800194e:	d102      	bne.n	8001956 <_sbrk_r+0x1a>
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	b103      	cbz	r3, 8001956 <_sbrk_r+0x1a>
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	bd38      	pop	{r3, r4, r5, pc}
 8001958:	20000564 	.word	0x20000564

0800195c <__swbuf_r>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	460e      	mov	r6, r1
 8001960:	4614      	mov	r4, r2
 8001962:	4605      	mov	r5, r0
 8001964:	b118      	cbz	r0, 800196e <__swbuf_r+0x12>
 8001966:	6983      	ldr	r3, [r0, #24]
 8001968:	b90b      	cbnz	r3, 800196e <__swbuf_r+0x12>
 800196a:	f000 f9cd 	bl	8001d08 <__sinit>
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <__swbuf_r+0x98>)
 8001970:	429c      	cmp	r4, r3
 8001972:	d12b      	bne.n	80019cc <__swbuf_r+0x70>
 8001974:	686c      	ldr	r4, [r5, #4]
 8001976:	69a3      	ldr	r3, [r4, #24]
 8001978:	60a3      	str	r3, [r4, #8]
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	071a      	lsls	r2, r3, #28
 800197e:	d52f      	bpl.n	80019e0 <__swbuf_r+0x84>
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b36b      	cbz	r3, 80019e0 <__swbuf_r+0x84>
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	b2f6      	uxtb	r6, r6
 800198a:	1ac0      	subs	r0, r0, r3
 800198c:	6963      	ldr	r3, [r4, #20]
 800198e:	4637      	mov	r7, r6
 8001990:	4283      	cmp	r3, r0
 8001992:	dc04      	bgt.n	800199e <__swbuf_r+0x42>
 8001994:	4621      	mov	r1, r4
 8001996:	4628      	mov	r0, r5
 8001998:	f000 f922 	bl	8001be0 <_fflush_r>
 800199c:	bb30      	cbnz	r0, 80019ec <__swbuf_r+0x90>
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	3001      	adds	r0, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	60a3      	str	r3, [r4, #8]
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	6022      	str	r2, [r4, #0]
 80019ac:	701e      	strb	r6, [r3, #0]
 80019ae:	6963      	ldr	r3, [r4, #20]
 80019b0:	4283      	cmp	r3, r0
 80019b2:	d004      	beq.n	80019be <__swbuf_r+0x62>
 80019b4:	89a3      	ldrh	r3, [r4, #12]
 80019b6:	07db      	lsls	r3, r3, #31
 80019b8:	d506      	bpl.n	80019c8 <__swbuf_r+0x6c>
 80019ba:	2e0a      	cmp	r6, #10
 80019bc:	d104      	bne.n	80019c8 <__swbuf_r+0x6c>
 80019be:	4621      	mov	r1, r4
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 f90d 	bl	8001be0 <_fflush_r>
 80019c6:	b988      	cbnz	r0, 80019ec <__swbuf_r+0x90>
 80019c8:	4638      	mov	r0, r7
 80019ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <__swbuf_r+0x9c>)
 80019ce:	429c      	cmp	r4, r3
 80019d0:	d101      	bne.n	80019d6 <__swbuf_r+0x7a>
 80019d2:	68ac      	ldr	r4, [r5, #8]
 80019d4:	e7cf      	b.n	8001976 <__swbuf_r+0x1a>
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <__swbuf_r+0xa0>)
 80019d8:	429c      	cmp	r4, r3
 80019da:	bf08      	it	eq
 80019dc:	68ec      	ldreq	r4, [r5, #12]
 80019de:	e7ca      	b.n	8001976 <__swbuf_r+0x1a>
 80019e0:	4621      	mov	r1, r4
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 f80c 	bl	8001a00 <__swsetup_r>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0cb      	beq.n	8001984 <__swbuf_r+0x28>
 80019ec:	f04f 37ff 	mov.w	r7, #4294967295
 80019f0:	e7ea      	b.n	80019c8 <__swbuf_r+0x6c>
 80019f2:	bf00      	nop
 80019f4:	0800283c 	.word	0x0800283c
 80019f8:	0800285c 	.word	0x0800285c
 80019fc:	0800281c 	.word	0x0800281c

08001a00 <__swsetup_r>:
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <__swsetup_r+0xcc>)
 8001a02:	b570      	push	{r4, r5, r6, lr}
 8001a04:	681d      	ldr	r5, [r3, #0]
 8001a06:	4606      	mov	r6, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	b125      	cbz	r5, 8001a16 <__swsetup_r+0x16>
 8001a0c:	69ab      	ldr	r3, [r5, #24]
 8001a0e:	b913      	cbnz	r3, 8001a16 <__swsetup_r+0x16>
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 f979 	bl	8001d08 <__sinit>
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <__swsetup_r+0xd0>)
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d10f      	bne.n	8001a3c <__swsetup_r+0x3c>
 8001a1c:	686c      	ldr	r4, [r5, #4]
 8001a1e:	89a3      	ldrh	r3, [r4, #12]
 8001a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a24:	0719      	lsls	r1, r3, #28
 8001a26:	d42c      	bmi.n	8001a82 <__swsetup_r+0x82>
 8001a28:	06dd      	lsls	r5, r3, #27
 8001a2a:	d411      	bmi.n	8001a50 <__swsetup_r+0x50>
 8001a2c:	2309      	movs	r3, #9
 8001a2e:	6033      	str	r3, [r6, #0]
 8001a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	e03e      	b.n	8001aba <__swsetup_r+0xba>
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <__swsetup_r+0xd4>)
 8001a3e:	429c      	cmp	r4, r3
 8001a40:	d101      	bne.n	8001a46 <__swsetup_r+0x46>
 8001a42:	68ac      	ldr	r4, [r5, #8]
 8001a44:	e7eb      	b.n	8001a1e <__swsetup_r+0x1e>
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <__swsetup_r+0xd8>)
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	bf08      	it	eq
 8001a4c:	68ec      	ldreq	r4, [r5, #12]
 8001a4e:	e7e6      	b.n	8001a1e <__swsetup_r+0x1e>
 8001a50:	0758      	lsls	r0, r3, #29
 8001a52:	d512      	bpl.n	8001a7a <__swsetup_r+0x7a>
 8001a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a56:	b141      	cbz	r1, 8001a6a <__swsetup_r+0x6a>
 8001a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <__swsetup_r+0x66>
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff feb1 	bl	80017c8 <_free_r>
 8001a66:	2300      	movs	r3, #0
 8001a68:	6363      	str	r3, [r4, #52]	; 0x34
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	6063      	str	r3, [r4, #4]
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	b94b      	cbnz	r3, 8001a9a <__swsetup_r+0x9a>
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a90:	d003      	beq.n	8001a9a <__swsetup_r+0x9a>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4630      	mov	r0, r6
 8001a96:	f000 f9fd 	bl	8001e94 <__smakebuf_r>
 8001a9a:	89a0      	ldrh	r0, [r4, #12]
 8001a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001aa0:	f010 0301 	ands.w	r3, r0, #1
 8001aa4:	d00a      	beq.n	8001abc <__swsetup_r+0xbc>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60a3      	str	r3, [r4, #8]
 8001aaa:	6963      	ldr	r3, [r4, #20]
 8001aac:	425b      	negs	r3, r3
 8001aae:	61a3      	str	r3, [r4, #24]
 8001ab0:	6923      	ldr	r3, [r4, #16]
 8001ab2:	b943      	cbnz	r3, 8001ac6 <__swsetup_r+0xc6>
 8001ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ab8:	d1ba      	bne.n	8001a30 <__swsetup_r+0x30>
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
 8001abc:	0781      	lsls	r1, r0, #30
 8001abe:	bf58      	it	pl
 8001ac0:	6963      	ldrpl	r3, [r4, #20]
 8001ac2:	60a3      	str	r3, [r4, #8]
 8001ac4:	e7f4      	b.n	8001ab0 <__swsetup_r+0xb0>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	e7f7      	b.n	8001aba <__swsetup_r+0xba>
 8001aca:	bf00      	nop
 8001acc:	20000040 	.word	0x20000040
 8001ad0:	0800283c 	.word	0x0800283c
 8001ad4:	0800285c 	.word	0x0800285c
 8001ad8:	0800281c 	.word	0x0800281c

08001adc <__sflush_r>:
 8001adc:	898a      	ldrh	r2, [r1, #12]
 8001ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	0710      	lsls	r0, r2, #28
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	d457      	bmi.n	8001b98 <__sflush_r+0xbc>
 8001ae8:	684b      	ldr	r3, [r1, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dc04      	bgt.n	8001af8 <__sflush_r+0x1c>
 8001aee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dc01      	bgt.n	8001af8 <__sflush_r+0x1c>
 8001af4:	2000      	movs	r0, #0
 8001af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	d0fa      	beq.n	8001af4 <__sflush_r+0x18>
 8001afe:	2300      	movs	r3, #0
 8001b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b04:	682f      	ldr	r7, [r5, #0]
 8001b06:	602b      	str	r3, [r5, #0]
 8001b08:	d032      	beq.n	8001b70 <__sflush_r+0x94>
 8001b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	075a      	lsls	r2, r3, #29
 8001b10:	d505      	bpl.n	8001b1e <__sflush_r+0x42>
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	1ac0      	subs	r0, r0, r3
 8001b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b18:	b10b      	cbz	r3, 8001b1e <__sflush_r+0x42>
 8001b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1c:	1ac0      	subs	r0, r0, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4602      	mov	r2, r0
 8001b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b24:	4628      	mov	r0, r5
 8001b26:	6a21      	ldr	r1, [r4, #32]
 8001b28:	47b0      	blx	r6
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	d106      	bne.n	8001b3e <__sflush_r+0x62>
 8001b30:	6829      	ldr	r1, [r5, #0]
 8001b32:	291d      	cmp	r1, #29
 8001b34:	d82c      	bhi.n	8001b90 <__sflush_r+0xb4>
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <__sflush_r+0x100>)
 8001b38:	40ca      	lsrs	r2, r1
 8001b3a:	07d6      	lsls	r6, r2, #31
 8001b3c:	d528      	bpl.n	8001b90 <__sflush_r+0xb4>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6062      	str	r2, [r4, #4]
 8001b42:	6922      	ldr	r2, [r4, #16]
 8001b44:	04d9      	lsls	r1, r3, #19
 8001b46:	6022      	str	r2, [r4, #0]
 8001b48:	d504      	bpl.n	8001b54 <__sflush_r+0x78>
 8001b4a:	1c42      	adds	r2, r0, #1
 8001b4c:	d101      	bne.n	8001b52 <__sflush_r+0x76>
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	b903      	cbnz	r3, 8001b54 <__sflush_r+0x78>
 8001b52:	6560      	str	r0, [r4, #84]	; 0x54
 8001b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b56:	602f      	str	r7, [r5, #0]
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d0cb      	beq.n	8001af4 <__sflush_r+0x18>
 8001b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b60:	4299      	cmp	r1, r3
 8001b62:	d002      	beq.n	8001b6a <__sflush_r+0x8e>
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7ff fe2f 	bl	80017c8 <_free_r>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8001b6e:	e7c2      	b.n	8001af6 <__sflush_r+0x1a>
 8001b70:	6a21      	ldr	r1, [r4, #32]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4628      	mov	r0, r5
 8001b76:	47b0      	blx	r6
 8001b78:	1c41      	adds	r1, r0, #1
 8001b7a:	d1c7      	bne.n	8001b0c <__sflush_r+0x30>
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0c4      	beq.n	8001b0c <__sflush_r+0x30>
 8001b82:	2b1d      	cmp	r3, #29
 8001b84:	d001      	beq.n	8001b8a <__sflush_r+0xae>
 8001b86:	2b16      	cmp	r3, #22
 8001b88:	d101      	bne.n	8001b8e <__sflush_r+0xb2>
 8001b8a:	602f      	str	r7, [r5, #0]
 8001b8c:	e7b2      	b.n	8001af4 <__sflush_r+0x18>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b94:	81a3      	strh	r3, [r4, #12]
 8001b96:	e7ae      	b.n	8001af6 <__sflush_r+0x1a>
 8001b98:	690f      	ldr	r7, [r1, #16]
 8001b9a:	2f00      	cmp	r7, #0
 8001b9c:	d0aa      	beq.n	8001af4 <__sflush_r+0x18>
 8001b9e:	0793      	lsls	r3, r2, #30
 8001ba0:	bf18      	it	ne
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	680e      	ldr	r6, [r1, #0]
 8001ba6:	bf08      	it	eq
 8001ba8:	694b      	ldreq	r3, [r1, #20]
 8001baa:	1bf6      	subs	r6, r6, r7
 8001bac:	600f      	str	r7, [r1, #0]
 8001bae:	608b      	str	r3, [r1, #8]
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	dd9f      	ble.n	8001af4 <__sflush_r+0x18>
 8001bb4:	4633      	mov	r3, r6
 8001bb6:	463a      	mov	r2, r7
 8001bb8:	4628      	mov	r0, r5
 8001bba:	6a21      	ldr	r1, [r4, #32]
 8001bbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001bc0:	47e0      	blx	ip
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	dc06      	bgt.n	8001bd4 <__sflush_r+0xf8>
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	e790      	b.n	8001af6 <__sflush_r+0x1a>
 8001bd4:	4407      	add	r7, r0
 8001bd6:	1a36      	subs	r6, r6, r0
 8001bd8:	e7ea      	b.n	8001bb0 <__sflush_r+0xd4>
 8001bda:	bf00      	nop
 8001bdc:	20400001 	.word	0x20400001

08001be0 <_fflush_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	690b      	ldr	r3, [r1, #16]
 8001be4:	4605      	mov	r5, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	b913      	cbnz	r3, 8001bf0 <_fflush_r+0x10>
 8001bea:	2500      	movs	r5, #0
 8001bec:	4628      	mov	r0, r5
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
 8001bf0:	b118      	cbz	r0, 8001bfa <_fflush_r+0x1a>
 8001bf2:	6983      	ldr	r3, [r0, #24]
 8001bf4:	b90b      	cbnz	r3, 8001bfa <_fflush_r+0x1a>
 8001bf6:	f000 f887 	bl	8001d08 <__sinit>
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <_fflush_r+0x6c>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	d11b      	bne.n	8001c38 <_fflush_r+0x58>
 8001c00:	686c      	ldr	r4, [r5, #4]
 8001c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ef      	beq.n	8001bea <_fflush_r+0xa>
 8001c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c0c:	07d0      	lsls	r0, r2, #31
 8001c0e:	d404      	bmi.n	8001c1a <_fflush_r+0x3a>
 8001c10:	0599      	lsls	r1, r3, #22
 8001c12:	d402      	bmi.n	8001c1a <_fflush_r+0x3a>
 8001c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c16:	f000 f915 	bl	8001e44 <__retarget_lock_acquire_recursive>
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	f7ff ff5d 	bl	8001adc <__sflush_r>
 8001c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c24:	4605      	mov	r5, r0
 8001c26:	07da      	lsls	r2, r3, #31
 8001c28:	d4e0      	bmi.n	8001bec <_fflush_r+0xc>
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	059b      	lsls	r3, r3, #22
 8001c2e:	d4dd      	bmi.n	8001bec <_fflush_r+0xc>
 8001c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c32:	f000 f908 	bl	8001e46 <__retarget_lock_release_recursive>
 8001c36:	e7d9      	b.n	8001bec <_fflush_r+0xc>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <_fflush_r+0x70>)
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	d101      	bne.n	8001c42 <_fflush_r+0x62>
 8001c3e:	68ac      	ldr	r4, [r5, #8]
 8001c40:	e7df      	b.n	8001c02 <_fflush_r+0x22>
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <_fflush_r+0x74>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	bf08      	it	eq
 8001c48:	68ec      	ldreq	r4, [r5, #12]
 8001c4a:	e7da      	b.n	8001c02 <_fflush_r+0x22>
 8001c4c:	0800283c 	.word	0x0800283c
 8001c50:	0800285c 	.word	0x0800285c
 8001c54:	0800281c 	.word	0x0800281c

08001c58 <std>:
 8001c58:	2300      	movs	r3, #0
 8001c5a:	b510      	push	{r4, lr}
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c66:	6083      	str	r3, [r0, #8]
 8001c68:	8181      	strh	r1, [r0, #12]
 8001c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8001c6c:	81c2      	strh	r2, [r0, #14]
 8001c6e:	6183      	str	r3, [r0, #24]
 8001c70:	4619      	mov	r1, r3
 8001c72:	2208      	movs	r2, #8
 8001c74:	305c      	adds	r0, #92	; 0x5c
 8001c76:	f7ff fd9f 	bl	80017b8 <memset>
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <std+0x38>)
 8001c7c:	6224      	str	r4, [r4, #32]
 8001c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <std+0x3c>)
 8001c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <std+0x40>)
 8001c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <std+0x44>)
 8001c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop
 8001c90:	08002509 	.word	0x08002509
 8001c94:	0800252b 	.word	0x0800252b
 8001c98:	08002563 	.word	0x08002563
 8001c9c:	08002587 	.word	0x08002587

08001ca0 <_cleanup_r>:
 8001ca0:	4901      	ldr	r1, [pc, #4]	; (8001ca8 <_cleanup_r+0x8>)
 8001ca2:	f000 b8af 	b.w	8001e04 <_fwalk_reent>
 8001ca6:	bf00      	nop
 8001ca8:	08001be1 	.word	0x08001be1

08001cac <__sfmoreglue>:
 8001cac:	2268      	movs	r2, #104	; 0x68
 8001cae:	b570      	push	{r4, r5, r6, lr}
 8001cb0:	1e4d      	subs	r5, r1, #1
 8001cb2:	4355      	muls	r5, r2
 8001cb4:	460e      	mov	r6, r1
 8001cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cba:	f7ff fdcd 	bl	8001858 <_malloc_r>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	b140      	cbz	r0, 8001cd4 <__sfmoreglue+0x28>
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8001cc8:	300c      	adds	r0, #12
 8001cca:	60a0      	str	r0, [r4, #8]
 8001ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cd0:	f7ff fd72 	bl	80017b8 <memset>
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}

08001cd8 <__sfp_lock_acquire>:
 8001cd8:	4801      	ldr	r0, [pc, #4]	; (8001ce0 <__sfp_lock_acquire+0x8>)
 8001cda:	f000 b8b3 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 8001cde:	bf00      	nop
 8001ce0:	20000561 	.word	0x20000561

08001ce4 <__sfp_lock_release>:
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <__sfp_lock_release+0x8>)
 8001ce6:	f000 b8ae 	b.w	8001e46 <__retarget_lock_release_recursive>
 8001cea:	bf00      	nop
 8001cec:	20000561 	.word	0x20000561

08001cf0 <__sinit_lock_acquire>:
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <__sinit_lock_acquire+0x8>)
 8001cf2:	f000 b8a7 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 8001cf6:	bf00      	nop
 8001cf8:	20000562 	.word	0x20000562

08001cfc <__sinit_lock_release>:
 8001cfc:	4801      	ldr	r0, [pc, #4]	; (8001d04 <__sinit_lock_release+0x8>)
 8001cfe:	f000 b8a2 	b.w	8001e46 <__retarget_lock_release_recursive>
 8001d02:	bf00      	nop
 8001d04:	20000562 	.word	0x20000562

08001d08 <__sinit>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	f7ff fff0 	bl	8001cf0 <__sinit_lock_acquire>
 8001d10:	69a3      	ldr	r3, [r4, #24]
 8001d12:	b11b      	cbz	r3, 8001d1c <__sinit+0x14>
 8001d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d18:	f7ff bff0 	b.w	8001cfc <__sinit_lock_release>
 8001d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d20:	6523      	str	r3, [r4, #80]	; 0x50
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <__sinit+0x68>)
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <__sinit+0x6c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d2a:	42a3      	cmp	r3, r4
 8001d2c:	bf08      	it	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	4620      	mov	r0, r4
 8001d32:	bf08      	it	eq
 8001d34:	61a3      	streq	r3, [r4, #24]
 8001d36:	f000 f81f 	bl	8001d78 <__sfp>
 8001d3a:	6060      	str	r0, [r4, #4]
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f000 f81b 	bl	8001d78 <__sfp>
 8001d42:	60a0      	str	r0, [r4, #8]
 8001d44:	4620      	mov	r0, r4
 8001d46:	f000 f817 	bl	8001d78 <__sfp>
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	60e0      	str	r0, [r4, #12]
 8001d50:	6860      	ldr	r0, [r4, #4]
 8001d52:	f7ff ff81 	bl	8001c58 <std>
 8001d56:	2201      	movs	r2, #1
 8001d58:	2109      	movs	r1, #9
 8001d5a:	68a0      	ldr	r0, [r4, #8]
 8001d5c:	f7ff ff7c 	bl	8001c58 <std>
 8001d60:	2202      	movs	r2, #2
 8001d62:	2112      	movs	r1, #18
 8001d64:	68e0      	ldr	r0, [r4, #12]
 8001d66:	f7ff ff77 	bl	8001c58 <std>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61a3      	str	r3, [r4, #24]
 8001d6e:	e7d1      	b.n	8001d14 <__sinit+0xc>
 8001d70:	08002818 	.word	0x08002818
 8001d74:	08001ca1 	.word	0x08001ca1

08001d78 <__sfp>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	4607      	mov	r7, r0
 8001d7c:	f7ff ffac 	bl	8001cd8 <__sfp_lock_acquire>
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <__sfp+0x84>)
 8001d82:	681e      	ldr	r6, [r3, #0]
 8001d84:	69b3      	ldr	r3, [r6, #24]
 8001d86:	b913      	cbnz	r3, 8001d8e <__sfp+0x16>
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f7ff ffbd 	bl	8001d08 <__sinit>
 8001d8e:	3648      	adds	r6, #72	; 0x48
 8001d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	d503      	bpl.n	8001da0 <__sfp+0x28>
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	b30b      	cbz	r3, 8001de0 <__sfp+0x68>
 8001d9c:	6836      	ldr	r6, [r6, #0]
 8001d9e:	e7f7      	b.n	8001d90 <__sfp+0x18>
 8001da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001da4:	b9d5      	cbnz	r5, 8001ddc <__sfp+0x64>
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <__sfp+0x88>)
 8001da8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001dac:	60e3      	str	r3, [r4, #12]
 8001dae:	6665      	str	r5, [r4, #100]	; 0x64
 8001db0:	f000 f847 	bl	8001e42 <__retarget_lock_init_recursive>
 8001db4:	f7ff ff96 	bl	8001ce4 <__sfp_lock_release>
 8001db8:	2208      	movs	r2, #8
 8001dba:	4629      	mov	r1, r5
 8001dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001dc4:	6025      	str	r5, [r4, #0]
 8001dc6:	61a5      	str	r5, [r4, #24]
 8001dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001dcc:	f7ff fcf4 	bl	80017b8 <memset>
 8001dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001dd8:	4620      	mov	r0, r4
 8001dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ddc:	3468      	adds	r4, #104	; 0x68
 8001dde:	e7d9      	b.n	8001d94 <__sfp+0x1c>
 8001de0:	2104      	movs	r1, #4
 8001de2:	4638      	mov	r0, r7
 8001de4:	f7ff ff62 	bl	8001cac <__sfmoreglue>
 8001de8:	4604      	mov	r4, r0
 8001dea:	6030      	str	r0, [r6, #0]
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d1d5      	bne.n	8001d9c <__sfp+0x24>
 8001df0:	f7ff ff78 	bl	8001ce4 <__sfp_lock_release>
 8001df4:	230c      	movs	r3, #12
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	e7ee      	b.n	8001dd8 <__sfp+0x60>
 8001dfa:	bf00      	nop
 8001dfc:	08002818 	.word	0x08002818
 8001e00:	ffff0001 	.word	0xffff0001

08001e04 <_fwalk_reent>:
 8001e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4606      	mov	r6, r0
 8001e0a:	4688      	mov	r8, r1
 8001e0c:	2700      	movs	r7, #0
 8001e0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e16:	f1b9 0901 	subs.w	r9, r9, #1
 8001e1a:	d505      	bpl.n	8001e28 <_fwalk_reent+0x24>
 8001e1c:	6824      	ldr	r4, [r4, #0]
 8001e1e:	2c00      	cmp	r4, #0
 8001e20:	d1f7      	bne.n	8001e12 <_fwalk_reent+0xe>
 8001e22:	4638      	mov	r0, r7
 8001e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e28:	89ab      	ldrh	r3, [r5, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d907      	bls.n	8001e3e <_fwalk_reent+0x3a>
 8001e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e32:	3301      	adds	r3, #1
 8001e34:	d003      	beq.n	8001e3e <_fwalk_reent+0x3a>
 8001e36:	4629      	mov	r1, r5
 8001e38:	4630      	mov	r0, r6
 8001e3a:	47c0      	blx	r8
 8001e3c:	4307      	orrs	r7, r0
 8001e3e:	3568      	adds	r5, #104	; 0x68
 8001e40:	e7e9      	b.n	8001e16 <_fwalk_reent+0x12>

08001e42 <__retarget_lock_init_recursive>:
 8001e42:	4770      	bx	lr

08001e44 <__retarget_lock_acquire_recursive>:
 8001e44:	4770      	bx	lr

08001e46 <__retarget_lock_release_recursive>:
 8001e46:	4770      	bx	lr

08001e48 <__swhatbuf_r>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	460e      	mov	r6, r1
 8001e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e50:	4614      	mov	r4, r2
 8001e52:	2900      	cmp	r1, #0
 8001e54:	461d      	mov	r5, r3
 8001e56:	b096      	sub	sp, #88	; 0x58
 8001e58:	da08      	bge.n	8001e6c <__swhatbuf_r+0x24>
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001e60:	602a      	str	r2, [r5, #0]
 8001e62:	061a      	lsls	r2, r3, #24
 8001e64:	d410      	bmi.n	8001e88 <__swhatbuf_r+0x40>
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	e00e      	b.n	8001e8a <__swhatbuf_r+0x42>
 8001e6c:	466a      	mov	r2, sp
 8001e6e:	f000 fbb1 	bl	80025d4 <_fstat_r>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	dbf1      	blt.n	8001e5a <__swhatbuf_r+0x12>
 8001e76:	9a01      	ldr	r2, [sp, #4]
 8001e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e80:	425a      	negs	r2, r3
 8001e82:	415a      	adcs	r2, r3
 8001e84:	602a      	str	r2, [r5, #0]
 8001e86:	e7ee      	b.n	8001e66 <__swhatbuf_r+0x1e>
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	b016      	add	sp, #88	; 0x58
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e94 <__smakebuf_r>:
 8001e94:	898b      	ldrh	r3, [r1, #12]
 8001e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e98:	079d      	lsls	r5, r3, #30
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	d507      	bpl.n	8001eb0 <__smakebuf_r+0x1c>
 8001ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ea4:	6023      	str	r3, [r4, #0]
 8001ea6:	6123      	str	r3, [r4, #16]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	6163      	str	r3, [r4, #20]
 8001eac:	b002      	add	sp, #8
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	466a      	mov	r2, sp
 8001eb2:	ab01      	add	r3, sp, #4
 8001eb4:	f7ff ffc8 	bl	8001e48 <__swhatbuf_r>
 8001eb8:	9900      	ldr	r1, [sp, #0]
 8001eba:	4605      	mov	r5, r0
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f7ff fccb 	bl	8001858 <_malloc_r>
 8001ec2:	b948      	cbnz	r0, 8001ed8 <__smakebuf_r+0x44>
 8001ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ec8:	059a      	lsls	r2, r3, #22
 8001eca:	d4ef      	bmi.n	8001eac <__smakebuf_r+0x18>
 8001ecc:	f023 0303 	bic.w	r3, r3, #3
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	e7e3      	b.n	8001ea0 <__smakebuf_r+0xc>
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <__smakebuf_r+0x7c>)
 8001eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	6020      	str	r0, [r4, #0]
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	81a3      	strh	r3, [r4, #12]
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	6120      	str	r0, [r4, #16]
 8001eea:	6163      	str	r3, [r4, #20]
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	b15b      	cbz	r3, 8001f08 <__smakebuf_r+0x74>
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef6:	f000 fb7f 	bl	80025f8 <_isatty_r>
 8001efa:	b128      	cbz	r0, 8001f08 <__smakebuf_r+0x74>
 8001efc:	89a3      	ldrh	r3, [r4, #12]
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	89a0      	ldrh	r0, [r4, #12]
 8001f0a:	4305      	orrs	r5, r0
 8001f0c:	81a5      	strh	r5, [r4, #12]
 8001f0e:	e7cd      	b.n	8001eac <__smakebuf_r+0x18>
 8001f10:	08001ca1 	.word	0x08001ca1

08001f14 <__malloc_lock>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__malloc_lock+0x8>)
 8001f16:	f7ff bf95 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	20000560 	.word	0x20000560

08001f20 <__malloc_unlock>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__malloc_unlock+0x8>)
 8001f22:	f7ff bf90 	b.w	8001e46 <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	20000560 	.word	0x20000560

08001f2c <__sfputc_r>:
 8001f2c:	6893      	ldr	r3, [r2, #8]
 8001f2e:	b410      	push	{r4}
 8001f30:	3b01      	subs	r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	6093      	str	r3, [r2, #8]
 8001f36:	da07      	bge.n	8001f48 <__sfputc_r+0x1c>
 8001f38:	6994      	ldr	r4, [r2, #24]
 8001f3a:	42a3      	cmp	r3, r4
 8001f3c:	db01      	blt.n	8001f42 <__sfputc_r+0x16>
 8001f3e:	290a      	cmp	r1, #10
 8001f40:	d102      	bne.n	8001f48 <__sfputc_r+0x1c>
 8001f42:	bc10      	pop	{r4}
 8001f44:	f7ff bd0a 	b.w	800195c <__swbuf_r>
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	1c58      	adds	r0, r3, #1
 8001f4c:	6010      	str	r0, [r2, #0]
 8001f4e:	7019      	strb	r1, [r3, #0]
 8001f50:	4608      	mov	r0, r1
 8001f52:	bc10      	pop	{r4}
 8001f54:	4770      	bx	lr

08001f56 <__sfputs_r>:
 8001f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f58:	4606      	mov	r6, r0
 8001f5a:	460f      	mov	r7, r1
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	18d5      	adds	r5, r2, r3
 8001f60:	42ac      	cmp	r4, r5
 8001f62:	d101      	bne.n	8001f68 <__sfputs_r+0x12>
 8001f64:	2000      	movs	r0, #0
 8001f66:	e007      	b.n	8001f78 <__sfputs_r+0x22>
 8001f68:	463a      	mov	r2, r7
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f70:	f7ff ffdc 	bl	8001f2c <__sfputc_r>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d1f3      	bne.n	8001f60 <__sfputs_r+0xa>
 8001f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f7c <_vfiprintf_r>:
 8001f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f80:	460d      	mov	r5, r1
 8001f82:	4614      	mov	r4, r2
 8001f84:	4698      	mov	r8, r3
 8001f86:	4606      	mov	r6, r0
 8001f88:	b09d      	sub	sp, #116	; 0x74
 8001f8a:	b118      	cbz	r0, 8001f94 <_vfiprintf_r+0x18>
 8001f8c:	6983      	ldr	r3, [r0, #24]
 8001f8e:	b90b      	cbnz	r3, 8001f94 <_vfiprintf_r+0x18>
 8001f90:	f7ff feba 	bl	8001d08 <__sinit>
 8001f94:	4b89      	ldr	r3, [pc, #548]	; (80021bc <_vfiprintf_r+0x240>)
 8001f96:	429d      	cmp	r5, r3
 8001f98:	d11b      	bne.n	8001fd2 <_vfiprintf_r+0x56>
 8001f9a:	6875      	ldr	r5, [r6, #4]
 8001f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f9e:	07d9      	lsls	r1, r3, #31
 8001fa0:	d405      	bmi.n	8001fae <_vfiprintf_r+0x32>
 8001fa2:	89ab      	ldrh	r3, [r5, #12]
 8001fa4:	059a      	lsls	r2, r3, #22
 8001fa6:	d402      	bmi.n	8001fae <_vfiprintf_r+0x32>
 8001fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001faa:	f7ff ff4b 	bl	8001e44 <__retarget_lock_acquire_recursive>
 8001fae:	89ab      	ldrh	r3, [r5, #12]
 8001fb0:	071b      	lsls	r3, r3, #28
 8001fb2:	d501      	bpl.n	8001fb8 <_vfiprintf_r+0x3c>
 8001fb4:	692b      	ldr	r3, [r5, #16]
 8001fb6:	b9eb      	cbnz	r3, 8001ff4 <_vfiprintf_r+0x78>
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff fd20 	bl	8001a00 <__swsetup_r>
 8001fc0:	b1c0      	cbz	r0, 8001ff4 <_vfiprintf_r+0x78>
 8001fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fc4:	07dc      	lsls	r4, r3, #31
 8001fc6:	d50e      	bpl.n	8001fe6 <_vfiprintf_r+0x6a>
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	b01d      	add	sp, #116	; 0x74
 8001fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <_vfiprintf_r+0x244>)
 8001fd4:	429d      	cmp	r5, r3
 8001fd6:	d101      	bne.n	8001fdc <_vfiprintf_r+0x60>
 8001fd8:	68b5      	ldr	r5, [r6, #8]
 8001fda:	e7df      	b.n	8001f9c <_vfiprintf_r+0x20>
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <_vfiprintf_r+0x248>)
 8001fde:	429d      	cmp	r5, r3
 8001fe0:	bf08      	it	eq
 8001fe2:	68f5      	ldreq	r5, [r6, #12]
 8001fe4:	e7da      	b.n	8001f9c <_vfiprintf_r+0x20>
 8001fe6:	89ab      	ldrh	r3, [r5, #12]
 8001fe8:	0598      	lsls	r0, r3, #22
 8001fea:	d4ed      	bmi.n	8001fc8 <_vfiprintf_r+0x4c>
 8001fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fee:	f7ff ff2a 	bl	8001e46 <__retarget_lock_release_recursive>
 8001ff2:	e7e9      	b.n	8001fc8 <_vfiprintf_r+0x4c>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ffe:	2330      	movs	r3, #48	; 0x30
 8002000:	f04f 0901 	mov.w	r9, #1
 8002004:	f8cd 800c 	str.w	r8, [sp, #12]
 8002008:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80021c8 <_vfiprintf_r+0x24c>
 800200c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002010:	4623      	mov	r3, r4
 8002012:	469a      	mov	sl, r3
 8002014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002018:	b10a      	cbz	r2, 800201e <_vfiprintf_r+0xa2>
 800201a:	2a25      	cmp	r2, #37	; 0x25
 800201c:	d1f9      	bne.n	8002012 <_vfiprintf_r+0x96>
 800201e:	ebba 0b04 	subs.w	fp, sl, r4
 8002022:	d00b      	beq.n	800203c <_vfiprintf_r+0xc0>
 8002024:	465b      	mov	r3, fp
 8002026:	4622      	mov	r2, r4
 8002028:	4629      	mov	r1, r5
 800202a:	4630      	mov	r0, r6
 800202c:	f7ff ff93 	bl	8001f56 <__sfputs_r>
 8002030:	3001      	adds	r0, #1
 8002032:	f000 80aa 	beq.w	800218a <_vfiprintf_r+0x20e>
 8002036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002038:	445a      	add	r2, fp
 800203a:	9209      	str	r2, [sp, #36]	; 0x24
 800203c:	f89a 3000 	ldrb.w	r3, [sl]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a2 	beq.w	800218a <_vfiprintf_r+0x20e>
 8002046:	2300      	movs	r3, #0
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002050:	f10a 0a01 	add.w	sl, sl, #1
 8002054:	9304      	str	r3, [sp, #16]
 8002056:	9307      	str	r3, [sp, #28]
 8002058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800205c:	931a      	str	r3, [sp, #104]	; 0x68
 800205e:	4654      	mov	r4, sl
 8002060:	2205      	movs	r2, #5
 8002062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002066:	4858      	ldr	r0, [pc, #352]	; (80021c8 <_vfiprintf_r+0x24c>)
 8002068:	f000 fae8 	bl	800263c <memchr>
 800206c:	9a04      	ldr	r2, [sp, #16]
 800206e:	b9d8      	cbnz	r0, 80020a8 <_vfiprintf_r+0x12c>
 8002070:	06d1      	lsls	r1, r2, #27
 8002072:	bf44      	itt	mi
 8002074:	2320      	movmi	r3, #32
 8002076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800207a:	0713      	lsls	r3, r2, #28
 800207c:	bf44      	itt	mi
 800207e:	232b      	movmi	r3, #43	; 0x2b
 8002080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002084:	f89a 3000 	ldrb.w	r3, [sl]
 8002088:	2b2a      	cmp	r3, #42	; 0x2a
 800208a:	d015      	beq.n	80020b8 <_vfiprintf_r+0x13c>
 800208c:	4654      	mov	r4, sl
 800208e:	2000      	movs	r0, #0
 8002090:	f04f 0c0a 	mov.w	ip, #10
 8002094:	9a07      	ldr	r2, [sp, #28]
 8002096:	4621      	mov	r1, r4
 8002098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800209c:	3b30      	subs	r3, #48	; 0x30
 800209e:	2b09      	cmp	r3, #9
 80020a0:	d94e      	bls.n	8002140 <_vfiprintf_r+0x1c4>
 80020a2:	b1b0      	cbz	r0, 80020d2 <_vfiprintf_r+0x156>
 80020a4:	9207      	str	r2, [sp, #28]
 80020a6:	e014      	b.n	80020d2 <_vfiprintf_r+0x156>
 80020a8:	eba0 0308 	sub.w	r3, r0, r8
 80020ac:	fa09 f303 	lsl.w	r3, r9, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	46a2      	mov	sl, r4
 80020b4:	9304      	str	r3, [sp, #16]
 80020b6:	e7d2      	b.n	800205e <_vfiprintf_r+0xe2>
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	1d19      	adds	r1, r3, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	9103      	str	r1, [sp, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bfbb      	ittet	lt
 80020c4:	425b      	neglt	r3, r3
 80020c6:	f042 0202 	orrlt.w	r2, r2, #2
 80020ca:	9307      	strge	r3, [sp, #28]
 80020cc:	9307      	strlt	r3, [sp, #28]
 80020ce:	bfb8      	it	lt
 80020d0:	9204      	strlt	r2, [sp, #16]
 80020d2:	7823      	ldrb	r3, [r4, #0]
 80020d4:	2b2e      	cmp	r3, #46	; 0x2e
 80020d6:	d10c      	bne.n	80020f2 <_vfiprintf_r+0x176>
 80020d8:	7863      	ldrb	r3, [r4, #1]
 80020da:	2b2a      	cmp	r3, #42	; 0x2a
 80020dc:	d135      	bne.n	800214a <_vfiprintf_r+0x1ce>
 80020de:	9b03      	ldr	r3, [sp, #12]
 80020e0:	3402      	adds	r4, #2
 80020e2:	1d1a      	adds	r2, r3, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	9203      	str	r2, [sp, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bfb8      	it	lt
 80020ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80020f0:	9305      	str	r3, [sp, #20]
 80020f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80021cc <_vfiprintf_r+0x250>
 80020f6:	2203      	movs	r2, #3
 80020f8:	4650      	mov	r0, sl
 80020fa:	7821      	ldrb	r1, [r4, #0]
 80020fc:	f000 fa9e 	bl	800263c <memchr>
 8002100:	b140      	cbz	r0, 8002114 <_vfiprintf_r+0x198>
 8002102:	2340      	movs	r3, #64	; 0x40
 8002104:	eba0 000a 	sub.w	r0, r0, sl
 8002108:	fa03 f000 	lsl.w	r0, r3, r0
 800210c:	9b04      	ldr	r3, [sp, #16]
 800210e:	3401      	adds	r4, #1
 8002110:	4303      	orrs	r3, r0
 8002112:	9304      	str	r3, [sp, #16]
 8002114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002118:	2206      	movs	r2, #6
 800211a:	482d      	ldr	r0, [pc, #180]	; (80021d0 <_vfiprintf_r+0x254>)
 800211c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002120:	f000 fa8c 	bl	800263c <memchr>
 8002124:	2800      	cmp	r0, #0
 8002126:	d03f      	beq.n	80021a8 <_vfiprintf_r+0x22c>
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <_vfiprintf_r+0x258>)
 800212a:	bb1b      	cbnz	r3, 8002174 <_vfiprintf_r+0x1f8>
 800212c:	9b03      	ldr	r3, [sp, #12]
 800212e:	3307      	adds	r3, #7
 8002130:	f023 0307 	bic.w	r3, r3, #7
 8002134:	3308      	adds	r3, #8
 8002136:	9303      	str	r3, [sp, #12]
 8002138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800213a:	443b      	add	r3, r7
 800213c:	9309      	str	r3, [sp, #36]	; 0x24
 800213e:	e767      	b.n	8002010 <_vfiprintf_r+0x94>
 8002140:	460c      	mov	r4, r1
 8002142:	2001      	movs	r0, #1
 8002144:	fb0c 3202 	mla	r2, ip, r2, r3
 8002148:	e7a5      	b.n	8002096 <_vfiprintf_r+0x11a>
 800214a:	2300      	movs	r3, #0
 800214c:	f04f 0c0a 	mov.w	ip, #10
 8002150:	4619      	mov	r1, r3
 8002152:	3401      	adds	r4, #1
 8002154:	9305      	str	r3, [sp, #20]
 8002156:	4620      	mov	r0, r4
 8002158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800215c:	3a30      	subs	r2, #48	; 0x30
 800215e:	2a09      	cmp	r2, #9
 8002160:	d903      	bls.n	800216a <_vfiprintf_r+0x1ee>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0c5      	beq.n	80020f2 <_vfiprintf_r+0x176>
 8002166:	9105      	str	r1, [sp, #20]
 8002168:	e7c3      	b.n	80020f2 <_vfiprintf_r+0x176>
 800216a:	4604      	mov	r4, r0
 800216c:	2301      	movs	r3, #1
 800216e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002172:	e7f0      	b.n	8002156 <_vfiprintf_r+0x1da>
 8002174:	ab03      	add	r3, sp, #12
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	462a      	mov	r2, r5
 800217a:	4630      	mov	r0, r6
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <_vfiprintf_r+0x25c>)
 800217e:	a904      	add	r1, sp, #16
 8002180:	f3af 8000 	nop.w
 8002184:	4607      	mov	r7, r0
 8002186:	1c78      	adds	r0, r7, #1
 8002188:	d1d6      	bne.n	8002138 <_vfiprintf_r+0x1bc>
 800218a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800218c:	07d9      	lsls	r1, r3, #31
 800218e:	d405      	bmi.n	800219c <_vfiprintf_r+0x220>
 8002190:	89ab      	ldrh	r3, [r5, #12]
 8002192:	059a      	lsls	r2, r3, #22
 8002194:	d402      	bmi.n	800219c <_vfiprintf_r+0x220>
 8002196:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002198:	f7ff fe55 	bl	8001e46 <__retarget_lock_release_recursive>
 800219c:	89ab      	ldrh	r3, [r5, #12]
 800219e:	065b      	lsls	r3, r3, #25
 80021a0:	f53f af12 	bmi.w	8001fc8 <_vfiprintf_r+0x4c>
 80021a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021a6:	e711      	b.n	8001fcc <_vfiprintf_r+0x50>
 80021a8:	ab03      	add	r3, sp, #12
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	462a      	mov	r2, r5
 80021ae:	4630      	mov	r0, r6
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <_vfiprintf_r+0x25c>)
 80021b2:	a904      	add	r1, sp, #16
 80021b4:	f000 f882 	bl	80022bc <_printf_i>
 80021b8:	e7e4      	b.n	8002184 <_vfiprintf_r+0x208>
 80021ba:	bf00      	nop
 80021bc:	0800283c 	.word	0x0800283c
 80021c0:	0800285c 	.word	0x0800285c
 80021c4:	0800281c 	.word	0x0800281c
 80021c8:	0800287c 	.word	0x0800287c
 80021cc:	08002882 	.word	0x08002882
 80021d0:	08002886 	.word	0x08002886
 80021d4:	00000000 	.word	0x00000000
 80021d8:	08001f57 	.word	0x08001f57

080021dc <_printf_common>:
 80021dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e0:	4616      	mov	r6, r2
 80021e2:	4699      	mov	r9, r3
 80021e4:	688a      	ldr	r2, [r1, #8]
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	4607      	mov	r7, r0
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bfb8      	it	lt
 80021ee:	4613      	movlt	r3, r2
 80021f0:	6033      	str	r3, [r6, #0]
 80021f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021f6:	460c      	mov	r4, r1
 80021f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021fc:	b10a      	cbz	r2, 8002202 <_printf_common+0x26>
 80021fe:	3301      	adds	r3, #1
 8002200:	6033      	str	r3, [r6, #0]
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	0699      	lsls	r1, r3, #26
 8002206:	bf42      	ittt	mi
 8002208:	6833      	ldrmi	r3, [r6, #0]
 800220a:	3302      	addmi	r3, #2
 800220c:	6033      	strmi	r3, [r6, #0]
 800220e:	6825      	ldr	r5, [r4, #0]
 8002210:	f015 0506 	ands.w	r5, r5, #6
 8002214:	d106      	bne.n	8002224 <_printf_common+0x48>
 8002216:	f104 0a19 	add.w	sl, r4, #25
 800221a:	68e3      	ldr	r3, [r4, #12]
 800221c:	6832      	ldr	r2, [r6, #0]
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	42ab      	cmp	r3, r5
 8002222:	dc28      	bgt.n	8002276 <_printf_common+0x9a>
 8002224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002228:	1e13      	subs	r3, r2, #0
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	bf18      	it	ne
 800222e:	2301      	movne	r3, #1
 8002230:	0692      	lsls	r2, r2, #26
 8002232:	d42d      	bmi.n	8002290 <_printf_common+0xb4>
 8002234:	4649      	mov	r1, r9
 8002236:	4638      	mov	r0, r7
 8002238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800223c:	47c0      	blx	r8
 800223e:	3001      	adds	r0, #1
 8002240:	d020      	beq.n	8002284 <_printf_common+0xa8>
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	68e5      	ldr	r5, [r4, #12]
 8002246:	f003 0306 	and.w	r3, r3, #6
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf18      	it	ne
 800224e:	2500      	movne	r5, #0
 8002250:	6832      	ldr	r2, [r6, #0]
 8002252:	f04f 0600 	mov.w	r6, #0
 8002256:	68a3      	ldr	r3, [r4, #8]
 8002258:	bf08      	it	eq
 800225a:	1aad      	subeq	r5, r5, r2
 800225c:	6922      	ldr	r2, [r4, #16]
 800225e:	bf08      	it	eq
 8002260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002264:	4293      	cmp	r3, r2
 8002266:	bfc4      	itt	gt
 8002268:	1a9b      	subgt	r3, r3, r2
 800226a:	18ed      	addgt	r5, r5, r3
 800226c:	341a      	adds	r4, #26
 800226e:	42b5      	cmp	r5, r6
 8002270:	d11a      	bne.n	80022a8 <_printf_common+0xcc>
 8002272:	2000      	movs	r0, #0
 8002274:	e008      	b.n	8002288 <_printf_common+0xac>
 8002276:	2301      	movs	r3, #1
 8002278:	4652      	mov	r2, sl
 800227a:	4649      	mov	r1, r9
 800227c:	4638      	mov	r0, r7
 800227e:	47c0      	blx	r8
 8002280:	3001      	adds	r0, #1
 8002282:	d103      	bne.n	800228c <_printf_common+0xb0>
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800228c:	3501      	adds	r5, #1
 800228e:	e7c4      	b.n	800221a <_printf_common+0x3e>
 8002290:	2030      	movs	r0, #48	; 0x30
 8002292:	18e1      	adds	r1, r4, r3
 8002294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800229e:	4422      	add	r2, r4
 80022a0:	3302      	adds	r3, #2
 80022a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022a6:	e7c5      	b.n	8002234 <_printf_common+0x58>
 80022a8:	2301      	movs	r3, #1
 80022aa:	4622      	mov	r2, r4
 80022ac:	4649      	mov	r1, r9
 80022ae:	4638      	mov	r0, r7
 80022b0:	47c0      	blx	r8
 80022b2:	3001      	adds	r0, #1
 80022b4:	d0e6      	beq.n	8002284 <_printf_common+0xa8>
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7d9      	b.n	800226e <_printf_common+0x92>
	...

080022bc <_printf_i>:
 80022bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022c0:	7e0f      	ldrb	r7, [r1, #24]
 80022c2:	4691      	mov	r9, r2
 80022c4:	2f78      	cmp	r7, #120	; 0x78
 80022c6:	4680      	mov	r8, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	469a      	mov	sl, r3
 80022cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022d2:	d807      	bhi.n	80022e4 <_printf_i+0x28>
 80022d4:	2f62      	cmp	r7, #98	; 0x62
 80022d6:	d80a      	bhi.n	80022ee <_printf_i+0x32>
 80022d8:	2f00      	cmp	r7, #0
 80022da:	f000 80d9 	beq.w	8002490 <_printf_i+0x1d4>
 80022de:	2f58      	cmp	r7, #88	; 0x58
 80022e0:	f000 80a4 	beq.w	800242c <_printf_i+0x170>
 80022e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022ec:	e03a      	b.n	8002364 <_printf_i+0xa8>
 80022ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022f2:	2b15      	cmp	r3, #21
 80022f4:	d8f6      	bhi.n	80022e4 <_printf_i+0x28>
 80022f6:	a101      	add	r1, pc, #4	; (adr r1, 80022fc <_printf_i+0x40>)
 80022f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022fc:	08002355 	.word	0x08002355
 8002300:	08002369 	.word	0x08002369
 8002304:	080022e5 	.word	0x080022e5
 8002308:	080022e5 	.word	0x080022e5
 800230c:	080022e5 	.word	0x080022e5
 8002310:	080022e5 	.word	0x080022e5
 8002314:	08002369 	.word	0x08002369
 8002318:	080022e5 	.word	0x080022e5
 800231c:	080022e5 	.word	0x080022e5
 8002320:	080022e5 	.word	0x080022e5
 8002324:	080022e5 	.word	0x080022e5
 8002328:	08002477 	.word	0x08002477
 800232c:	08002399 	.word	0x08002399
 8002330:	08002459 	.word	0x08002459
 8002334:	080022e5 	.word	0x080022e5
 8002338:	080022e5 	.word	0x080022e5
 800233c:	08002499 	.word	0x08002499
 8002340:	080022e5 	.word	0x080022e5
 8002344:	08002399 	.word	0x08002399
 8002348:	080022e5 	.word	0x080022e5
 800234c:	080022e5 	.word	0x080022e5
 8002350:	08002461 	.word	0x08002461
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	602a      	str	r2, [r5, #0]
 800235c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002364:	2301      	movs	r3, #1
 8002366:	e0a4      	b.n	80024b2 <_printf_i+0x1f6>
 8002368:	6820      	ldr	r0, [r4, #0]
 800236a:	6829      	ldr	r1, [r5, #0]
 800236c:	0606      	lsls	r6, r0, #24
 800236e:	f101 0304 	add.w	r3, r1, #4
 8002372:	d50a      	bpl.n	800238a <_printf_i+0xce>
 8002374:	680e      	ldr	r6, [r1, #0]
 8002376:	602b      	str	r3, [r5, #0]
 8002378:	2e00      	cmp	r6, #0
 800237a:	da03      	bge.n	8002384 <_printf_i+0xc8>
 800237c:	232d      	movs	r3, #45	; 0x2d
 800237e:	4276      	negs	r6, r6
 8002380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002384:	230a      	movs	r3, #10
 8002386:	485e      	ldr	r0, [pc, #376]	; (8002500 <_printf_i+0x244>)
 8002388:	e019      	b.n	80023be <_printf_i+0x102>
 800238a:	680e      	ldr	r6, [r1, #0]
 800238c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	bf18      	it	ne
 8002394:	b236      	sxthne	r6, r6
 8002396:	e7ef      	b.n	8002378 <_printf_i+0xbc>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	6820      	ldr	r0, [r4, #0]
 800239c:	1d19      	adds	r1, r3, #4
 800239e:	6029      	str	r1, [r5, #0]
 80023a0:	0601      	lsls	r1, r0, #24
 80023a2:	d501      	bpl.n	80023a8 <_printf_i+0xec>
 80023a4:	681e      	ldr	r6, [r3, #0]
 80023a6:	e002      	b.n	80023ae <_printf_i+0xf2>
 80023a8:	0646      	lsls	r6, r0, #25
 80023aa:	d5fb      	bpl.n	80023a4 <_printf_i+0xe8>
 80023ac:	881e      	ldrh	r6, [r3, #0]
 80023ae:	2f6f      	cmp	r7, #111	; 0x6f
 80023b0:	bf0c      	ite	eq
 80023b2:	2308      	moveq	r3, #8
 80023b4:	230a      	movne	r3, #10
 80023b6:	4852      	ldr	r0, [pc, #328]	; (8002500 <_printf_i+0x244>)
 80023b8:	2100      	movs	r1, #0
 80023ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023be:	6865      	ldr	r5, [r4, #4]
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	bfa8      	it	ge
 80023c4:	6821      	ldrge	r1, [r4, #0]
 80023c6:	60a5      	str	r5, [r4, #8]
 80023c8:	bfa4      	itt	ge
 80023ca:	f021 0104 	bicge.w	r1, r1, #4
 80023ce:	6021      	strge	r1, [r4, #0]
 80023d0:	b90e      	cbnz	r6, 80023d6 <_printf_i+0x11a>
 80023d2:	2d00      	cmp	r5, #0
 80023d4:	d04d      	beq.n	8002472 <_printf_i+0x1b6>
 80023d6:	4615      	mov	r5, r2
 80023d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80023dc:	fb03 6711 	mls	r7, r3, r1, r6
 80023e0:	5dc7      	ldrb	r7, [r0, r7]
 80023e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023e6:	4637      	mov	r7, r6
 80023e8:	42bb      	cmp	r3, r7
 80023ea:	460e      	mov	r6, r1
 80023ec:	d9f4      	bls.n	80023d8 <_printf_i+0x11c>
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d10b      	bne.n	800240a <_printf_i+0x14e>
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	07de      	lsls	r6, r3, #31
 80023f6:	d508      	bpl.n	800240a <_printf_i+0x14e>
 80023f8:	6923      	ldr	r3, [r4, #16]
 80023fa:	6861      	ldr	r1, [r4, #4]
 80023fc:	4299      	cmp	r1, r3
 80023fe:	bfde      	ittt	le
 8002400:	2330      	movle	r3, #48	; 0x30
 8002402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800240a:	1b52      	subs	r2, r2, r5
 800240c:	6122      	str	r2, [r4, #16]
 800240e:	464b      	mov	r3, r9
 8002410:	4621      	mov	r1, r4
 8002412:	4640      	mov	r0, r8
 8002414:	f8cd a000 	str.w	sl, [sp]
 8002418:	aa03      	add	r2, sp, #12
 800241a:	f7ff fedf 	bl	80021dc <_printf_common>
 800241e:	3001      	adds	r0, #1
 8002420:	d14c      	bne.n	80024bc <_printf_i+0x200>
 8002422:	f04f 30ff 	mov.w	r0, #4294967295
 8002426:	b004      	add	sp, #16
 8002428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242c:	4834      	ldr	r0, [pc, #208]	; (8002500 <_printf_i+0x244>)
 800242e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002432:	6829      	ldr	r1, [r5, #0]
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f851 6b04 	ldr.w	r6, [r1], #4
 800243a:	6029      	str	r1, [r5, #0]
 800243c:	061d      	lsls	r5, r3, #24
 800243e:	d514      	bpl.n	800246a <_printf_i+0x1ae>
 8002440:	07df      	lsls	r7, r3, #31
 8002442:	bf44      	itt	mi
 8002444:	f043 0320 	orrmi.w	r3, r3, #32
 8002448:	6023      	strmi	r3, [r4, #0]
 800244a:	b91e      	cbnz	r6, 8002454 <_printf_i+0x198>
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	f023 0320 	bic.w	r3, r3, #32
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	2310      	movs	r3, #16
 8002456:	e7af      	b.n	80023b8 <_printf_i+0xfc>
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	f043 0320 	orr.w	r3, r3, #32
 800245e:	6023      	str	r3, [r4, #0]
 8002460:	2378      	movs	r3, #120	; 0x78
 8002462:	4828      	ldr	r0, [pc, #160]	; (8002504 <_printf_i+0x248>)
 8002464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002468:	e7e3      	b.n	8002432 <_printf_i+0x176>
 800246a:	0659      	lsls	r1, r3, #25
 800246c:	bf48      	it	mi
 800246e:	b2b6      	uxthmi	r6, r6
 8002470:	e7e6      	b.n	8002440 <_printf_i+0x184>
 8002472:	4615      	mov	r5, r2
 8002474:	e7bb      	b.n	80023ee <_printf_i+0x132>
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	6826      	ldr	r6, [r4, #0]
 800247a:	1d18      	adds	r0, r3, #4
 800247c:	6961      	ldr	r1, [r4, #20]
 800247e:	6028      	str	r0, [r5, #0]
 8002480:	0635      	lsls	r5, r6, #24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	d501      	bpl.n	800248a <_printf_i+0x1ce>
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	e002      	b.n	8002490 <_printf_i+0x1d4>
 800248a:	0670      	lsls	r0, r6, #25
 800248c:	d5fb      	bpl.n	8002486 <_printf_i+0x1ca>
 800248e:	8019      	strh	r1, [r3, #0]
 8002490:	2300      	movs	r3, #0
 8002492:	4615      	mov	r5, r2
 8002494:	6123      	str	r3, [r4, #16]
 8002496:	e7ba      	b.n	800240e <_printf_i+0x152>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	1d1a      	adds	r2, r3, #4
 800249e:	602a      	str	r2, [r5, #0]
 80024a0:	681d      	ldr	r5, [r3, #0]
 80024a2:	6862      	ldr	r2, [r4, #4]
 80024a4:	4628      	mov	r0, r5
 80024a6:	f000 f8c9 	bl	800263c <memchr>
 80024aa:	b108      	cbz	r0, 80024b0 <_printf_i+0x1f4>
 80024ac:	1b40      	subs	r0, r0, r5
 80024ae:	6060      	str	r0, [r4, #4]
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	6123      	str	r3, [r4, #16]
 80024b4:	2300      	movs	r3, #0
 80024b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ba:	e7a8      	b.n	800240e <_printf_i+0x152>
 80024bc:	462a      	mov	r2, r5
 80024be:	4649      	mov	r1, r9
 80024c0:	4640      	mov	r0, r8
 80024c2:	6923      	ldr	r3, [r4, #16]
 80024c4:	47d0      	blx	sl
 80024c6:	3001      	adds	r0, #1
 80024c8:	d0ab      	beq.n	8002422 <_printf_i+0x166>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	079b      	lsls	r3, r3, #30
 80024ce:	d413      	bmi.n	80024f8 <_printf_i+0x23c>
 80024d0:	68e0      	ldr	r0, [r4, #12]
 80024d2:	9b03      	ldr	r3, [sp, #12]
 80024d4:	4298      	cmp	r0, r3
 80024d6:	bfb8      	it	lt
 80024d8:	4618      	movlt	r0, r3
 80024da:	e7a4      	b.n	8002426 <_printf_i+0x16a>
 80024dc:	2301      	movs	r3, #1
 80024de:	4632      	mov	r2, r6
 80024e0:	4649      	mov	r1, r9
 80024e2:	4640      	mov	r0, r8
 80024e4:	47d0      	blx	sl
 80024e6:	3001      	adds	r0, #1
 80024e8:	d09b      	beq.n	8002422 <_printf_i+0x166>
 80024ea:	3501      	adds	r5, #1
 80024ec:	68e3      	ldr	r3, [r4, #12]
 80024ee:	9903      	ldr	r1, [sp, #12]
 80024f0:	1a5b      	subs	r3, r3, r1
 80024f2:	42ab      	cmp	r3, r5
 80024f4:	dcf2      	bgt.n	80024dc <_printf_i+0x220>
 80024f6:	e7eb      	b.n	80024d0 <_printf_i+0x214>
 80024f8:	2500      	movs	r5, #0
 80024fa:	f104 0619 	add.w	r6, r4, #25
 80024fe:	e7f5      	b.n	80024ec <_printf_i+0x230>
 8002500:	0800288d 	.word	0x0800288d
 8002504:	0800289e 	.word	0x0800289e

08002508 <__sread>:
 8002508:	b510      	push	{r4, lr}
 800250a:	460c      	mov	r4, r1
 800250c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002510:	f000 f8a2 	bl	8002658 <_read_r>
 8002514:	2800      	cmp	r0, #0
 8002516:	bfab      	itete	ge
 8002518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800251a:	89a3      	ldrhlt	r3, [r4, #12]
 800251c:	181b      	addge	r3, r3, r0
 800251e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002522:	bfac      	ite	ge
 8002524:	6563      	strge	r3, [r4, #84]	; 0x54
 8002526:	81a3      	strhlt	r3, [r4, #12]
 8002528:	bd10      	pop	{r4, pc}

0800252a <__swrite>:
 800252a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800252e:	461f      	mov	r7, r3
 8002530:	898b      	ldrh	r3, [r1, #12]
 8002532:	4605      	mov	r5, r0
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	460c      	mov	r4, r1
 8002538:	4616      	mov	r6, r2
 800253a:	d505      	bpl.n	8002548 <__swrite+0x1e>
 800253c:	2302      	movs	r3, #2
 800253e:	2200      	movs	r2, #0
 8002540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002544:	f000 f868 	bl	8002618 <_lseek_r>
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	4632      	mov	r2, r6
 800254c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	4628      	mov	r0, r5
 8002554:	463b      	mov	r3, r7
 8002556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800255a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800255e:	f000 b817 	b.w	8002590 <_write_r>

08002562 <__sseek>:
 8002562:	b510      	push	{r4, lr}
 8002564:	460c      	mov	r4, r1
 8002566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800256a:	f000 f855 	bl	8002618 <_lseek_r>
 800256e:	1c43      	adds	r3, r0, #1
 8002570:	89a3      	ldrh	r3, [r4, #12]
 8002572:	bf15      	itete	ne
 8002574:	6560      	strne	r0, [r4, #84]	; 0x54
 8002576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800257a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800257e:	81a3      	strheq	r3, [r4, #12]
 8002580:	bf18      	it	ne
 8002582:	81a3      	strhne	r3, [r4, #12]
 8002584:	bd10      	pop	{r4, pc}

08002586 <__sclose>:
 8002586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800258a:	f000 b813 	b.w	80025b4 <_close_r>
	...

08002590 <_write_r>:
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	2200      	movs	r2, #0
 800259a:	4d05      	ldr	r5, [pc, #20]	; (80025b0 <_write_r+0x20>)
 800259c:	602a      	str	r2, [r5, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	f7fe fb5e 	bl	8000c60 <_write>
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	d102      	bne.n	80025ae <_write_r+0x1e>
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	b103      	cbz	r3, 80025ae <_write_r+0x1e>
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	20000564 	.word	0x20000564

080025b4 <_close_r>:
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	2300      	movs	r3, #0
 80025b8:	4d05      	ldr	r5, [pc, #20]	; (80025d0 <_close_r+0x1c>)
 80025ba:	4604      	mov	r4, r0
 80025bc:	4608      	mov	r0, r1
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	f000 f85c 	bl	800267c <_close>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d102      	bne.n	80025ce <_close_r+0x1a>
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	b103      	cbz	r3, 80025ce <_close_r+0x1a>
 80025cc:	6023      	str	r3, [r4, #0]
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	20000564 	.word	0x20000564

080025d4 <_fstat_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	2300      	movs	r3, #0
 80025d8:	4d06      	ldr	r5, [pc, #24]	; (80025f4 <_fstat_r+0x20>)
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	f000 f853 	bl	800268c <_fstat>
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	d102      	bne.n	80025f0 <_fstat_r+0x1c>
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	b103      	cbz	r3, 80025f0 <_fstat_r+0x1c>
 80025ee:	6023      	str	r3, [r4, #0]
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	bf00      	nop
 80025f4:	20000564 	.word	0x20000564

080025f8 <_isatty_r>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	2300      	movs	r3, #0
 80025fc:	4d05      	ldr	r5, [pc, #20]	; (8002614 <_isatty_r+0x1c>)
 80025fe:	4604      	mov	r4, r0
 8002600:	4608      	mov	r0, r1
 8002602:	602b      	str	r3, [r5, #0]
 8002604:	f000 f84a 	bl	800269c <_isatty>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d102      	bne.n	8002612 <_isatty_r+0x1a>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	b103      	cbz	r3, 8002612 <_isatty_r+0x1a>
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	20000564 	.word	0x20000564

08002618 <_lseek_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	2200      	movs	r2, #0
 8002622:	4d05      	ldr	r5, [pc, #20]	; (8002638 <_lseek_r+0x20>)
 8002624:	602a      	str	r2, [r5, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f840 	bl	80026ac <_lseek>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d102      	bne.n	8002636 <_lseek_r+0x1e>
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	b103      	cbz	r3, 8002636 <_lseek_r+0x1e>
 8002634:	6023      	str	r3, [r4, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	20000564 	.word	0x20000564

0800263c <memchr>:
 800263c:	4603      	mov	r3, r0
 800263e:	b510      	push	{r4, lr}
 8002640:	b2c9      	uxtb	r1, r1
 8002642:	4402      	add	r2, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	4618      	mov	r0, r3
 8002648:	d101      	bne.n	800264e <memchr+0x12>
 800264a:	2000      	movs	r0, #0
 800264c:	e003      	b.n	8002656 <memchr+0x1a>
 800264e:	7804      	ldrb	r4, [r0, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	428c      	cmp	r4, r1
 8002654:	d1f6      	bne.n	8002644 <memchr+0x8>
 8002656:	bd10      	pop	{r4, pc}

08002658 <_read_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	2200      	movs	r2, #0
 8002662:	4d05      	ldr	r5, [pc, #20]	; (8002678 <_read_r+0x20>)
 8002664:	602a      	str	r2, [r5, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f000 f828 	bl	80026bc <_read>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d102      	bne.n	8002676 <_read_r+0x1e>
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	b103      	cbz	r3, 8002676 <_read_r+0x1e>
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	20000564 	.word	0x20000564

0800267c <_close>:
 800267c:	2258      	movs	r2, #88	; 0x58
 800267e:	4b02      	ldr	r3, [pc, #8]	; (8002688 <_close+0xc>)
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	4770      	bx	lr
 8002688:	20000564 	.word	0x20000564

0800268c <_fstat>:
 800268c:	2258      	movs	r2, #88	; 0x58
 800268e:	4b02      	ldr	r3, [pc, #8]	; (8002698 <_fstat+0xc>)
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	4770      	bx	lr
 8002698:	20000564 	.word	0x20000564

0800269c <_isatty>:
 800269c:	2258      	movs	r2, #88	; 0x58
 800269e:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <_isatty+0xc>)
 80026a0:	2000      	movs	r0, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000564 	.word	0x20000564

080026ac <_lseek>:
 80026ac:	2258      	movs	r2, #88	; 0x58
 80026ae:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <_lseek+0xc>)
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4770      	bx	lr
 80026b8:	20000564 	.word	0x20000564

080026bc <_read>:
 80026bc:	2258      	movs	r2, #88	; 0x58
 80026be:	4b02      	ldr	r3, [pc, #8]	; (80026c8 <_read+0xc>)
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4770      	bx	lr
 80026c8:	20000564 	.word	0x20000564

080026cc <_sbrk>:
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <_sbrk+0x14>)
 80026ce:	4905      	ldr	r1, [pc, #20]	; (80026e4 <_sbrk+0x18>)
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf08      	it	eq
 80026d6:	460b      	moveq	r3, r1
 80026d8:	4418      	add	r0, r3
 80026da:	6010      	str	r0, [r2, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	4770      	bx	lr
 80026e0:	20000568 	.word	0x20000568
 80026e4:	20000570 	.word	0x20000570

080026e8 <_init>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	bf00      	nop
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr

080026f4 <_fini>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr
