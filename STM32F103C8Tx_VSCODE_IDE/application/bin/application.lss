
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08002924 	.word	0x08002924

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08002924 	.word	0x08002924

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_frsub>:
 80005d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005d8:	e002      	b.n	80005e0 <__addsf3>
 80005da:	bf00      	nop

080005dc <__aeabi_fsub>:
 80005dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e0 <__addsf3>:
 80005e0:	0042      	lsls	r2, r0, #1
 80005e2:	bf1f      	itttt	ne
 80005e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005e8:	ea92 0f03 	teqne	r2, r3
 80005ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f4:	d06a      	beq.n	80006cc <__addsf3+0xec>
 80005f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005fe:	bfc1      	itttt	gt
 8000600:	18d2      	addgt	r2, r2, r3
 8000602:	4041      	eorgt	r1, r0
 8000604:	4048      	eorgt	r0, r1
 8000606:	4041      	eorgt	r1, r0
 8000608:	bfb8      	it	lt
 800060a:	425b      	neglt	r3, r3
 800060c:	2b19      	cmp	r3, #25
 800060e:	bf88      	it	hi
 8000610:	4770      	bxhi	lr
 8000612:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800061e:	bf18      	it	ne
 8000620:	4240      	negne	r0, r0
 8000622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000626:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800062e:	bf18      	it	ne
 8000630:	4249      	negne	r1, r1
 8000632:	ea92 0f03 	teq	r2, r3
 8000636:	d03f      	beq.n	80006b8 <__addsf3+0xd8>
 8000638:	f1a2 0201 	sub.w	r2, r2, #1
 800063c:	fa41 fc03 	asr.w	ip, r1, r3
 8000640:	eb10 000c 	adds.w	r0, r0, ip
 8000644:	f1c3 0320 	rsb	r3, r3, #32
 8000648:	fa01 f103 	lsl.w	r1, r1, r3
 800064c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000650:	d502      	bpl.n	8000658 <__addsf3+0x78>
 8000652:	4249      	negs	r1, r1
 8000654:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000658:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800065c:	d313      	bcc.n	8000686 <__addsf3+0xa6>
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d306      	bcc.n	8000672 <__addsf3+0x92>
 8000664:	0840      	lsrs	r0, r0, #1
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	f102 0201 	add.w	r2, r2, #1
 800066e:	2afe      	cmp	r2, #254	; 0xfe
 8000670:	d251      	bcs.n	8000716 <__addsf3+0x136>
 8000672:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000676:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067a:	bf08      	it	eq
 800067c:	f020 0001 	biceq.w	r0, r0, #1
 8000680:	ea40 0003 	orr.w	r0, r0, r3
 8000684:	4770      	bx	lr
 8000686:	0049      	lsls	r1, r1, #1
 8000688:	eb40 0000 	adc.w	r0, r0, r0
 800068c:	3a01      	subs	r2, #1
 800068e:	bf28      	it	cs
 8000690:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000694:	d2ed      	bcs.n	8000672 <__addsf3+0x92>
 8000696:	fab0 fc80 	clz	ip, r0
 800069a:	f1ac 0c08 	sub.w	ip, ip, #8
 800069e:	ebb2 020c 	subs.w	r2, r2, ip
 80006a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80006a6:	bfaa      	itet	ge
 80006a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006ac:	4252      	neglt	r2, r2
 80006ae:	4318      	orrge	r0, r3
 80006b0:	bfbc      	itt	lt
 80006b2:	40d0      	lsrlt	r0, r2
 80006b4:	4318      	orrlt	r0, r3
 80006b6:	4770      	bx	lr
 80006b8:	f092 0f00 	teq	r2, #0
 80006bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c0:	bf06      	itte	eq
 80006c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006c6:	3201      	addeq	r2, #1
 80006c8:	3b01      	subne	r3, #1
 80006ca:	e7b5      	b.n	8000638 <__addsf3+0x58>
 80006cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d4:	bf18      	it	ne
 80006d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006da:	d021      	beq.n	8000720 <__addsf3+0x140>
 80006dc:	ea92 0f03 	teq	r2, r3
 80006e0:	d004      	beq.n	80006ec <__addsf3+0x10c>
 80006e2:	f092 0f00 	teq	r2, #0
 80006e6:	bf08      	it	eq
 80006e8:	4608      	moveq	r0, r1
 80006ea:	4770      	bx	lr
 80006ec:	ea90 0f01 	teq	r0, r1
 80006f0:	bf1c      	itt	ne
 80006f2:	2000      	movne	r0, #0
 80006f4:	4770      	bxne	lr
 80006f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fa:	d104      	bne.n	8000706 <__addsf3+0x126>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	bf28      	it	cs
 8000700:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000704:	4770      	bx	lr
 8000706:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070a:	bf3c      	itt	cc
 800070c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000710:	4770      	bxcc	lr
 8000712:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000716:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800071e:	4770      	bx	lr
 8000720:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000724:	bf16      	itet	ne
 8000726:	4608      	movne	r0, r1
 8000728:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800072c:	4601      	movne	r1, r0
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	bf06      	itte	eq
 8000732:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000736:	ea90 0f01 	teqeq	r0, r1
 800073a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800073e:	4770      	bx	lr

08000740 <__aeabi_ui2f>:
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e004      	b.n	8000750 <__aeabi_i2f+0x8>
 8000746:	bf00      	nop

08000748 <__aeabi_i2f>:
 8000748:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800074c:	bf48      	it	mi
 800074e:	4240      	negmi	r0, r0
 8000750:	ea5f 0c00 	movs.w	ip, r0
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800075c:	4601      	mov	r1, r0
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	e01c      	b.n	800079e <__aeabi_l2f+0x2a>

08000764 <__aeabi_ul2f>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e00a      	b.n	8000788 <__aeabi_l2f+0x14>
 8000772:	bf00      	nop

08000774 <__aeabi_l2f>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000780:	d502      	bpl.n	8000788 <__aeabi_l2f+0x14>
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	ea5f 0c01 	movs.w	ip, r1
 800078c:	bf02      	ittt	eq
 800078e:	4684      	moveq	ip, r0
 8000790:	4601      	moveq	r1, r0
 8000792:	2000      	moveq	r0, #0
 8000794:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000798:	bf08      	it	eq
 800079a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800079e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a2:	fabc f28c 	clz	r2, ip
 80007a6:	3a08      	subs	r2, #8
 80007a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007ac:	db10      	blt.n	80007d0 <__aeabi_l2f+0x5c>
 80007ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b2:	4463      	add	r3, ip
 80007b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b8:	f1c2 0220 	rsb	r2, r2, #32
 80007bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c0:	fa20 f202 	lsr.w	r2, r0, r2
 80007c4:	eb43 0002 	adc.w	r0, r3, r2
 80007c8:	bf08      	it	eq
 80007ca:	f020 0001 	biceq.w	r0, r0, #1
 80007ce:	4770      	bx	lr
 80007d0:	f102 0220 	add.w	r2, r2, #32
 80007d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d8:	f1c2 0220 	rsb	r2, r2, #32
 80007dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e0:	fa21 f202 	lsr.w	r2, r1, r2
 80007e4:	eb43 0002 	adc.w	r0, r3, r2
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007ee:	4770      	bx	lr

080007f0 <__aeabi_fmul>:
 80007f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007f8:	bf1e      	ittt	ne
 80007fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007fe:	ea92 0f0c 	teqne	r2, ip
 8000802:	ea93 0f0c 	teqne	r3, ip
 8000806:	d06f      	beq.n	80008e8 <__aeabi_fmul+0xf8>
 8000808:	441a      	add	r2, r3
 800080a:	ea80 0c01 	eor.w	ip, r0, r1
 800080e:	0240      	lsls	r0, r0, #9
 8000810:	bf18      	it	ne
 8000812:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000816:	d01e      	beq.n	8000856 <__aeabi_fmul+0x66>
 8000818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800081c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000820:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000824:	fba0 3101 	umull	r3, r1, r0, r1
 8000828:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800082c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000830:	bf3e      	ittt	cc
 8000832:	0049      	lslcc	r1, r1, #1
 8000834:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000838:	005b      	lslcc	r3, r3, #1
 800083a:	ea40 0001 	orr.w	r0, r0, r1
 800083e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000842:	2afd      	cmp	r2, #253	; 0xfd
 8000844:	d81d      	bhi.n	8000882 <__aeabi_fmul+0x92>
 8000846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800084e:	bf08      	it	eq
 8000850:	f020 0001 	biceq.w	r0, r0, #1
 8000854:	4770      	bx	lr
 8000856:	f090 0f00 	teq	r0, #0
 800085a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800085e:	bf08      	it	eq
 8000860:	0249      	lsleq	r1, r1, #9
 8000862:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000866:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086a:	3a7f      	subs	r2, #127	; 0x7f
 800086c:	bfc2      	ittt	gt
 800086e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000872:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000876:	4770      	bxgt	lr
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	3a01      	subs	r2, #1
 8000882:	dc5d      	bgt.n	8000940 <__aeabi_fmul+0x150>
 8000884:	f112 0f19 	cmn.w	r2, #25
 8000888:	bfdc      	itt	le
 800088a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800088e:	4770      	bxle	lr
 8000890:	f1c2 0200 	rsb	r2, r2, #0
 8000894:	0041      	lsls	r1, r0, #1
 8000896:	fa21 f102 	lsr.w	r1, r1, r2
 800089a:	f1c2 0220 	rsb	r2, r2, #32
 800089e:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80008a6:	f140 0000 	adc.w	r0, r0, #0
 80008aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ae:	bf08      	it	eq
 80008b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b4:	4770      	bx	lr
 80008b6:	f092 0f00 	teq	r2, #0
 80008ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008be:	bf02      	ittt	eq
 80008c0:	0040      	lsleq	r0, r0, #1
 80008c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008c6:	3a01      	subeq	r2, #1
 80008c8:	d0f9      	beq.n	80008be <__aeabi_fmul+0xce>
 80008ca:	ea40 000c 	orr.w	r0, r0, ip
 80008ce:	f093 0f00 	teq	r3, #0
 80008d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008d6:	bf02      	ittt	eq
 80008d8:	0049      	lsleq	r1, r1, #1
 80008da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008de:	3b01      	subeq	r3, #1
 80008e0:	d0f9      	beq.n	80008d6 <__aeabi_fmul+0xe6>
 80008e2:	ea41 010c 	orr.w	r1, r1, ip
 80008e6:	e78f      	b.n	8000808 <__aeabi_fmul+0x18>
 80008e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008ec:	ea92 0f0c 	teq	r2, ip
 80008f0:	bf18      	it	ne
 80008f2:	ea93 0f0c 	teqne	r3, ip
 80008f6:	d00a      	beq.n	800090e <__aeabi_fmul+0x11e>
 80008f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008fc:	bf18      	it	ne
 80008fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000902:	d1d8      	bne.n	80008b6 <__aeabi_fmul+0xc6>
 8000904:	ea80 0001 	eor.w	r0, r0, r1
 8000908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800090c:	4770      	bx	lr
 800090e:	f090 0f00 	teq	r0, #0
 8000912:	bf17      	itett	ne
 8000914:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000918:	4608      	moveq	r0, r1
 800091a:	f091 0f00 	teqne	r1, #0
 800091e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000922:	d014      	beq.n	800094e <__aeabi_fmul+0x15e>
 8000924:	ea92 0f0c 	teq	r2, ip
 8000928:	d101      	bne.n	800092e <__aeabi_fmul+0x13e>
 800092a:	0242      	lsls	r2, r0, #9
 800092c:	d10f      	bne.n	800094e <__aeabi_fmul+0x15e>
 800092e:	ea93 0f0c 	teq	r3, ip
 8000932:	d103      	bne.n	800093c <__aeabi_fmul+0x14c>
 8000934:	024b      	lsls	r3, r1, #9
 8000936:	bf18      	it	ne
 8000938:	4608      	movne	r0, r1
 800093a:	d108      	bne.n	800094e <__aeabi_fmul+0x15e>
 800093c:	ea80 0001 	eor.w	r0, r0, r1
 8000940:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000944:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000948:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800094c:	4770      	bx	lr
 800094e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000952:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000956:	4770      	bx	lr

08000958 <__aeabi_fdiv>:
 8000958:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000960:	bf1e      	ittt	ne
 8000962:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000966:	ea92 0f0c 	teqne	r2, ip
 800096a:	ea93 0f0c 	teqne	r3, ip
 800096e:	d069      	beq.n	8000a44 <__aeabi_fdiv+0xec>
 8000970:	eba2 0203 	sub.w	r2, r2, r3
 8000974:	ea80 0c01 	eor.w	ip, r0, r1
 8000978:	0249      	lsls	r1, r1, #9
 800097a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800097e:	d037      	beq.n	80009f0 <__aeabi_fdiv+0x98>
 8000980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000984:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000988:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800098c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000990:	428b      	cmp	r3, r1
 8000992:	bf38      	it	cc
 8000994:	005b      	lslcc	r3, r3, #1
 8000996:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800099e:	428b      	cmp	r3, r1
 80009a0:	bf24      	itt	cs
 80009a2:	1a5b      	subcs	r3, r3, r1
 80009a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009ac:	bf24      	itt	cs
 80009ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009ba:	bf24      	itt	cs
 80009bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009c8:	bf24      	itt	cs
 80009ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	bf18      	it	ne
 80009d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009da:	d1e0      	bne.n	800099e <__aeabi_fdiv+0x46>
 80009dc:	2afd      	cmp	r2, #253	; 0xfd
 80009de:	f63f af50 	bhi.w	8000882 <__aeabi_fmul+0x92>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009f8:	327f      	adds	r2, #127	; 0x7f
 80009fa:	bfc2      	ittt	gt
 80009fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a04:	4770      	bxgt	lr
 8000a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	3a01      	subs	r2, #1
 8000a10:	e737      	b.n	8000882 <__aeabi_fmul+0x92>
 8000a12:	f092 0f00 	teq	r2, #0
 8000a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1a:	bf02      	ittt	eq
 8000a1c:	0040      	lsleq	r0, r0, #1
 8000a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a22:	3a01      	subeq	r2, #1
 8000a24:	d0f9      	beq.n	8000a1a <__aeabi_fdiv+0xc2>
 8000a26:	ea40 000c 	orr.w	r0, r0, ip
 8000a2a:	f093 0f00 	teq	r3, #0
 8000a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	bf02      	ittt	eq
 8000a34:	0049      	lsleq	r1, r1, #1
 8000a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3a:	3b01      	subeq	r3, #1
 8000a3c:	d0f9      	beq.n	8000a32 <__aeabi_fdiv+0xda>
 8000a3e:	ea41 010c 	orr.w	r1, r1, ip
 8000a42:	e795      	b.n	8000970 <__aeabi_fdiv+0x18>
 8000a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a48:	ea92 0f0c 	teq	r2, ip
 8000a4c:	d108      	bne.n	8000a60 <__aeabi_fdiv+0x108>
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	f47f af7d 	bne.w	800094e <__aeabi_fmul+0x15e>
 8000a54:	ea93 0f0c 	teq	r3, ip
 8000a58:	f47f af70 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	e776      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a60:	ea93 0f0c 	teq	r3, ip
 8000a64:	d104      	bne.n	8000a70 <__aeabi_fdiv+0x118>
 8000a66:	024b      	lsls	r3, r1, #9
 8000a68:	f43f af4c 	beq.w	8000904 <__aeabi_fmul+0x114>
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	e76e      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a74:	bf18      	it	ne
 8000a76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7a:	d1ca      	bne.n	8000a12 <__aeabi_fdiv+0xba>
 8000a7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a80:	f47f af5c 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a88:	f47f af3c 	bne.w	8000904 <__aeabi_fmul+0x114>
 8000a8c:	e75f      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_f2iz>:
 8000a90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a98:	d30f      	bcc.n	8000aba <__aeabi_f2iz+0x2a>
 8000a9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_f2iz+0x30>
 8000aa4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab4:	bf18      	it	ne
 8000ab6:	4240      	negne	r0, r0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr
 8000ac0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac4:	d101      	bne.n	8000aca <__aeabi_f2iz+0x3a>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d105      	bne.n	8000ad6 <__aeabi_f2iz+0x46>
 8000aca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ace:	bf08      	it	eq
 8000ad0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_f2uiz>:
 8000adc:	0042      	lsls	r2, r0, #1
 8000ade:	d20e      	bcs.n	8000afe <__aeabi_f2uiz+0x22>
 8000ae0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ae4:	d30b      	bcc.n	8000afe <__aeabi_f2uiz+0x22>
 8000ae6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aee:	d409      	bmi.n	8000b04 <__aeabi_f2uiz+0x28>
 8000af0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af8:	fa23 f002 	lsr.w	r0, r3, r2
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr
 8000b04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b08:	d101      	bne.n	8000b0e <__aeabi_f2uiz+0x32>
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_f2uiz+0x38>
 8000b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <main>:
// } 
 
// FILE __stdout;

int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	// uint8_t MID;
	// uint16_t DID;
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
	Bsp_Init();
 8000b20:	f001 f8e4 	bl	8001cec <Bsp_Init>
 	GUI_SPI_Init(); //初始化测试下来要4s钟有点长
 8000b24:	f000 f97e 	bl	8000e24 <GUI_SPI_Init>
	System_Init();
 8000b28:	f000 fe02 	bl	8001730 <System_Init>
		// FLASH_Sector_Erase(0x000000);
		// FLASH_Write_Data(0x000000,data,4);
		// FLASH_Read_Data(0x000000,Rxdata,250);
		//GUI_Test();

		Key_Process();
 8000b2c:	f000 fd34 	bl	8001598 <Key_Process>
		System_Poll();
 8000b30:	f000 ff98 	bl	8001a64 <System_Poll>
		Key_Process();
 8000b34:	e7fa      	b.n	8000b2c <main+0x10>

08000b36 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 8000b92:	2300      	movs	r3, #0
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	e013      	b.n	8000bc0 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	e00a      	b.n	8000bb4 <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <GUI_CLEAR_SCREEN+0x48>)
 8000ba4:	01d2      	lsls	r2, r2, #7
 8000ba6:	440a      	add	r2, r1
 8000ba8:	4413      	add	r3, r2
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b80      	cmp	r3, #128	; 0x80
 8000bb8:	d9f1      	bls.n	8000b9e <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	71bb      	strb	r3, [r7, #6]
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d9e8      	bls.n	8000b98 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200000c0 	.word	0x200000c0

08000bd8 <GUI_Show_Image>:
			Image: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Show_Image(int16_t X, int16_t Y,uint8_t Height,uint8_t Width, const uint8_t *Image){
 8000bd8:	b490      	push	{r4, r7}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4604      	mov	r4, r0
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4623      	mov	r3, r4
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	4603      	mov	r3, r0
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	70fb      	strb	r3, [r7, #3]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	70bb      	strb	r3, [r7, #2]
	uint8_t	across_line = (Height-1) / 8 + 1 ; 			//先看占几行
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da00      	bge.n	8000c00 <GUI_Show_Image+0x28>
 8000bfe:	3307      	adds	r3, #7
 8000c00:	10db      	asrs	r3, r3, #3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	727b      	strb	r3, [r7, #9]
	int16_t Page, shift;
	for (uint8_t j = 0; j < across_line; j++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	72fb      	strb	r3, [r7, #11]
 8000c0c:	e0b5      	b.n	8000d7a <GUI_Show_Image+0x1a2>
	{	
		for (uint8_t i = 0; i < Width ; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	72bb      	strb	r3, [r7, #10]
 8000c12:	e0aa      	b.n	8000d6a <GUI_Show_Image+0x192>
		{	
			if ((X + i) > 127 || (X + i) < 0)
 8000c14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c18:	7abb      	ldrb	r3, [r7, #10]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1e:	f300 80a0 	bgt.w	8000d62 <GUI_Show_Image+0x18a>
 8000c22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c26:	7abb      	ldrb	r3, [r7, #10]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f2c0 8099 	blt.w	8000d62 <GUI_Show_Image+0x18a>
			{
				continue;
			}
			shift = Y % 8;
 8000c30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c34:	425a      	negs	r2, r3
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	f002 0207 	and.w	r2, r2, #7
 8000c3e:	bf58      	it	pl
 8000c40:	4253      	negpl	r3, r2
 8000c42:	81bb      	strh	r3, [r7, #12]
			Page = Y / 8;
 8000c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da00      	bge.n	8000c4e <GUI_Show_Image+0x76>
 8000c4c:	3307      	adds	r3, #7
 8000c4e:	10db      	asrs	r3, r3, #3
 8000c50:	81fb      	strh	r3, [r7, #14]

			if (Y < 0)   // Y<-8 的情况可以保证 Page+j<0(j ==0 ) 但是 -8<Y<0的情况会进去像素赋值，而j<0导致i+width出现不准确的情况，我们只需要需要的部分就好了
 8000c52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da07      	bge.n	8000c6a <GUI_Show_Image+0x92>
			{
				Page -= 1;
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	81fb      	strh	r3, [r7, #14]
				shift += 8;
 8000c62:	89bb      	ldrh	r3, [r7, #12]
 8000c64:	3308      	adds	r3, #8
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	81bb      	strh	r3, [r7, #12]
			}
			if ((Page + j) >= 0 && (Page + j) < 8)
 8000c6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c6e:	7afb      	ldrb	r3, [r7, #11]
 8000c70:	4413      	add	r3, r2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db34      	blt.n	8000ce0 <GUI_Show_Image+0x108>
 8000c76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	dc2e      	bgt.n	8000ce0 <GUI_Show_Image+0x108>
			{
				GUI_DISPLAY_BUF[Page + j][X + i] |= Image[i + Width*j] << (shift);
 8000c82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	441a      	add	r2, r3
 8000c8a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c8e:	7abb      	ldrb	r3, [r7, #10]
 8000c90:	440b      	add	r3, r1
 8000c92:	493f      	ldr	r1, [pc, #252]	; (8000d90 <GUI_Show_Image+0x1b8>)
 8000c94:	01d2      	lsls	r2, r2, #7
 8000c96:	440a      	add	r2, r1
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	7ab9      	ldrb	r1, [r7, #10]
 8000ca0:	78bb      	ldrb	r3, [r7, #2]
 8000ca2:	7af8      	ldrb	r0, [r7, #11]
 8000ca4:	fb00 f303 	mul.w	r3, r0, r3
 8000ca8:	440b      	add	r3, r1
 8000caa:	4619      	mov	r1, r3
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	440b      	add	r3, r1
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b258      	sxtb	r0, r3
 8000cc2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc6:	7afb      	ldrb	r3, [r7, #11]
 8000cc8:	441a      	add	r2, r3
 8000cca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000cce:	7abb      	ldrb	r3, [r7, #10]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	b2c0      	uxtb	r0, r0
 8000cd4:	492e      	ldr	r1, [pc, #184]	; (8000d90 <GUI_Show_Image+0x1b8>)
 8000cd6:	01d2      	lsls	r2, r2, #7
 8000cd8:	440a      	add	r2, r1
 8000cda:	4413      	add	r3, r2
 8000cdc:	4602      	mov	r2, r0
 8000cde:	701a      	strb	r2, [r3, #0]
			}
			if ((Page + j + 1) >= 0 && (Page + j + 1) < 8)
 8000ce0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	db3a      	blt.n	8000d64 <GUI_Show_Image+0x18c>
 8000cee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	dc34      	bgt.n	8000d64 <GUI_Show_Image+0x18c>
			{
				GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Image[i + Width*j] >> (8-(shift));
 8000cfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	4413      	add	r3, r2
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d08:	7abb      	ldrb	r3, [r7, #10]
 8000d0a:	440b      	add	r3, r1
 8000d0c:	4920      	ldr	r1, [pc, #128]	; (8000d90 <GUI_Show_Image+0x1b8>)
 8000d0e:	01d2      	lsls	r2, r2, #7
 8000d10:	440a      	add	r2, r1
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25a      	sxtb	r2, r3
 8000d18:	7ab9      	ldrb	r1, [r7, #10]
 8000d1a:	78bb      	ldrb	r3, [r7, #2]
 8000d1c:	7af8      	ldrb	r0, [r7, #11]
 8000d1e:	fb00 f303 	mul.w	r3, r0, r3
 8000d22:	440b      	add	r3, r1
 8000d24:	4619      	mov	r1, r3
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	440b      	add	r3, r1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d32:	f1c3 0308 	rsb	r3, r3, #8
 8000d36:	fa41 f303 	asr.w	r3, r1, r3
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b258      	sxtb	r0, r3
 8000d40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	4413      	add	r3, r2
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d4e:	7abb      	ldrb	r3, [r7, #10]
 8000d50:	440b      	add	r3, r1
 8000d52:	b2c0      	uxtb	r0, r0
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <GUI_Show_Image+0x1b8>)
 8000d56:	01d2      	lsls	r2, r2, #7
 8000d58:	440a      	add	r2, r1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e000      	b.n	8000d64 <GUI_Show_Image+0x18c>
				continue;
 8000d62:	bf00      	nop
		for (uint8_t i = 0; i < Width ; i++)
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	3301      	adds	r3, #1
 8000d68:	72bb      	strb	r3, [r7, #10]
 8000d6a:	7aba      	ldrb	r2, [r7, #10]
 8000d6c:	78bb      	ldrb	r3, [r7, #2]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f4ff af50 	bcc.w	8000c14 <GUI_Show_Image+0x3c>
	for (uint8_t j = 0; j < across_line; j++)
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	3301      	adds	r3, #1
 8000d78:	72fb      	strb	r3, [r7, #11]
 8000d7a:	7afa      	ldrb	r2, [r7, #11]
 8000d7c:	7a7b      	ldrb	r3, [r7, #9]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f4ff af45 	bcc.w	8000c0e <GUI_Show_Image+0x36>
			}
		}
	}

}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc90      	pop	{r4, r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200000c0 	.word	0x200000c0

08000d94 <GUI_Reverse_Y>:
*参    数:'y:要反转的y轴坐标 0<y<64 height：反转行的高度' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Reverse_Y(uint8_t y,uint8_t height){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	u8 across_page = y + height;
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	4413      	add	r3, r2
 8000daa:	737b      	strb	r3, [r7, #13]
	for (uint8_t j = y; j < across_page; j++)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e02b      	b.n	8000e0a <GUI_Reverse_Y+0x76>
	{
		u8 Page = j / 8;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	08db      	lsrs	r3, r3, #3
 8000db6:	733b      	strb	r3, [r7, #12]
		u8 shift = j % 8;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	72fb      	strb	r3, [r7, #11]
		for (uint8_t i = 0; i < 128; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
 8000dc4:	e01a      	b.n	8000dfc <GUI_Reverse_Y+0x68>
		{
			GUI_DISPLAY_BUF[Page][i] ^= 0x01 << shift; //对行取反
 8000dc6:	7b3a      	ldrb	r2, [r7, #12]
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	4915      	ldr	r1, [pc, #84]	; (8000e20 <GUI_Reverse_Y+0x8c>)
 8000dcc:	01d2      	lsls	r2, r2, #7
 8000dce:	440a      	add	r2, r1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4053      	eors	r3, r2
 8000de2:	b259      	sxtb	r1, r3
 8000de4:	7b3a      	ldrb	r2, [r7, #12]
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	b2c8      	uxtb	r0, r1
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <GUI_Reverse_Y+0x8c>)
 8000dec:	01d2      	lsls	r2, r2, #7
 8000dee:	440a      	add	r2, r1
 8000df0:	4413      	add	r3, r2
 8000df2:	4602      	mov	r2, r0
 8000df4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 128; i++)
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dae0      	bge.n	8000dc6 <GUI_Reverse_Y+0x32>
	for (uint8_t j = y; j < across_page; j++)
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	3301      	adds	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3cf      	bcc.n	8000db2 <GUI_Reverse_Y+0x1e>
		}
	}

}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000c0 	.word	0x200000c0

08000e24 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	Bsp_DelayMS(1000); //1000
 8000e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2c:	f000 ff4b 	bl	8001cc6 <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 8000e30:	f001 f910 	bl	8002054 <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(100);  //100
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f000 ff46 	bl	8001cc6 <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 8000e3a:	f001 f915 	bl	8002068 <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 8000e3e:	20ae      	movs	r0, #174	; 0xae
 8000e40:	f001 f8d6 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 8000e44:	20d5      	movs	r0, #213	; 0xd5
 8000e46:	f001 f8d3 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xf0);//[3:0],分频因子;[7:4],震荡频率
 8000e4a:	20f0      	movs	r0, #240	; 0xf0
 8000e4c:	f001 f8d0 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xd9);//设置时钟分频因子,震荡频率
 8000e50:	20d9      	movs	r0, #217	; 0xd9
 8000e52:	f001 f8cd 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x11);//[3:0],分频因子;[7:4],震荡频率
 8000e56:	2011      	movs	r0, #17
 8000e58:	f001 f8ca 	bl	8001ff0 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x81);//设置对比度
 8000e5c:	2081      	movs	r0, #129	; 0x81
 8000e5e:	f001 f8c7 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 8000e62:	207f      	movs	r0, #127	; 0x7f
 8000e64:	f001 f8c4 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 8000e68:	208d      	movs	r0, #141	; 0x8d
 8000e6a:	f001 f8c1 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 8000e6e:	2014      	movs	r0, #20
 8000e70:	f001 f8be 	bl	8001ff0 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 8000e74:	2020      	movs	r0, #32
 8000e76:	f001 f8bb 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f001 f8b8 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 8000e80:	2021      	movs	r0, #33	; 0x21
 8000e82:	f001 f8b5 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000e86:	2000      	movs	r0, #0
 8000e88:	f001 f8b2 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 8000e8c:	207f      	movs	r0, #127	; 0x7f
 8000e8e:	f001 f8af 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 8000e92:	2022      	movs	r0, #34	; 0x22
 8000e94:	f001 f8ac 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f001 f8a9 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f001 f8a6 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 8000ea4:	20c9      	movs	r0, #201	; 0xc9
 8000ea6:	f001 f8a3 	bl	8001ff0 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 8000eaa:	20a1      	movs	r0, #161	; 0xa1
 8000eac:	f001 f8a0 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 8000eb0:	20a4      	movs	r0, #164	; 0xa4
 8000eb2:	f001 f89d 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 8000eb6:	20a6      	movs	r0, #166	; 0xa6
 8000eb8:	f001 f89a 	bl	8001ff0 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 8000ebc:	20af      	movs	r0, #175	; 0xaf
 8000ebe:	f001 f897 	bl	8001ff0 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 8000ec2:	2056      	movs	r0, #86	; 0x56
 8000ec4:	f001 f894 	bl	8001ff0 <Bsp_SPI_Send_CMD>
   Bsp_DelayMS(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f000 fefc 	bl	8001cc6 <Bsp_DelayMS>
   Bsp_SPI_DMA_Init();//DMA初始化
 8000ece:	f000 ff17 	bl	8001d00 <Bsp_SPI_DMA_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <GUI_Animation_move>:
	GUI_Show_Image(Sys_MainPage.left_icon.current_x,Sys_MainPage.left_icon.current_y,44,44,config_Icon);
	
	return;
}

void GUI_Animation_move(void){
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
	
	if (SystemCtrl.currentPage == SYSTEM_MAIN_PAGE )
 8000ede:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <GUI_Animation_move+0x1bc>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 80e2 	bne.w	80010ac <GUI_Animation_move+0x1d4>
	{
		Sys_MainPage.mid_icon.current_x = kp*Sys_MainPage.mid_icon.current_x + (1-kp)*(Sys_MainPage.mid_icon.target_x);
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4a6b      	ldr	r2, [pc, #428]	; (800109c <GUI_Animation_move+0x1c4>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc7c 	bl	80007f0 <__aeabi_fmul>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461c      	mov	r4, r3
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <GUI_Animation_move+0x1c4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f06:	f7ff fb69 	bl	80005dc <__aeabi_fsub>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b62      	ldr	r3, [pc, #392]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4610      	mov	r0, r2
 8000f16:	f7ff fc6b 	bl	80007f0 <__aeabi_fmul>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff fb5e 	bl	80005e0 <__addsf3>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f2a:	611a      	str	r2, [r3, #16]
		Sys_MainPage.left_icon.current_x = kp*Sys_MainPage.left_icon.current_x + (1-kp)*(Sys_MainPage.left_icon.target_x);
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a5a      	ldr	r2, [pc, #360]	; (800109c <GUI_Animation_move+0x1c4>)
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc5a 	bl	80007f0 <__aeabi_fmul>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461c      	mov	r4, r3
 8000f40:	4b56      	ldr	r3, [pc, #344]	; (800109c <GUI_Animation_move+0x1c4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f4a:	f7ff fb47 	bl	80005dc <__aeabi_fsub>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b51      	ldr	r3, [pc, #324]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f7ff fc49 	bl	80007f0 <__aeabi_fmul>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4620      	mov	r0, r4
 8000f64:	f7ff fb3c 	bl	80005e0 <__addsf3>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f6e:	601a      	str	r2, [r3, #0]
		Sys_MainPage.right_icon.current_x = kp*Sys_MainPage.right_icon.current_x + (1-kp)*(Sys_MainPage.right_icon.target_x);
 8000f70:	4b49      	ldr	r3, [pc, #292]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a49      	ldr	r2, [pc, #292]	; (800109c <GUI_Animation_move+0x1c4>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fc38 	bl	80007f0 <__aeabi_fmul>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461c      	mov	r4, r3
 8000f84:	4b45      	ldr	r3, [pc, #276]	; (800109c <GUI_Animation_move+0x1c4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f8e:	f7ff fb25 	bl	80005dc <__aeabi_fsub>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f7ff fc27 	bl	80007f0 <__aeabi_fmul>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fb1a 	bl	80005e0 <__addsf3>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fb2:	621a      	str	r2, [r3, #32]

		// Sys_MainPage.mid_icon.current_y = kp*Sys_MainPage.mid_font.current_y + (1-kp)*Sys_MainPage.mid_icon.target_y;
		// Sys_MainPage.left_icon.current_y = kp*Sys_MainPage.left_icon.current_y + (1-kp)*Sys_MainPage.left_icon.target_y;
		// Sys_MainPage.right_icon.current_y = kp*Sys_MainPage.right_icon.current_y + (1-kp)*Sys_MainPage.right_icon.target_y;

		Sys_MainPage.mid_icon.current_y = Sys_MainPage.mid_icon.target_y;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a37      	ldr	r2, [pc, #220]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fba:	6153      	str	r3, [r2, #20]
		Sys_MainPage.left_icon.current_y = Sys_MainPage.left_icon.target_y;
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fc2:	6053      	str	r3, [r2, #4]
		Sys_MainPage.right_icon.current_y = Sys_MainPage.right_icon.target_y;
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	4a33      	ldr	r2, [pc, #204]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fca:	6253      	str	r3, [r2, #36]	; 0x24
		// GUI_Show_Frame();
		if (round(Sys_MainPage.right_icon.current_x) != round(Sys_MainPage.right_icon.target_x) )
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa1f 	bl	8000414 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f001 fc55 	bl	800288c <round>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <GUI_Animation_move+0x1c0>)
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa12 	bl	8000414 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f001 fc48 	bl	800288c <round>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fab4 	bl	8000570 <__aeabi_dcmpeq>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <GUI_Animation_move+0x13a>
		{
			GUI_CLEAR_SCREEN();
 800100e:	f7ff fdbd 	bl	8000b8c <GUI_CLEAR_SCREEN>
		}

		GUI_Show_Image(Sys_MainPage.right_icon.current_x,Sys_MainPage.right_icon.current_y,44,44,Set_Icon);
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <GUI_Animation_move+0x1c0>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fd3a 	bl	8000a90 <__aeabi_f2iz>
 800101c:	4603      	mov	r3, r0
 800101e:	b21c      	sxth	r4, r3
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <GUI_Animation_move+0x1c0>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fd33 	bl	8000a90 <__aeabi_f2iz>
 800102a:	4603      	mov	r3, r0
 800102c:	b219      	sxth	r1, r3
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GUI_Animation_move+0x1c8>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	232c      	movs	r3, #44	; 0x2c
 8001034:	222c      	movs	r2, #44	; 0x2c
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fdce 	bl	8000bd8 <GUI_Show_Image>
		GUI_Show_Image(Sys_MainPage.mid_icon.current_x,Sys_MainPage.mid_icon.current_y,44,44,train_Icon);
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <GUI_Animation_move+0x1c0>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd25 	bl	8000a90 <__aeabi_f2iz>
 8001046:	4603      	mov	r3, r0
 8001048:	b21c      	sxth	r4, r3
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <GUI_Animation_move+0x1c0>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fd1e 	bl	8000a90 <__aeabi_f2iz>
 8001054:	4603      	mov	r3, r0
 8001056:	b219      	sxth	r1, r3
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <GUI_Animation_move+0x1cc>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	232c      	movs	r3, #44	; 0x2c
 800105e:	222c      	movs	r2, #44	; 0x2c
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff fdb9 	bl	8000bd8 <GUI_Show_Image>
		GUI_Show_Image(Sys_MainPage.left_icon.current_x,Sys_MainPage.left_icon.current_y,44,44,config_Icon);
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <GUI_Animation_move+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd10 	bl	8000a90 <__aeabi_f2iz>
 8001070:	4603      	mov	r3, r0
 8001072:	b21c      	sxth	r4, r3
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <GUI_Animation_move+0x1c0>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fd09 	bl	8000a90 <__aeabi_f2iz>
 800107e:	4603      	mov	r3, r0
 8001080:	b219      	sxth	r1, r3
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <GUI_Animation_move+0x1d0>)
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	232c      	movs	r3, #44	; 0x2c
 8001088:	222c      	movs	r2, #44	; 0x2c
 800108a:	4620      	mov	r0, r4
 800108c:	f7ff fda4 	bl	8000bd8 <GUI_Show_Image>
		
		//Bsp_DelayMS(2);
		return;
 8001090:	e123      	b.n	80012da <GUI_Animation_move+0x402>
 8001092:	bf00      	nop
 8001094:	20000034 	.word	0x20000034
 8001098:	2000004c 	.word	0x2000004c
 800109c:	20000000 	.word	0x20000000
 80010a0:	080029c0 	.word	0x080029c0
 80010a4:	08002bd0 	.word	0x08002bd0
 80010a8:	08002ac8 	.word	0x08002ac8
	}
	if (SystemCtrl.currentPage == SYSTEM_TRAIN_MENU_SELECET_PAGE)
 80010ac:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <GUI_Animation_move+0x408>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	f040 8112 	bne.w	80012da <GUI_Animation_move+0x402>
	{
		
		SystemCtrl.Sys_InverseBox.current_y =kp*SystemCtrl.Sys_InverseBox.current_y + (1-kp)*(SystemCtrl.Sys_InverseBox.target_y);
 80010b6:	4b8a      	ldr	r3, [pc, #552]	; (80012e0 <GUI_Animation_move+0x408>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a8a      	ldr	r2, [pc, #552]	; (80012e4 <GUI_Animation_move+0x40c>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fb95 	bl	80007f0 <__aeabi_fmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4b86      	ldr	r3, [pc, #536]	; (80012e4 <GUI_Animation_move+0x40c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010d4:	f7ff fa82 	bl	80005dc <__aeabi_fsub>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <GUI_Animation_move+0x408>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f7ff fb84 	bl	80007f0 <__aeabi_fmul>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fa77 	bl	80005e0 <__addsf3>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b7a      	ldr	r3, [pc, #488]	; (80012e0 <GUI_Animation_move+0x408>)
 80010f8:	609a      	str	r2, [r3, #8]
        Sys_Rowitem.current_y = kp*Sys_Rowitem.current_y + (1-kp)*(Sys_Rowitem.target_y);
 80010fa:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <GUI_Animation_move+0x410>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a79      	ldr	r2, [pc, #484]	; (80012e4 <GUI_Animation_move+0x40c>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fb73 	bl	80007f0 <__aeabi_fmul>
 800110a:	4603      	mov	r3, r0
 800110c:	461c      	mov	r4, r3
 800110e:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <GUI_Animation_move+0x40c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001118:	f7ff fa60 	bl	80005dc <__aeabi_fsub>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <GUI_Animation_move+0x410>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f7ff fb62 	bl	80007f0 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	4619      	mov	r1, r3
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff fa55 	bl	80005e0 <__addsf3>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <GUI_Animation_move+0x410>)
 800113c:	605a      	str	r2, [r3, #4]
		
		// SystemCtrl.Sys_InverseBox.current_y = Sys_MainPage.left_icon.target_y;
		// Sys_MainPage.right_icon.current_y = Sys_MainPage.right_icon.target_y;
		if ((round(Sys_Rowitem.current_y) != Sys_Rowitem.target_y) || (round(SystemCtrl.Sys_InverseBox.current_y) != round(SystemCtrl.Sys_InverseBox.target_y)))
 800113e:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <GUI_Animation_move+0x410>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f966 	bl	8000414 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f001 fb9c 	bl	800288c <round>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <GUI_Animation_move+0x410>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f959 	bl	8000414 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff fa01 	bl	8000570 <__aeabi_dcmpeq>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <GUI_Animation_move+0x2de>
 8001174:	4b5a      	ldr	r3, [pc, #360]	; (80012e0 <GUI_Animation_move+0x408>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f94b 	bl	8000414 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f001 fb81 	bl	800288c <round>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <GUI_Animation_move+0x408>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f93e 	bl	8000414 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f001 fb74 	bl	800288c <round>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff f9e0 	bl	8000570 <__aeabi_dcmpeq>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <GUI_Animation_move+0x2e2>
		{
			GUI_CLEAR_SCREEN();
 80011b6:	f7ff fce9 	bl	8000b8c <GUI_CLEAR_SCREEN>
		}
		
		if ((round(Sys_Rowitem.current_y) != Sys_Rowitem.target_y) || (round(SystemCtrl.Sys_InverseBox.current_y) != round(SystemCtrl.Sys_InverseBox.target_y)))
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <GUI_Animation_move+0x410>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f928 	bl	8000414 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f001 fb5e 	bl	800288c <round>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <GUI_Animation_move+0x410>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f91b 	bl	8000414 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff f9c3 	bl	8000570 <__aeabi_dcmpeq>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <GUI_Animation_move+0x35a>
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <GUI_Animation_move+0x408>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f90d 	bl	8000414 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f001 fb43 	bl	800288c <round>
 8001206:	4604      	mov	r4, r0
 8001208:	460d      	mov	r5, r1
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <GUI_Animation_move+0x408>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f900 	bl	8000414 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f001 fb36 	bl	800288c <round>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7ff f9a2 	bl	8000570 <__aeabi_dcmpeq>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d153      	bne.n	80012da <GUI_Animation_move+0x402>
		{
			GUI_Show_Image(0,Sys_Rowitem.current_y,16,16,OLED_Test[0].CellMatrix);
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <GUI_Animation_move+0x410>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc2a 	bl	8000a90 <__aeabi_f2iz>
 800123c:	4603      	mov	r3, r0
 800123e:	b219      	sxth	r1, r3
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <GUI_Animation_move+0x414>)
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2310      	movs	r3, #16
 8001246:	2210      	movs	r2, #16
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fcc5 	bl	8000bd8 <GUI_Show_Image>
			GUI_Show_Image(0,Sys_Rowitem.current_y+16,16,16,OLED_Test[1].CellMatrix);
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <GUI_Animation_move+0x410>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f9c2 	bl	80005e0 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc16 	bl	8000a90 <__aeabi_f2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	b219      	sxth	r1, r3
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <GUI_Animation_move+0x418>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2310      	movs	r3, #16
 800126e:	2210      	movs	r2, #16
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fcb1 	bl	8000bd8 <GUI_Show_Image>
			GUI_Show_Image(0,Sys_Rowitem.current_y+32,16,16,OLED_Test[2].CellMatrix);
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <GUI_Animation_move+0x410>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f9ae 	bl	80005e0 <__addsf3>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc02 	bl	8000a90 <__aeabi_f2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	b219      	sxth	r1, r3
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <GUI_Animation_move+0x41c>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	2210      	movs	r2, #16
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fc9d 	bl	8000bd8 <GUI_Show_Image>
			GUI_Show_Image(0,Sys_Rowitem.current_y+48,16,16,OLED_Test[3].CellMatrix);
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <GUI_Animation_move+0x410>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4915      	ldr	r1, [pc, #84]	; (80012f8 <GUI_Animation_move+0x420>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f99b 	bl	80005e0 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fbef 	bl	8000a90 <__aeabi_f2iz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b219      	sxth	r1, r3
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <GUI_Animation_move+0x424>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2310      	movs	r3, #16
 80012bc:	2210      	movs	r2, #16
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fc8a 	bl	8000bd8 <GUI_Show_Image>
		
			GUI_Reverse_Y(SystemCtrl.Sys_InverseBox.current_y,16);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <GUI_Animation_move+0x408>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fc07 	bl	8000adc <__aeabi_f2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2110      	movs	r1, #16
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd5d 	bl	8000d94 <GUI_Reverse_Y>
		
	// 	Bsp_DelayMS(2);
	// 	return;
	// }
	 */
}
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000034 	.word	0x20000034
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000ac 	.word	0x200000ac
 80012ec:	0800293c 	.word	0x0800293c
 80012f0:	0800295d 	.word	0x0800295d
 80012f4:	0800297e 	.word	0x0800297e
 80012f8:	42400000 	.word	0x42400000
 80012fc:	0800299f 	.word	0x0800299f

08001300 <GUI_Shift_Menu>:
*参    数:'' 
*返 回 值:'' 
*说    明: '每次按键按完才能调用一次，不能频繁调用' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Shift_Menu(uint8_t currentPage,uint8_t targetPage){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	4613      	mov	r3, r2
 800130e:	71bb      	strb	r3, [r7, #6]
	u8 base_x = 42,	Delta_x = 44;
 8001310:	232a      	movs	r3, #42	; 0x2a
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	232c      	movs	r3, #44	; 0x2c
 8001316:	73bb      	strb	r3, [r7, #14]
	u8 base_y = 18; //Delta_y = 7
 8001318:	2312      	movs	r3, #18
 800131a:	737b      	strb	r3, [r7, #13]
	if (currentPage == SYSTEM_MAIN_PAGE)//处于ready状态
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80ad 	bne.w	800147e <GUI_Shift_Menu+0x17e>
	{
		switch (targetPage)
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b09      	cmp	r3, #9
 8001328:	f200 80c1 	bhi.w	80014ae <GUI_Shift_Menu+0x1ae>
 800132c:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <GUI_Shift_Menu+0x34>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	0800135d 	.word	0x0800135d
 8001338:	080014af 	.word	0x080014af
 800133c:	080014af 	.word	0x080014af
 8001340:	0800135d 	.word	0x0800135d
 8001344:	080014af 	.word	0x080014af
 8001348:	080014af 	.word	0x080014af
 800134c:	080013bb 	.word	0x080013bb
 8001350:	080014af 	.word	0x080014af
 8001354:	080014af 	.word	0x080014af
 8001358:	0800141d 	.word	0x0800141d
		{
			case SYSTEM_MAIN_PAGE:;
			case SYSTEM_TRAIN_MENU_SELECET_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f9ee 	bl	8000740 <__aeabi_ui2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a55      	ldr	r2, [pc, #340]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 8001368:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x ;
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f9e9 	bl	8000748 <__aeabi_i2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4a50      	ldr	r2, [pc, #320]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800137a:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x ;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	4413      	add	r3, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f9e0 	bl	8000748 <__aeabi_i2f>
 8001388:	4603      	mov	r3, r0
 800138a:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800138c:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f9d5 	bl	8000740 <__aeabi_ui2f>
 8001396:	4603      	mov	r3, r0
 8001398:	4a48      	ldr	r2, [pc, #288]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800139a:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f9ce 	bl	8000740 <__aeabi_ui2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a45      	ldr	r2, [pc, #276]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013a8:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f9c7 	bl	8000740 <__aeabi_ui2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a41      	ldr	r2, [pc, #260]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013b6:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80013b8:	e07c      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
			case SYSTEM_EDIT_MENU_SELECT_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x + Delta_x;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	4413      	add	r3, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f9c1 	bl	8000748 <__aeabi_i2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a3c      	ldr	r2, [pc, #240]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013ca:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x + Delta_x;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f9ba 	bl	8000748 <__aeabi_i2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a39      	ldr	r2, [pc, #228]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013d8:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x + Delta_x;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	441a      	add	r2, r3
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	4413      	add	r3, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f9af 	bl	8000748 <__aeabi_i2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a33      	ldr	r2, [pc, #204]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013ee:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f9a4 	bl	8000740 <__aeabi_ui2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 80013fc:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f99d 	bl	8000740 <__aeabi_ui2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800140a:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;break;
 800140c:	7b7b      	ldrb	r3, [r7, #13]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f996 	bl	8000740 <__aeabi_ui2f>
 8001414:	4603      	mov	r3, r0
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 8001418:	62d3      	str	r3, [r2, #44]	; 0x2c
 800141a:	e04b      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
			case SYSTEM_CONFIG_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x - Delta_x;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f990 	bl	8000748 <__aeabi_i2f>
 8001428:	4603      	mov	r3, r0
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800142c:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x - Delta_x ;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	1ad2      	subs	r2, r2, r3
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f985 	bl	8000748 <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 8001442:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x - Delta_x;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f97e 	bl	8000748 <__aeabi_i2f>
 800144c:	4603      	mov	r3, r0
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 8001450:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f973 	bl	8000740 <__aeabi_ui2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800145e:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 8001460:	7b7b      	ldrb	r3, [r7, #13]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f96c 	bl	8000740 <__aeabi_ui2f>
 8001468:	4603      	mov	r3, r0
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800146c:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;break;
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f965 	bl	8000740 <__aeabi_ui2f>
 8001476:	4603      	mov	r3, r0
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <GUI_Shift_Menu+0x1bc>)
 800147a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800147c:	e01a      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
			default:
				break;
		}
	}else if (currentPage == SYSTEM_TRAIN_MENU_SELECET_PAGE)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d10e      	bne.n	80014a2 <GUI_Shift_Menu+0x1a2>
	{
		switch (targetPage)
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	3b03      	subs	r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d813      	bhi.n	80014b4 <GUI_Shift_Menu+0x1b4>
		{
			case SYSTEM_TRAIN_MENU_SELECET_PAGE:
			case SYSTEM_START_TRAIN_PAGE:
				SystemCtrl.Sys_InverseBox.target_y = SystemCtrl.GUIpagePoint *16;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <GUI_Shift_Menu+0x1c0>)
 800148e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f957 	bl	8000748 <__aeabi_i2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <GUI_Shift_Menu+0x1c0>)
 800149e:	6113      	str	r3, [r2, #16]
				break;
 80014a0:	e008      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
		}
	}else if (currentPage == SYSTEM_EDIT_MENU_SELECT_PAGE)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d104      	bne.n	80014b2 <GUI_Shift_Menu+0x1b2>
	{
		switch (targetPage)
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	2b07      	cmp	r3, #7
			case SYSTEM_EDIT_MOVES_SELECT_PAGE:
				/* code */
				break;
			
			default:
				break;
 80014ac:	e002      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
				break;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <GUI_Shift_Menu+0x1b4>
		}
	}
 80014b2:	bf00      	nop
	// 		// 	break;
	// 		default:
	// 		break;
	// 	}	
	
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000004c 	.word	0x2000004c
 80014c0:	20000034 	.word	0x20000034

080014c4 <Key_Trig_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Trig_Handler(void){
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

    if (KEY_IS_CONFIRM_PRESS()){
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <Key_Trig_Handler+0x4c>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <Key_Trig_Handler+0x24>
        KeyCtrl.confirm_holding_timeout = HOLDING_3_SECOND;   //
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <Key_Trig_Handler+0x4c>)
 80014dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014e0:	811a      	strh	r2, [r3, #8]
        KeyCtrl.confirm_hold_status = HOLD_START_3SEC;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <Key_Trig_Handler+0x4c>)
 80014e4:	2203      	movs	r2, #3
 80014e6:	735a      	strb	r2, [r3, #13]
    }
    if (KEY_IS_SET_PRESS())
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <Key_Trig_Handler+0x4c>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <Key_Trig_Handler+0x44>
    {
        KeyCtrl.set_hold_status = HOLD_START_2SEC;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <Key_Trig_Handler+0x4c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	731a      	strb	r2, [r3, #12]
        KeyCtrl.confirm_holding_timeout = HOLDING_2_SECOND;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <Key_Trig_Handler+0x4c>)
 8001502:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001506:	811a      	strh	r2, [r3, #8]
    }
    

}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000024 	.word	0x20000024

08001514 <Key_release_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_release_Handler(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    if (KEY_IS_UP_RELEASE()){
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <Key_release_Handler+0x68>)
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <Key_release_Handler+0x1a>
        System_GUIPagepointer_Sub();
 800152a:	f000 f947 	bl	80017bc <System_GUIPagepointer_Sub>
    }
    if (KEY_IS_DOWN_RELEASE()){
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <Key_release_Handler+0x68>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <Key_release_Handler+0x30>
        System_GUIPagepointer_Add();
 8001540:	f000 f94e 	bl	80017e0 <System_GUIPagepointer_Add>
    }
    if (KEY_IS_SET_RELEASE())
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <Key_release_Handler+0x68>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <Key_release_Handler+0x4c>
    {
        System_Turn_Page();
 8001556:	f000 f955 	bl	8001804 <System_Turn_Page>
        KeyCtrl.set_hold_status = HOLD_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <Key_release_Handler+0x68>)
 800155c:	2200      	movs	r2, #0
 800155e:	731a      	strb	r2, [r3, #12]
        
    }
    if (KEY_IS_CONFIRM_RELEASE())
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <Key_release_Handler+0x68>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <Key_release_Handler+0x64>
    {
        KeyCtrl.set_hold_status = HOLD_NONE;
 8001572:	4b02      	ldr	r3, [pc, #8]	; (800157c <Key_release_Handler+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	731a      	strb	r2, [r3, #12]
    }
    

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000024 	.word	0x20000024

08001580 <Key_Hold_Handler>:

void Key_Hold_Handler(void){
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
    switch (KeyCtrl.confirm_hold_status)
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <Key_Hold_Handler+0x14>)
 8001586:	7b5b      	ldrb	r3, [r3, #13]
 8001588:	2b04      	cmp	r3, #4
        case HOLD_ALREADY_3SEC:
            //做额外操作
            break;
    
        default:
            break;
 800158a:	bf00      	nop
    }
    

}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000024 	.word	0x20000024

08001598 <Key_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Process(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
    u8 i = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
    u8 key_mask = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	71bb      	strb	r3, [r7, #6]
    
    for ( i = 0; i < KEYS_NUM; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	e052      	b.n	8001652 <Key_Process+0xba>
    {
        /***              去抖           ***/
        if(Bsp_KEY_Probe(i))
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fc9c 	bl	8001eec <Bsp_KEY_Probe>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d021      	beq.n	80015fe <Key_Process+0x66>
        {
            if (Key[i].Tmr1ms <= KEY_DEBOUNCE_TIME)          //这种方式可以避免阻塞系统
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a5a      	ldr	r2, [pc, #360]	; (8001728 <Key_Process+0x190>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	2b14      	cmp	r3, #20
 80015c2:	d840      	bhi.n	8001646 <Key_Process+0xae>
            {
                if ( ++Key[i].Tmr1ms > KEY_DEBOUNCE_TIME)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4a58      	ldr	r2, [pc, #352]	; (8001728 <Key_Process+0x190>)
 80015c8:	5cd2      	ldrb	r2, [r2, r3]
 80015ca:	3201      	adds	r2, #1
 80015cc:	b2d1      	uxtb	r1, r2
 80015ce:	4a56      	ldr	r2, [pc, #344]	; (8001728 <Key_Process+0x190>)
 80015d0:	54d1      	strb	r1, [r2, r3]
 80015d2:	4a55      	ldr	r2, [pc, #340]	; (8001728 <Key_Process+0x190>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	2b14      	cmp	r3, #20
 80015d8:	d935      	bls.n	8001646 <Key_Process+0xae>
                {
                    KeyCtrl.cache |= key_mask ;
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <Key_Process+0x194>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	b2d9      	uxtb	r1, r3
 80015f2:	4a4e      	ldr	r2, [pc, #312]	; (800172c <Key_Process+0x194>)
 80015f4:	7813      	ldrb	r3, [r2, #0]
 80015f6:	f361 0303 	bfi	r3, r1, #0, #4
 80015fa:	7013      	strb	r3, [r2, #0]
 80015fc:	e023      	b.n	8001646 <Key_Process+0xae>
                }
            }
        }else{
            if (Key[i].Tmr1ms)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4a49      	ldr	r2, [pc, #292]	; (8001728 <Key_Process+0x190>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01e      	beq.n	8001646 <Key_Process+0xae>
            {
                if (--Key[i].Tmr1ms == 0)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4a47      	ldr	r2, [pc, #284]	; (8001728 <Key_Process+0x190>)
 800160c:	5cd2      	ldrb	r2, [r2, r3]
 800160e:	3a01      	subs	r2, #1
 8001610:	b2d1      	uxtb	r1, r2
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <Key_Process+0x190>)
 8001614:	54d1      	strb	r1, [r2, r3]
 8001616:	4a44      	ldr	r2, [pc, #272]	; (8001728 <Key_Process+0x190>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d113      	bne.n	8001646 <Key_Process+0xae>
                {
                    KeyCtrl.cache &= ~key_mask ;
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <Key_Process+0x194>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b25a      	sxtb	r2, r3
 800162a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800162e:	43db      	mvns	r3, r3
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4013      	ands	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	b2d9      	uxtb	r1, r3
 800163c:	4a3b      	ldr	r2, [pc, #236]	; (800172c <Key_Process+0x194>)
 800163e:	7813      	ldrb	r3, [r2, #0]
 8001640:	f361 0303 	bfi	r3, r1, #0, #4
 8001644:	7013      	strb	r3, [r2, #0]
                }
            }
        }
        key_mask <<= 1;
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	71bb      	strb	r3, [r7, #6]
    for ( i = 0; i < KEYS_NUM; i++)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3301      	adds	r3, #1
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d9a9      	bls.n	80015ac <Key_Process+0x14>
    }

    if (KeyCtrl.cache != KeyCtrl.value)
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <Key_Process+0x194>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <Key_Process+0x194>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	429a      	cmp	r2, r3
 800166e:	d039      	beq.n	80016e4 <Key_Process+0x14c>
    {
        KeyCtrl.trg = KeyCtrl.cache & (~KeyCtrl.value);      //只能检测新按下的  存储被按下的按键
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <Key_Process+0x194>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001678:	b2db      	uxtb	r3, r3
 800167a:	b25a      	sxtb	r2, r3
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <Key_Process+0x194>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001684:	b2db      	uxtb	r3, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	4013      	ands	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	b2d9      	uxtb	r1, r3
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <Key_Process+0x194>)
 8001698:	7853      	ldrb	r3, [r2, #1]
 800169a:	f361 0303 	bfi	r3, r1, #0, #4
 800169e:	7053      	strb	r3, [r2, #1]
        KeyCtrl.release = (~KeyCtrl.cache) & KeyCtrl.value;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <Key_Process+0x194>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <Key_Process+0x194>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	b2d9      	uxtb	r1, r3
 80016c6:	4a19      	ldr	r2, [pc, #100]	; (800172c <Key_Process+0x194>)
 80016c8:	7853      	ldrb	r3, [r2, #1]
 80016ca:	f361 1307 	bfi	r3, r1, #4, #4
 80016ce:	7053      	strb	r3, [r2, #1]
        KeyCtrl.value = KeyCtrl.cache;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <Key_Process+0x194>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <Key_Process+0x194>)
 80016dc:	7813      	ldrb	r3, [r2, #0]
 80016de:	f361 1307 	bfi	r3, r1, #4, #4
 80016e2:	7013      	strb	r3, [r2, #0]
    }
    
    if (KeyCtrl.trg)
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <Key_Process+0x194>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <Key_Process+0x168>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(1,6,"C",0);break;
        //     case 0x01: GUI_CLEAR_SCREEN();break;
        //     default:
        //     break;
        // }
        Key_Trig_Handler();
 80016f2:	f7ff fee7 	bl	80014c4 <Key_Trig_Handler>
        KeyCtrl.trg = 0;
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <Key_Process+0x194>)
 80016f8:	7853      	ldrb	r3, [r2, #1]
 80016fa:	f36f 0303 	bfc	r3, #0, #4
 80016fe:	7053      	strb	r3, [r2, #1]
    }

    if (KeyCtrl.release)
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <Key_Process+0x194>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	f023 030f 	bic.w	r3, r3, #15
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <Key_Process+0x184>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(5,4,"G",0);break;
        //     case 0x01: GUI_SPI_Display_Char_ASCII(5,5,"H",0);break;
        //     default:
        //     break;
        // }
        Key_release_Handler();
 800170e:	f7ff ff01 	bl	8001514 <Key_release_Handler>
        KeyCtrl.release = 0;
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <Key_Process+0x194>)
 8001714:	7853      	ldrb	r3, [r2, #1]
 8001716:	f36f 1307 	bfc	r3, #4, #4
 800171a:	7053      	strb	r3, [r2, #1]
    }

    Key_Hold_Handler();
 800171c:	f7ff ff30 	bl	8001580 <Key_Hold_Handler>
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000020 	.word	0x20000020
 800172c:	20000024 	.word	0x20000024

08001730 <System_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '页面初始化 设置默认页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Init(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    SystemCtrl.currentPage = SYSTEM_MAIN_PAGE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <System_Init+0x30>)
 8001736:	2200      	movs	r2, #0
 8001738:	705a      	strb	r2, [r3, #1]
    SystemCtrl.targetPage = SYSTEM_MAIN_PAGE;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <System_Init+0x30>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    SystemCtrl.GUIpagePoint = 1; 
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <System_Init+0x30>)
 8001742:	2201      	movs	r2, #1
 8001744:	751a      	strb	r2, [r3, #20]
    GUI_CLEAR_SCREEN();
 8001746:	f7ff fa21 	bl	8000b8c <GUI_CLEAR_SCREEN>
    GUI_Shift_Menu( SystemCtrl.currentPage,SystemCtrl.targetPage);
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <System_Init+0x30>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <System_Init+0x30>)
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fdd3 	bl	8001300 <GUI_Shift_Menu>
};
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000034 	.word	0x20000034

08001764 <System_MenuselectPage_Init>:
void System_MenuselectPage_Init(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

    SystemCtrl.Sys_InverseBox.current_x = 0;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <System_MenuselectPage_Init+0x4c>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    SystemCtrl.Sys_InverseBox.current_y = -16;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <System_MenuselectPage_Init+0x4c>)
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <System_MenuselectPage_Init+0x50>)
 8001774:	609a      	str	r2, [r3, #8]
    SystemCtrl.Sys_InverseBox.target_x = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <System_MenuselectPage_Init+0x4c>)
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
    SystemCtrl.Sys_InverseBox.target_y = 0;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <System_MenuselectPage_Init+0x4c>)
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
    Sys_Rowitem.current_x = 0;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <System_MenuselectPage_Init+0x54>)
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    Sys_Rowitem.current_y = 0;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <System_MenuselectPage_Init+0x54>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
    Sys_Rowitem.target_x = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <System_MenuselectPage_Init+0x54>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    Sys_Rowitem.target_y = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <System_MenuselectPage_Init+0x54>)
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
	GUI_CLEAR_SCREEN();
 80017a6:	f7ff f9f1 	bl	8000b8c <GUI_CLEAR_SCREEN>

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000034 	.word	0x20000034
 80017b4:	c1800000 	.word	0xc1800000
 80017b8:	200000ac 	.word	0x200000ac

080017bc <System_GUIPagepointer_Sub>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_GUIPagepointer_Sub(void){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    SystemCtrl.GUIpagePoint--;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <System_GUIPagepointer_Sub+0x20>)
 80017c2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <System_GUIPagepointer_Sub+0x20>)
 80017d0:	751a      	strb	r2, [r3, #20]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000034 	.word	0x20000034

080017e0 <System_GUIPagepointer_Add>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_GUIPagepointer_Add(void){
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
    SystemCtrl.GUIpagePoint++;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <System_GUIPagepointer_Add+0x20>)
 80017e6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	b25a      	sxtb	r2, r3
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <System_GUIPagepointer_Add+0x20>)
 80017f4:	751a      	strb	r2, [r3, #20]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000034 	.word	0x20000034

08001804 <System_Turn_Page>:
*参    数:'' 
*返 回 值:'' 
*说    明: '当set 释放以后，设置该位，并在判断完以后，调用System_Clear_turnPage' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Turn_Page(void){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
    SystemCtrl.is_turn_Page++;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <System_Turn_Page+0x20>)
 800180a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3301      	adds	r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b25a      	sxtb	r2, r3
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <System_Turn_Page+0x20>)
 8001818:	759a      	strb	r2, [r3, #22]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000034 	.word	0x20000034

08001828 <System_Clear_turnPage>:
*参    数:'' 
*返 回 值:'' 
*说    明: '调用System_Turn_Page 后需要调用' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Clear_turnPage(){
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
    SystemCtrl.is_turn_Page = 0;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <System_Clear_turnPage+0x14>)
 800182e:	2200      	movs	r2, #0
 8001830:	759a      	strb	r2, [r3, #22]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000034 	.word	0x20000034

08001840 <System_MainPage_Operation>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_MainPage_Operation(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    if(SystemCtrl.GUIpagePoint > MainPage_EndIndex)
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001846:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800184a:	2b03      	cmp	r3, #3
 800184c:	dd02      	ble.n	8001854 <System_MainPage_Operation+0x14>
    {
        SystemCtrl.GUIpagePoint = MainPage_BeginIndex;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001850:	2201      	movs	r2, #1
 8001852:	751a      	strb	r2, [r3, #20]
    }
    if(SystemCtrl.GUIpagePoint < MainPage_BeginIndex)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001856:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	dc02      	bgt.n	8001864 <System_MainPage_Operation+0x24>
    {
        SystemCtrl.GUIpagePoint = MainPage_EndIndex;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001860:	2203      	movs	r2, #3
 8001862:	751a      	strb	r2, [r3, #20]
    }
    
    SystemCtrl.targetPage = SystemCtrl.GUIpagePoint * MainPage_MultiPower;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001866:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	0052      	lsls	r2, r2, #1
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001876:	701a      	strb	r2, [r3, #0]
    
    if(SystemCtrl.is_turn_Page == 1){
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <System_MainPage_Operation+0x64>)
 800187a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10d      	bne.n	800189e <System_MainPage_Operation+0x5e>
        SystemCtrl.currentPage = SystemCtrl.targetPage;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001888:	705a      	strb	r2, [r3, #1]
        SystemCtrl.GUIpagePoint = 0;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <System_MainPage_Operation+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	751a      	strb	r2, [r3, #20]
        SystemCtrl.MenuPoint = 0;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <System_MainPage_Operation+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	755a      	strb	r2, [r3, #21]
        System_Clear_turnPage();
 8001896:	f7ff ffc7 	bl	8001828 <System_Clear_turnPage>
        System_MenuselectPage_Init();
 800189a:	f7ff ff63 	bl	8001764 <System_MenuselectPage_Init>
    }
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000034 	.word	0x20000034

080018a8 <System_TrainMenuSelPage_Operation>:

void System_TrainMenuSelPage_Operation(void){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
    //Sytem_Load_Menu();
    //uint8_t menuNum = FLASH_Read_MenuNum();
    uint8_t menuNum = 8; //单纯的个数，从1开始
 80018ae:	2308      	movs	r3, #8
 80018b0:	71fb      	strb	r3, [r7, #7]
    static int8_t oldGUIpagePoint; 

    if (menuNum == 0)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80ca 	beq.w	8001a4e <System_TrainMenuSelPage_Operation+0x1a6>
    {
        return;
    }
    /*              update SystemCtrl.MenuPoint              */
    if (SystemCtrl.GUIpagePoint - oldGUIpagePoint == 1 && (menuNum > 4))
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80018bc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 80018c4:	f993 3000 	ldrsb.w	r3, [r3]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d143      	bne.n	8001956 <System_TrainMenuSelPage_Operation+0xae>
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d940      	bls.n	8001956 <System_TrainMenuSelPage_Operation+0xae>
    {
        
        SystemCtrl.MenuPoint++;
 80018d4:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80018d6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80018e4:	755a      	strb	r2, [r3, #21]
        if (SystemCtrl.MenuPoint >= menuNum)
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80018e8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80018ec:	461a      	mov	r2, r3
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	db05      	blt.n	8001900 <System_TrainMenuSelPage_Operation+0x58>
        {
            SystemCtrl.MenuPoint = menuNum - 1;       //如果超过菜单尾部  菜单尾部是menuNum - 1
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80018fe:	755a      	strb	r2, [r3, #21]
        }
        if (oldGUIpagePoint >= GUI_ROWS_THIRD){
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 8001902:	f993 3000 	ldrsb.w	r3, [r3]
 8001906:	2b01      	cmp	r3, #1
 8001908:	dd0a      	ble.n	8001920 <System_TrainMenuSelPage_Operation+0x78>
            if (SystemCtrl.MenuPoint == (menuNum - 1))
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 800190c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001910:	461a      	mov	r2, r3
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b01      	subs	r3, #1
 8001916:	429a      	cmp	r2, r3
 8001918:	d102      	bne.n	8001920 <System_TrainMenuSelPage_Operation+0x78>
            {
                SystemCtrl.GUIpagePoint = GUI_ROWS_UP_LIMIT;
 800191a:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 800191c:	2203      	movs	r2, #3
 800191e:	751a      	strb	r2, [r3, #20]
            }       
        }
        if ((oldGUIpagePoint == GUI_ROWS_THIRD) && (SystemCtrl.MenuPoint <= (menuNum - 2)))  //menupoint是指向下一条
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 8001922:	f993 3000 	ldrsb.w	r3, [r3]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d179      	bne.n	8001a1e <System_TrainMenuSelPage_Operation+0x176>
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	3b01      	subs	r3, #1
 800192e:	4a4a      	ldr	r2, [pc, #296]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001930:	f992 2015 	ldrsb.w	r2, [r2, #21]
 8001934:	4293      	cmp	r3, r2
 8001936:	dd72      	ble.n	8001a1e <System_TrainMenuSelPage_Operation+0x176>
        {
            Sys_Rowitem.target_y -= 16;
 8001938:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <System_TrainMenuSelPage_Operation+0x1b8>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe4b 	bl	80005dc <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <System_TrainMenuSelPage_Operation+0x1b8>)
 800194c:	60da      	str	r2, [r3, #12]
            SystemCtrl.GUIpagePoint = GUI_ROWS_THIRD;
 800194e:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001950:	2202      	movs	r2, #2
 8001952:	751a      	strb	r2, [r3, #20]
        if ((oldGUIpagePoint == GUI_ROWS_THIRD) && (SystemCtrl.MenuPoint <= (menuNum - 2)))  //menupoint是指向下一条
 8001954:	e063      	b.n	8001a1e <System_TrainMenuSelPage_Operation+0x176>
        }
        
    }else if (SystemCtrl.GUIpagePoint - oldGUIpagePoint == 1 && (menuNum <= 4))
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001958:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800195c:	461a      	mov	r2, r3
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 8001960:	f993 3000 	ldrsb.w	r3, [r3]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11f      	bne.n	80019aa <System_TrainMenuSelPage_Operation+0x102>
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d81c      	bhi.n	80019aa <System_TrainMenuSelPage_Operation+0x102>
    {
        SystemCtrl.MenuPoint++;
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001972:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	b25a      	sxtb	r2, r3
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001980:	755a      	strb	r2, [r3, #21]
        if (SystemCtrl.MenuPoint >= menuNum)
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001984:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001988:	461a      	mov	r2, r3
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	429a      	cmp	r2, r3
 800198e:	db47      	blt.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
        {
            SystemCtrl.GUIpagePoint = (menuNum - 1) ;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b25a      	sxtb	r2, r3
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 800199a:	751a      	strb	r2, [r3, #20]
            SystemCtrl.MenuPoint = (menuNum - 1) ;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3b01      	subs	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019a6:	755a      	strb	r2, [r3, #21]
        if (SystemCtrl.MenuPoint >= menuNum)
 80019a8:	e03a      	b.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
        }
        
    }else if (SystemCtrl.GUIpagePoint-oldGUIpagePoint == -1)
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019ac:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 80019b4:	f993 3000 	ldrsb.w	r3, [r3]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019be:	d12f      	bne.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
    {
        SystemCtrl.MenuPoint--;
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019c2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019d0:	755a      	strb	r2, [r3, #21]
        if (SystemCtrl.MenuPoint < GUI_ROWS_DOWN_LIMIT){
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019d4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da02      	bge.n	80019e2 <System_TrainMenuSelPage_Operation+0x13a>
            SystemCtrl.MenuPoint = GUI_ROWS_DOWN_LIMIT;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	755a      	strb	r2, [r3, #21]
        }
        if (SystemCtrl.GUIpagePoint < GUI_ROWS_DOWN_LIMIT ){
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019e4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da02      	bge.n	80019f2 <System_TrainMenuSelPage_Operation+0x14a>
            SystemCtrl.GUIpagePoint = GUI_ROWS_DOWN_LIMIT;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	751a      	strb	r2, [r3, #20]
        }
        if (SystemCtrl.GUIpagePoint == GUI_ROWS_DOWN_LIMIT && (SystemCtrl.MenuPoint > 0))
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019f4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 80019fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd0c      	ble.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
        {
            Sys_Rowitem.target_y += 16;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <System_TrainMenuSelPage_Operation+0x1b8>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fde6 	bl	80005e0 <__addsf3>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <System_TrainMenuSelPage_Operation+0x1b8>)
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	e000      	b.n	8001a20 <System_TrainMenuSelPage_Operation+0x178>
        if ((oldGUIpagePoint == GUI_ROWS_THIRD) && (SystemCtrl.MenuPoint <= (menuNum - 2)))  //menupoint是指向下一条
 8001a1e:	bf00      	nop
    /*                  control inverse box                  */
    

    
    
    oldGUIpagePoint = SystemCtrl.GUIpagePoint;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a22:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <System_TrainMenuSelPage_Operation+0x1b4>)
 8001a28:	701a      	strb	r2, [r3, #0]
    
    if(SystemCtrl.is_turn_Page == 1){
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a2c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <System_TrainMenuSelPage_Operation+0x1a8>
        SystemCtrl.targetPage = SystemCtrl.currentPage +1;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a3e:	701a      	strb	r2, [r3, #0]
        SystemCtrl.currentPage = SystemCtrl.targetPage;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <System_TrainMenuSelPage_Operation+0x1b0>)
 8001a46:	705a      	strb	r2, [r3, #1]
        System_Clear_turnPage();
 8001a48:	f7ff feee 	bl	8001828 <System_Clear_turnPage>
 8001a4c:	e000      	b.n	8001a50 <System_TrainMenuSelPage_Operation+0x1a8>
        return;
 8001a4e:	bf00      	nop
    }
    
    
}
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000034 	.word	0x20000034
 8001a5c:	200000bc 	.word	0x200000bc
 8001a60:	200000ac 	.word	0x200000ac

08001a64 <System_Poll>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Poll(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

    switch (SystemCtrl.currentPage)
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <System_Poll+0x64>)
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d81d      	bhi.n	8001aac <System_Poll+0x48>
 8001a70:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <System_Poll+0x14>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001aa1 	.word	0x08001aa1
 8001a7c:	08001aad 	.word	0x08001aad
 8001a80:	08001aad 	.word	0x08001aad
 8001a84:	08001aa7 	.word	0x08001aa7
 8001a88:	08001aad 	.word	0x08001aad
 8001a8c:	08001aad 	.word	0x08001aad
 8001a90:	08001aad 	.word	0x08001aad
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001aad 	.word	0x08001aad
 8001a9c:	08001aad 	.word	0x08001aad
    {
        case SYSTEM_MAIN_PAGE:
            System_MainPage_Operation();
 8001aa0:	f7ff fece 	bl	8001840 <System_MainPage_Operation>
            break;
 8001aa4:	e003      	b.n	8001aae <System_Poll+0x4a>
        case SYSTEM_TRAIN_MENU_SELECET_PAGE:
            System_TrainMenuSelPage_Operation();
 8001aa6:	f7ff feff 	bl	80018a8 <System_TrainMenuSelPage_Operation>
            // if (menu_num != 0) //存在菜单
            // {
            //     //read_flash 加载菜单 保存在临时变量中 每次从flash中读一次 
            // }
            // 菜单开始运行处理函数
            break;
 8001aaa:	e000      	b.n	8001aae <System_Poll+0x4a>
            break;
        case SYSTEM_CONFIG_PAGE:
            
            break;
        default:
            break;
 8001aac:	bf00      	nop
    }
    
    GUI_Shift_Menu(SystemCtrl.currentPage,SystemCtrl.targetPage);
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <System_Poll+0x64>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <System_Poll+0x64>)
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc21 	bl	8001300 <GUI_Shift_Menu>
    GUI_Animation_move();
 8001abe:	f7ff fa0b 	bl	8000ed8 <GUI_Animation_move>

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000034 	.word	0x20000034

08001acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <SystemInit+0x5c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <SystemInit+0x5c>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x5c>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4911      	ldr	r1, [pc, #68]	; (8001b28 <SystemInit+0x5c>)
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <SystemInit+0x60>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <SystemInit+0x5c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <SystemInit+0x5c>)
 8001aee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <SystemInit+0x5c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SystemInit+0x5c>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SystemInit+0x5c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <SystemInit+0x5c>)
 8001b0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SystemInit+0x5c>)
 8001b12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b16:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001b18:	f000 f80c 	bl	8001b34 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SystemInit+0x64>)
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b22:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	f8ff0000 	.word	0xf8ff0000
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001b38:	f000 f802 	bl	8001b40 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3301      	adds	r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <SetSysClockTo72+0x38>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b76:	d1f0      	bne.n	8001b5a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b84:	2301      	movs	r3, #1
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	e001      	b.n	8001b8e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d14b      	bne.n	8001c2c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <SetSysClockTo72+0xfc>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bda:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001bde:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001be6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001bea:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001bf8:	bf00      	nop
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f9      	beq.n	8001bfa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001c0c:	f023 0303 	bic.w	r3, r3, #3
 8001c10:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001c1e:	bf00      	nop
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SetSysClockTo72+0xf8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d1f9      	bne.n	8001c20 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40022000 	.word	0x40022000

08001c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ff44 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f000 fdeb 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7fe ff55 	bl	8000b1c <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001c7c:	08002ce0 	.word	0x08002ce0
  ldr r2, =_sbss
 8001c80:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001c84:	200004cc 	.word	0x200004cc

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>

08001c8a <__NOP>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '采用阻塞方式的延时' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	// SysTick->LOAD = 72 * xus;				//设置定时器重装值
	// SysTick->VAL = 0x00;					//清空当前计数值
	// SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
	// while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
	// SysTick->CTRL = 0x00000004;				//关闭定时器
    __IO uint32_t us= xus * 2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
    while (us > 0)
 8001ca6:	e006      	b.n	8001cb6 <Bsp_DelayUS+0x1e>
    {
        us--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
        __NOP();
 8001cae:	f7ff ffec 	bl	8001c8a <__NOP>
        __NOP();
 8001cb2:	f7ff ffea 	bl	8001c8a <__NOP>
    while (us > 0)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f5      	bne.n	8001ca8 <Bsp_DelayUS+0x10>
    }
    
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
	while(xms--)
 8001cce:	e003      	b.n	8001cd8 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8001cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd4:	f7ff ffe0 	bl	8001c98 <Bsp_DelayUS>
	while(xms--)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f6      	bne.n	8001cd0 <Bsp_DelayMS+0xa>
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8001cf0:	f000 f88c 	bl	8001e0c <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 8001cf4:	f000 f946 	bl	8001f84 <Bsp_SPI_Init>
    Bsp_Flash_Init();
 8001cf8:	f000 f85a 	bl	8001db0 <Bsp_Flash_Init>
	//Bsp_I2C_Init();
    
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 8001d06:	2101      	movs	r1, #1
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f000 fc3f 	bl	800258c <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <Bsp_SPI_DMA_Init+0x60>)
 8001d10:	f000 f9b4 	bl	800207c <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <Bsp_SPI_DMA_Init+0x64>)
 8001d16:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <Bsp_SPI_DMA_Init+0x68>)
 8001d1a:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 8001d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d24:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 8001d36:	2320      	movs	r3, #32
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <Bsp_SPI_DMA_Init+0x60>)
 8001d4a:	f000 fa53 	bl	80021f4 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <Bsp_SPI_DMA_Init+0x60>)
 8001d52:	f000 fa8d 	bl	8002270 <DMA_Cmd>
}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020030 	.word	0x40020030
 8001d64:	4001300c 	.word	0x4001300c
 8001d68:	200000c0 	.word	0x200000c0

08001d6c <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8001d70:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d74:	f000 fa98 	bl	80022a8 <DMA_GetFlagStatus>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8001d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d82:	f000 fab9 	bl	80022f8 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 8001d86:	200a      	movs	r0, #10
 8001d88:	f7ff ff86 	bl	8001c98 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <DMA1_Channel6_IRQHandler+0x3c>)
 8001d90:	f000 fbbd 	bl	800250e <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8001d94:	2101      	movs	r1, #1
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <DMA1_Channel6_IRQHandler+0x3c>)
 8001d98:	f000 fbd8 	bl	800254c <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4803      	ldr	r0, [pc, #12]	; (8001dac <DMA1_Channel6_IRQHandler+0x40>)
 8001da0:	f000 fa66 	bl	8002270 <DMA_Cmd>
	}
}	
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40005400 	.word	0x40005400
 8001dac:	4002006c 	.word	0x4002006c

08001db0 <Bsp_Flash_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '初始化flash' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Flash_Init(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef FLASH_SPI_InitStruct;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 , ENABLE);
 8001db6:	2101      	movs	r1, #1
 8001db8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dbc:	f000 fc22 	bl	8002604 <RCC_APB1PeriphClockCmd>
    
    SPI_I2S_DeInit(FLASH_SPI);
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <Bsp_Flash_Init+0x58>)
 8001dc2:	f000 fc79 	bl	80026b8 <SPI_I2S_DeInit>
    FLASH_SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	80bb      	strh	r3, [r7, #4]
    FLASH_SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8001dca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dce:	80fb      	strh	r3, [r7, #6]
    FLASH_SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	813b      	strh	r3, [r7, #8]
    FLASH_SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	817b      	strh	r3, [r7, #10]
    FLASH_SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                  //奇数边沿
 8001dd8:	2300      	movs	r3, #0
 8001dda:	81bb      	strh	r3, [r7, #12]
    FLASH_SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de0:	81fb      	strh	r3, [r7, #14]
    FLASH_SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8001de2:	2330      	movs	r3, #48	; 0x30
 8001de4:	823b      	strh	r3, [r7, #16]
    FLASH_SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8001de6:	2300      	movs	r3, #0
 8001de8:	827b      	strh	r3, [r7, #18]
    FLASH_SPI_InitStruct.SPI_CRCPolynomial = 7;
 8001dea:	2307      	movs	r3, #7
 8001dec:	82bb      	strh	r3, [r7, #20]

    SPI_Init(FLASH_SPI,&FLASH_SPI_InitStruct);
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <Bsp_Flash_Init+0x58>)
 8001df4:	f000 fc9a 	bl	800272c <SPI_Init>
    
    SPI_Cmd(FLASH_SPI,ENABLE);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <Bsp_Flash_Init+0x58>)
 8001dfc:	f000 fcd9 	bl	80027b2 <SPI_Cmd>
    
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40003800 	.word	0x40003800

08001e0c <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8001e10:	2101      	movs	r1, #1
 8001e12:	2004      	movs	r0, #4
 8001e14:	f000 fbd8 	bl	80025c8 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2009      	movs	r0, #9
 8001e1c:	f000 fbd4 	bl	80025c8 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e22:	2218      	movs	r2, #24
 8001e24:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e28:	2203      	movs	r2, #3
 8001e2a:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e2e:	22a0      	movs	r2, #160	; 0xa0
 8001e30:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001e34:	2210      	movs	r2, #16
 8001e36:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001e40:	2250      	movs	r2, #80	; 0x50
 8001e42:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8001e44:	4924      	ldr	r1, [pc, #144]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e46:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <Bsp_GPIO_Init+0xd4>)
 8001e48:	f000 fa70 	bl	800232c <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8001e4c:	4923      	ldr	r1, [pc, #140]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001e4e:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <Bsp_GPIO_Init+0xd4>)
 8001e50:	f000 fa6c 	bl	800232c <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e56:	2248      	movs	r2, #72	; 0x48
 8001e58:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e66:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 8001e68:	491e      	ldr	r1, [pc, #120]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e6a:	481d      	ldr	r0, [pc, #116]	; (8001ee0 <Bsp_GPIO_Init+0xd4>)
 8001e6c:	f000 fa5e 	bl	800232c <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e72:	2220      	movs	r2, #32
 8001e74:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e78:	481b      	ldr	r0, [pc, #108]	; (8001ee8 <Bsp_GPIO_Init+0xdc>)
 8001e7a:	f000 fa57 	bl	800232c <GPIO_Init>
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e80:	2218      	movs	r2, #24
 8001e82:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e86:	2203      	movs	r2, #3
 8001e88:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001e8c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e90:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e94:	2248      	movs	r2, #72	; 0x48
 8001e96:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea4:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001eae:	2203      	movs	r2, #3
 8001eb0:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb8:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <Bsp_GPIO_Init+0xd0>)
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <Bsp_GPIO_Init+0xdc>)
 8001ebe:	f000 fa35 	bl	800232c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8001ec2:	4905      	ldr	r1, [pc, #20]	; (8001ed8 <Bsp_GPIO_Init+0xcc>)
 8001ec4:	4808      	ldr	r0, [pc, #32]	; (8001ee8 <Bsp_GPIO_Init+0xdc>)
 8001ec6:	f000 fa31 	bl	800232c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <Bsp_GPIO_Init+0xd8>)
 8001ecc:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <Bsp_GPIO_Init+0xdc>)
 8001ece:	f000 fa2d 	bl	800232c <GPIO_Init>
    #endif

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200004c0 	.word	0x200004c0
 8001edc:	200004c4 	.word	0x200004c4
 8001ee0:	40010800 	.word	0x40010800
 8001ee4:	200004c8 	.word	0x200004c8
 8001ee8:	40010c00 	.word	0x40010c00

08001eec <Bsp_KEY_Probe>:
*参    数:'void' 
*返 回 值:'none' 
*说    明: '返回 0 表示按键按下 返回 1 表示按键释放' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t Bsp_KEY_Probe(uint8_t key){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    switch (key)
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d83a      	bhi.n	8001f72 <Bsp_KEY_Probe+0x86>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <Bsp_KEY_Probe+0x18>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f2d 	.word	0x08001f2d
 8001f0c:	08001f45 	.word	0x08001f45
 8001f10:	08001f5d 	.word	0x08001f5d
    {
        case KEY_UP: return (GPIO_ReadInputDataBit(KEY_UP_PORT,KEY_UP_PIN) == 0); break;   //这里用 == 0 而不直接读取值，有两个好处 向上层屏蔽了按下和没按下的底层逻辑，上层只需要知道 按下为1 未按下0，如果后续出现改动比如 电平0为释放 1为按下 不用对上层做对应的变化，符合分层 对上层屏蔽细节的作用，便于维护 与阅读 （告诉读者 当前针对 0）
 8001f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f18:	4818      	ldr	r0, [pc, #96]	; (8001f7c <Bsp_KEY_Probe+0x90>)
 8001f1a:	f000 fac3 	bl	80024a4 <GPIO_ReadInputDataBit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e023      	b.n	8001f74 <Bsp_KEY_Probe+0x88>
        case KEY_DOWN:return (GPIO_ReadInputDataBit(KEY_DOWN_PORT,KEY_DOWN_PIN) == 0); break;
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	4812      	ldr	r0, [pc, #72]	; (8001f7c <Bsp_KEY_Probe+0x90>)
 8001f32:	f000 fab7 	bl	80024a4 <GPIO_ReadInputDataBit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e017      	b.n	8001f74 <Bsp_KEY_Probe+0x88>
        case KEY_SET:return (GPIO_ReadInputDataBit(KEY_SET_PORT,KEY_SET_PIN) == 0);  break;
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <Bsp_KEY_Probe+0x90>)
 8001f4a:	f000 faab 	bl	80024a4 <GPIO_ReadInputDataBit>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e00b      	b.n	8001f74 <Bsp_KEY_Probe+0x88>
        case KEY_CONFIRM: return (GPIO_ReadInputDataBit(KEY_COMFIRM_PORT,KEY_COMFIRM_PIN) == 0); break;
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <Bsp_KEY_Probe+0x94>)
 8001f60:	f000 faa0 	bl	80024a4 <GPIO_ReadInputDataBit>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e000      	b.n	8001f74 <Bsp_KEY_Probe+0x88>
    }
    return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00

08001f84 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f90:	f000 fb1a 	bl	80025c8 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <Bsp_SPI_Init+0x68>)
 8001f96:	f000 fb8f 	bl	80026b8 <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8001f9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f9e:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8001fa0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fa4:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8001faa:	2300      	movs	r3, #0
 8001fac:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb6:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8001fb8:	2318      	movs	r3, #24
 8001fba:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <Bsp_SPI_Init+0x68>)
 8001fca:	f000 fbaf 	bl	800272c <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <Bsp_SPI_Init+0x68>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <Bsp_SPI_Init+0x68>)
 8001fd8:	f000 fbeb 	bl	80027b2 <SPI_Cmd>
    Bsp_DelayMS(100);
 8001fdc:	2064      	movs	r0, #100	; 0x64
 8001fde:	f7ff fe72 	bl	8001cc6 <Bsp_DelayMS>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40013000 	.word	0x40013000

08001ff0 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(uint8_t TxData)                                   //发送命令
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t retry=0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	4812      	ldr	r0, [pc, #72]	; (800204c <Bsp_SPI_Send_CMD+0x5c>)
 8002002:	f000 fa76 	bl	80024f2 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8002006:	e005      	b.n	8002014 <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2bc8      	cmp	r3, #200	; 0xc8
 8002012:	d816      	bhi.n	8002042 <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8002014:	2102      	movs	r1, #2
 8002016:	480e      	ldr	r0, [pc, #56]	; (8002050 <Bsp_SPI_Send_CMD+0x60>)
 8002018:	f000 fbf8 	bl	800280c <SPI_I2S_GetFlagStatus>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f2      	beq.n	8002008 <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 8002022:	2064      	movs	r0, #100	; 0x64
 8002024:	f7ff fe4f 	bl	8001cc6 <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	4808      	ldr	r0, [pc, #32]	; (8002050 <Bsp_SPI_Send_CMD+0x60>)
 8002030:	f000 fbde 	bl	80027f0 <SPI_I2S_SendData>
	retry=0;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	4804      	ldr	r0, [pc, #16]	; (800204c <Bsp_SPI_Send_CMD+0x5c>)
 800203c:	f000 fa4b 	bl	80024d6 <GPIO_SetBits>
 8002040:	e000      	b.n	8002044 <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 8002042:	bf00      	nop
}
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40010800 	.word	0x40010800
 8002050:	40013000 	.word	0x40013000

08002054 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 8002058:	2110      	movs	r1, #16
 800205a:	4802      	ldr	r0, [pc, #8]	; (8002064 <Bsp_SPI_RES_LOW+0x10>)
 800205c:	f000 fa49 	bl	80024f2 <GPIO_ResetBits>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010800 	.word	0x40010800

08002068 <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 800206c:	2110      	movs	r1, #16
 800206e:	4802      	ldr	r0, [pc, #8]	; (8002078 <Bsp_SPI_RES_HIGH+0x10>)
 8002070:	f000 fa31 	bl	80024d6 <GPIO_SetBits>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010800 	.word	0x40010800

0800207c <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a43      	ldr	r2, [pc, #268]	; (80021bc <DMA_DeInit+0x140>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d106      	bne.n	80020c0 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <DMA_DeInit+0x144>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <DMA_DeInit+0x144>)
 80020b8:	f043 030f 	orr.w	r3, r3, #15
 80020bc:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80020be:	e077      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <DMA_DeInit+0x148>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d106      	bne.n	80020d6 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <DMA_DeInit+0x144>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <DMA_DeInit+0x144>)
 80020ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80020d2:	6053      	str	r3, [r2, #4]
}
 80020d4:	e06c      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <DMA_DeInit+0x14c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d106      	bne.n	80020ec <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <DMA_DeInit+0x144>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <DMA_DeInit+0x144>)
 80020e4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80020e8:	6053      	str	r3, [r2, #4]
}
 80020ea:	e061      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a37      	ldr	r2, [pc, #220]	; (80021cc <DMA_DeInit+0x150>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d106      	bne.n	8002102 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <DMA_DeInit+0x144>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <DMA_DeInit+0x144>)
 80020fa:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80020fe:	6053      	str	r3, [r2, #4]
}
 8002100:	e056      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a32      	ldr	r2, [pc, #200]	; (80021d0 <DMA_DeInit+0x154>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d106      	bne.n	8002118 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <DMA_DeInit+0x144>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <DMA_DeInit+0x144>)
 8002110:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002114:	6053      	str	r3, [r2, #4]
}
 8002116:	e04b      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <DMA_DeInit+0x158>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d106      	bne.n	800212e <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <DMA_DeInit+0x144>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <DMA_DeInit+0x144>)
 8002126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800212a:	6053      	str	r3, [r2, #4]
}
 800212c:	e040      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <DMA_DeInit+0x15c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d106      	bne.n	8002144 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <DMA_DeInit+0x144>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <DMA_DeInit+0x144>)
 800213c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002140:	6053      	str	r3, [r2, #4]
}
 8002142:	e035      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <DMA_DeInit+0x160>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d106      	bne.n	800215a <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <DMA_DeInit+0x164>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <DMA_DeInit+0x164>)
 8002152:	f043 030f 	orr.w	r3, r3, #15
 8002156:	6053      	str	r3, [r2, #4]
}
 8002158:	e02a      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a21      	ldr	r2, [pc, #132]	; (80021e4 <DMA_DeInit+0x168>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d106      	bne.n	8002170 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <DMA_DeInit+0x164>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <DMA_DeInit+0x164>)
 8002168:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800216c:	6053      	str	r3, [r2, #4]
}
 800216e:	e01f      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <DMA_DeInit+0x16c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <DMA_DeInit+0x164>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <DMA_DeInit+0x164>)
 800217e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002182:	6053      	str	r3, [r2, #4]
}
 8002184:	e014      	b.n	80021b0 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <DMA_DeInit+0x170>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d106      	bne.n	800219c <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <DMA_DeInit+0x164>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <DMA_DeInit+0x164>)
 8002194:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8002198:	6053      	str	r3, [r2, #4]
}
 800219a:	e009      	b.n	80021b0 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <DMA_DeInit+0x174>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d105      	bne.n	80021b0 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <DMA_DeInit+0x164>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <DMA_DeInit+0x164>)
 80021aa:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80021ae:	6053      	str	r3, [r2, #4]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40020008 	.word	0x40020008
 80021c0:	40020000 	.word	0x40020000
 80021c4:	4002001c 	.word	0x4002001c
 80021c8:	40020030 	.word	0x40020030
 80021cc:	40020044 	.word	0x40020044
 80021d0:	40020058 	.word	0x40020058
 80021d4:	4002006c 	.word	0x4002006c
 80021d8:	40020080 	.word	0x40020080
 80021dc:	40020408 	.word	0x40020408
 80021e0:	40020400 	.word	0x40020400
 80021e4:	4002041c 	.word	0x4002041c
 80021e8:	40020430 	.word	0x40020430
 80021ec:	40020444 	.word	0x40020444
 80021f0:	40020458 	.word	0x40020458

080021f4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002222:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800222e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800223a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60da      	str	r2, [r3, #12]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 800228e:	e006      	b.n	800229e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <DMA_GetFlagStatus+0x48>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	e002      	b.n	80022d0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <DMA_GetFlagStatus+0x4c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e001      	b.n	80022e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020000 	.word	0x40020000

080022f8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800230a:	4a06      	ldr	r2, [pc, #24]	; (8002324 <DMA_ClearFlag+0x2c>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8002310:	e002      	b.n	8002318 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <DMA_ClearFlag+0x30>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6053      	str	r3, [r2, #4]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40020400 	.word	0x40020400
 8002328:	40020000 	.word	0x40020000

0800232c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	78db      	ldrb	r3, [r3, #3]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	461a      	mov	r2, r3
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4313      	orrs	r3, r2
 800236e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d044      	beq.n	8002404 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e038      	b.n	80023f8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002386:	2201      	movs	r2, #1
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d126      	bne.n	80023f2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80023aa:	220f      	movs	r2, #15
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4013      	ands	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	78db      	ldrb	r3, [r3, #3]
 80023d0:	2b28      	cmp	r3, #40	; 0x28
 80023d2:	d105      	bne.n	80023e0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80023d4:	2201      	movs	r2, #1
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	409a      	lsls	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	e008      	b.n	80023f2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	78db      	ldrb	r3, [r3, #3]
 80023e4:	2b48      	cmp	r3, #72	; 0x48
 80023e6:	d104      	bne.n	80023f2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80023e8:	2201      	movs	r2, #1
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	d9c3      	bls.n	8002386 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d946      	bls.n	800249a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e03a      	b.n	800248e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3308      	adds	r3, #8
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d127      	bne.n	8002488 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800243e:	220f      	movs	r2, #15
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	43db      	mvns	r3, r3
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4013      	ands	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	2b28      	cmp	r3, #40	; 0x28
 8002466:	d105      	bne.n	8002474 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	3308      	adds	r3, #8
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	78db      	ldrb	r3, [r3, #3]
 8002478:	2b48      	cmp	r3, #72	; 0x48
 800247a:	d105      	bne.n	8002488 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	3308      	adds	r3, #8
 8002480:	2201      	movs	r2, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	3301      	adds	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b07      	cmp	r3, #7
 8002492:	d9c1      	bls.n	8002418 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	605a      	str	r2, [r3, #4]
  }
}
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e001      	b.n	80024ca <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8002530:	e007      	b.n	8002542 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	801a      	strh	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 800256e:	e007      	b.n	8002580 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	801a      	strh	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <RCC_AHBPeriphClockCmd+0x38>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <RCC_AHBPeriphClockCmd+0x38>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80025aa:	e006      	b.n	80025ba <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <RCC_AHBPeriphClockCmd+0x38>)
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <RCC_AHBPeriphClockCmd+0x38>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	614b      	str	r3, [r1, #20]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000

080025c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <RCC_APB2PeriphClockCmd+0x38>)
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <RCC_APB2PeriphClockCmd+0x38>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80025e6:	e006      	b.n	80025f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <RCC_APB2PeriphClockCmd+0x38>)
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <RCC_APB2PeriphClockCmd+0x38>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	618b      	str	r3, [r1, #24]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000

08002604 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <RCC_APB1PeriphClockCmd+0x38>)
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <RCC_APB1PeriphClockCmd+0x38>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4313      	orrs	r3, r2
 8002620:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8002622:	e006      	b.n	8002632 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <RCC_APB1PeriphClockCmd+0x38>)
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	43db      	mvns	r3, r3
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <RCC_APB1PeriphClockCmd+0x38>)
 800262e:	4013      	ands	r3, r2
 8002630:	61cb      	str	r3, [r1, #28]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40021000 	.word	0x40021000

08002640 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <RCC_APB2PeriphResetCmd+0x38>)
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <RCC_APB2PeriphResetCmd+0x38>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800265e:	e006      	b.n	800266e <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <RCC_APB2PeriphResetCmd+0x38>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	43db      	mvns	r3, r3
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <RCC_APB2PeriphResetCmd+0x38>)
 800266a:	4013      	ands	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000

0800267c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <RCC_APB1PeriphResetCmd+0x38>)
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	4908      	ldr	r1, [pc, #32]	; (80026b4 <RCC_APB1PeriphResetCmd+0x38>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4313      	orrs	r3, r2
 8002698:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800269a:	e006      	b.n	80026aa <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <RCC_APB1PeriphResetCmd+0x38>)
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <RCC_APB1PeriphResetCmd+0x38>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	610b      	str	r3, [r1, #16]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000

080026b8 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <SPI_I2S_DeInit+0x68>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d10a      	bne.n	80026de <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80026c8:	2101      	movs	r1, #1
 80026ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026ce:	f7ff ffb7 	bl	8002640 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80026d2:	2100      	movs	r1, #0
 80026d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026d8:	f7ff ffb2 	bl	8002640 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80026dc:	e01c      	b.n	8002718 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <SPI_I2S_DeInit+0x6c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10a      	bne.n	80026fc <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80026e6:	2101      	movs	r1, #1
 80026e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026ec:	f7ff ffc6 	bl	800267c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80026f0:	2100      	movs	r1, #0
 80026f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026f6:	f7ff ffc1 	bl	800267c <RCC_APB1PeriphResetCmd>
}
 80026fa:	e00d      	b.n	8002718 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SPI_I2S_DeInit+0x70>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d109      	bne.n	8002718 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002704:	2101      	movs	r1, #1
 8002706:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800270a:	f7ff ffb7 	bl	800267c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800270e:	2100      	movs	r1, #0
 8002710:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002714:	f7ff ffb2 	bl	800267c <RCC_APB1PeriphResetCmd>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013000 	.word	0x40013000
 8002724:	40003800 	.word	0x40003800
 8002728:	40003c00 	.word	0x40003c00

0800272c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002746:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	885b      	ldrh	r3, [r3, #2]
 8002750:	4313      	orrs	r3, r2
 8002752:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002758:	4313      	orrs	r3, r2
 800275a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002760:	4313      	orrs	r3, r2
 8002762:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002768:	4313      	orrs	r3, r2
 800276a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002770:	4313      	orrs	r3, r2
 8002772:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002778:	4313      	orrs	r3, r2
 800277a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002780:	4313      	orrs	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	4313      	orrs	r3, r2
 8002788:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	89fa      	ldrh	r2, [r7, #14]
 800278e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8b9b      	ldrh	r3, [r3, #28]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	8a1a      	ldrh	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	821a      	strh	r2, [r3, #16]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80027d4:	e007      	b.n	80027e6 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	801a      	strh	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	819a      	strh	r2, [r3, #12]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	891b      	ldrh	r3, [r3, #8]
 8002820:	b29a      	uxth	r2, r3
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	4013      	ands	r3, r2
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e001      	b.n	8002836 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	2600      	movs	r6, #0
 8002848:	4d0c      	ldr	r5, [pc, #48]	; (800287c <__libc_init_array+0x38>)
 800284a:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	f000 f866 	bl	8002924 <_init>
 8002858:	2600      	movs	r6, #0
 800285a:	4d0a      	ldr	r5, [pc, #40]	; (8002884 <__libc_init_array+0x40>)
 800285c:	4c0a      	ldr	r4, [pc, #40]	; (8002888 <__libc_init_array+0x44>)
 800285e:	1b64      	subs	r4, r4, r5
 8002860:	10a4      	asrs	r4, r4, #2
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	08002cd8 	.word	0x08002cd8
 8002880:	08002cd8 	.word	0x08002cd8
 8002884:	08002cd8 	.word	0x08002cd8
 8002888:	08002cdc 	.word	0x08002cdc

0800288c <round>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8002892:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8002896:	2a13      	cmp	r2, #19
 8002898:	460b      	mov	r3, r1
 800289a:	4684      	mov	ip, r0
 800289c:	468e      	mov	lr, r1
 800289e:	4604      	mov	r4, r0
 80028a0:	dc20      	bgt.n	80028e4 <round+0x58>
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	db0e      	blt.n	80028c4 <round+0x38>
 80028a6:	491e      	ldr	r1, [pc, #120]	; (8002920 <round+0x94>)
 80028a8:	4111      	asrs	r1, r2
 80028aa:	ea03 0001 	and.w	r0, r3, r1
 80028ae:	4320      	orrs	r0, r4
 80028b0:	d015      	beq.n	80028de <round+0x52>
 80028b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028b6:	fa43 f202 	asr.w	r2, r3, r2
 80028ba:	4496      	add	lr, r2
 80028bc:	2400      	movs	r4, #0
 80028be:	ea2e 0e01 	bic.w	lr, lr, r1
 80028c2:	e00a      	b.n	80028da <round+0x4e>
 80028c4:	3201      	adds	r2, #1
 80028c6:	bf14      	ite	ne
 80028c8:	2400      	movne	r4, #0
 80028ca:	2400      	moveq	r4, #0
 80028cc:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 80028d0:	bf04      	itt	eq
 80028d2:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 80028d6:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 80028da:	4673      	mov	r3, lr
 80028dc:	46a4      	mov	ip, r4
 80028de:	4660      	mov	r0, ip
 80028e0:	4619      	mov	r1, r3
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	2a33      	cmp	r2, #51	; 0x33
 80028e6:	dd08      	ble.n	80028fa <round+0x6e>
 80028e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80028ec:	d1f7      	bne.n	80028de <round+0x52>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f7fd fc32 	bl	8000158 <__adddf3>
 80028f4:	4684      	mov	ip, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	e7f1      	b.n	80028de <round+0x52>
 80028fa:	f04f 31ff 	mov.w	r1, #4294967295
 80028fe:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8002902:	fa21 f505 	lsr.w	r5, r1, r5
 8002906:	4228      	tst	r0, r5
 8002908:	d0e9      	beq.n	80028de <round+0x52>
 800290a:	2301      	movs	r3, #1
 800290c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8002910:	fa03 f202 	lsl.w	r2, r3, r2
 8002914:	1884      	adds	r4, r0, r2
 8002916:	bf28      	it	cs
 8002918:	449e      	addcs	lr, r3
 800291a:	ea24 0405 	bic.w	r4, r4, r5
 800291e:	e7dc      	b.n	80028da <round+0x4e>
 8002920:	000fffff 	.word	0x000fffff

08002924 <_init>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr

08002930 <_fini>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr
