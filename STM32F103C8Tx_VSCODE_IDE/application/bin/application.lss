
D:/Projects/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ed8 	.word	0x08001ed8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001ed8 	.word	0x08001ed8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000746:	f000 fc30 	bl	8000faa <Bsp_Init>
	GUI_Init();
 800074a:	f000 f8e8 	bl	800091e <GUI_Init>
	// OLED_Write(2,1,"B",0);
	// OLED_Write(3,50,"C",0);
	// 	Bsp_DelayMS(5000);
	// 	GUI_Show_String(1,1,a);
		
		for (uint8_t i = 0; i < 63; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e015      	b.n	8000780 <main+0x40>
			// GUI_SPI_Display_Char_ASCII(3,50,"B",0);
			// GUI_Test();
			// GUI_SPI_Reverse_Y(i,10);
			// Bsp_DelayMS(1000);
			// GUI_SPI_CLEAR_SCREEN();
			GUI_CLEAR_SCREEN();
 8000754:	f000 f89a 	bl	800088c <GUI_CLEAR_SCREEN>
			//GUI_ShowString_FulCoord(i,i,"abcd");
			GUI_Test();
 8000758:	f000 faf0 	bl	8000d3c <GUI_Test>
			GUI_Reverse_Y(i,10);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	210a      	movs	r1, #10
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa17 	bl	8000b94 <GUI_Reverse_Y>
			GUI_Draw_Line(-2,-50,110,50);
 8000766:	2332      	movs	r3, #50	; 0x32
 8000768:	226e      	movs	r2, #110	; 0x6e
 800076a:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 fa53 	bl	8000c1c <GUI_Draw_Line>
		 	GUI_Update_Screen();
 8000776:	f000 f831 	bl	80007dc <GUI_Update_Screen>
		for (uint8_t i = 0; i < 63; i++)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b3e      	cmp	r3, #62	; 0x3e
 8000784:	d9e6      	bls.n	8000754 <main+0x14>
 8000786:	e7e2      	b.n	800074e <main+0xe>

08000788 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000798:	e7fe      	b.n	8000798 <HardFault_Handler+0x4>

0800079a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800079e:	e7fe      	b.n	800079e <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <BusFault_Handler+0x4>

080007a6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <GUI_Update_Screen>:
*函数功能:' ' 
*说    明: '更新单片机显存缓存矩阵到SSD1306上,如果方法中使用了GUI_DISPLAY_BUF缓存，则必须在最后调用
			这个方法来更新显示' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Update_Screen(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	
	for (size_t j = 0; j < 8; j++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	e010      	b.n	800080a <GUI_Update_Screen+0x2e>
	{	
		GUI_Set_Cursor(j,0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f872 	bl	80008d8 <GUI_Set_Cursor>
		Bsp_I2C_Write_Bytes(&GUI_DISPLAY_BUF[j],0);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	01db      	lsls	r3, r3, #7
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <GUI_Update_Screen+0x40>)
 80007fa:	4413      	add	r3, r2
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fd4a 	bl	8001298 <Bsp_I2C_Write_Bytes>
	for (size_t j = 0; j < 8; j++)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d9eb      	bls.n	80007e8 <GUI_Update_Screen+0xc>
	}
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000030 	.word	0x20000030

08000820 <GUI_Draw_Point>:
*函数名称:'GUI_Draw_Point' 
*函数功能:'画 点' 
*参    数:'0<x<64,0<y<128' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Draw_Point(uint8_t x,int y){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
	if (x>=0 && x<=127 && y>=0 &&y <= 63)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db24      	blt.n	800087e <GUI_Draw_Point+0x5e>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db21      	blt.n	800087e <GUI_Draw_Point+0x5e>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2b3f      	cmp	r3, #63	; 0x3f
 800083e:	dc1e      	bgt.n	800087e <GUI_Draw_Point+0x5e>
	{
		uint8_t Y = (u8)y;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	73fb      	strb	r3, [r7, #15]
		
		GUI_DISPLAY_BUF[Y/8][x] |= 0x01 << (Y%8);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	b2d8      	uxtb	r0, r3
 800084a:	4602      	mov	r2, r0
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	490e      	ldr	r1, [pc, #56]	; (8000888 <GUI_Draw_Point+0x68>)
 8000850:	01d2      	lsls	r2, r2, #7
 8000852:	440a      	add	r2, r1
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25a      	sxtb	r2, r3
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b259      	sxtb	r1, r3
 800086c:	4602      	mov	r2, r0
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b2c8      	uxtb	r0, r1
 8000872:	4905      	ldr	r1, [pc, #20]	; (8000888 <GUI_Draw_Point+0x68>)
 8000874:	01d2      	lsls	r2, r2, #7
 8000876:	440a      	add	r2, r1
 8000878:	4413      	add	r3, r2
 800087a:	4602      	mov	r2, r0
 800087c:	701a      	strb	r2, [r3, #0]
	}
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000030 	.word	0x20000030

0800088c <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 8000892:	2300      	movs	r3, #0
 8000894:	71bb      	strb	r3, [r7, #6]
 8000896:	e013      	b.n	80008c0 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	e00a      	b.n	80008b4 <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 800089e:	79ba      	ldrb	r2, [r7, #6]
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	490c      	ldr	r1, [pc, #48]	; (80008d4 <GUI_CLEAR_SCREEN+0x48>)
 80008a4:	01d2      	lsls	r2, r2, #7
 80008a6:	440a      	add	r2, r1
 80008a8:	4413      	add	r3, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b80      	cmp	r3, #128	; 0x80
 80008b8:	d9f1      	bls.n	800089e <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	3301      	adds	r3, #1
 80008be:	71bb      	strb	r3, [r7, #6]
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d9e8      	bls.n	8000898 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000030 	.word	0x20000030

080008d8 <GUI_Set_Cursor>:
 *返 回 值：
 *说    明：0 < x < 8 , 0 < Y < 128,直接操作SSD1306 和 非全尺寸指令配合使用
 *作    者：Danny
 *修改记录：
 *----------------------------------------------------------------------------------------*/
void GUI_Set_Cursor(uint8_t Y,uint8_t X){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]

	Bsp_I2C_SET(0xB0 | Y);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fcb9 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x10 | ((X & 0xF0) >> 4));
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fcb0 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00 | (X & 0x0F));  //低位
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fca9 	bl	8001268 <Bsp_I2C_SET>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <GUI_Init>:
@name:'GUI_Init' 
@param ''
@brief:'初始化 GUI' 
@author Danny
*----------------------------------------------------------------------------------------*/ 
void GUI_Init(void) {
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
	
 	Bsp_DelayMS(200);
 8000922:	20c8      	movs	r0, #200	; 0xc8
 8000924:	f000 fb2e 	bl	8000f84 <Bsp_DelayMS>
	/**************初始化SSD1306*****************/
	Bsp_I2C_SET(0xAE); //--turn off oled panel
 8000928:	20ae      	movs	r0, #174	; 0xae
 800092a:	f000 fc9d 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00); //---set low column address
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fc9a 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x10); //---set high column address
 8000934:	2010      	movs	r0, #16
 8000936:	f000 fc97 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x40 ); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800093a:	2040      	movs	r0, #64	; 0x40
 800093c:	f000 fc94 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x81 ); //--set contrast control register
 8000940:	2081      	movs	r0, #129	; 0x81
 8000942:	f000 fc91 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xCF ); // Set SEG Output Current Brightness
 8000946:	20cf      	movs	r0, #207	; 0xcf
 8000948:	f000 fc8e 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA1 ); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800094c:	20a1      	movs	r0, #161	; 0xa1
 800094e:	f000 fc8b 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xC8 ); //Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f000 fc88 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA6 ); //--set normal display
 8000958:	20a6      	movs	r0, #166	; 0xa6
 800095a:	f000 fc85 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA8 ); //--set multiplex ratio(1 to 64)
 800095e:	20a8      	movs	r0, #168	; 0xa8
 8000960:	f000 fc82 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x3f ); //--1/64 duty
 8000964:	203f      	movs	r0, #63	; 0x3f
 8000966:	f000 fc7f 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xD3 ); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800096a:	20d3      	movs	r0, #211	; 0xd3
 800096c:	f000 fc7c 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x00 ); //-not offset
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fc79 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xd5 ); //--set display clock divide ratio/oscillator frequency
 8000976:	20d5      	movs	r0, #213	; 0xd5
 8000978:	f000 fc76 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x80 ); //--set divide ratio, Set Clock as 100 Frames/Sec
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	f000 fc73 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xD9 ); //--set pre-charge period
 8000982:	20d9      	movs	r0, #217	; 0xd9
 8000984:	f000 fc70 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xF1 ); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000988:	20f1      	movs	r0, #241	; 0xf1
 800098a:	f000 fc6d 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xDA ); //--set com pins hardware configuration
 800098e:	20da      	movs	r0, #218	; 0xda
 8000990:	f000 fc6a 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x12 );
 8000994:	2012      	movs	r0, #18
 8000996:	f000 fc67 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xDB ); //--set vcomh
 800099a:	20db      	movs	r0, #219	; 0xdb
 800099c:	f000 fc64 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x40 ); //Set VCOM Deselect Level
 80009a0:	2040      	movs	r0, #64	; 0x40
 80009a2:	f000 fc61 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x20 ); //-Set Page Addressing Mode (0x00/0x01/0x02)
 80009a6:	2020      	movs	r0, #32
 80009a8:	f000 fc5e 	bl	8001268 <Bsp_I2C_SET>
	//OLED_WR_Byte(0x02, OLED_CMD); //
	Bsp_I2C_SET(0x00); //在这里修改位行扫描方式
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fc5b 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x8D); //--set Charge Pump enable/disable
 80009b2:	208d      	movs	r0, #141	; 0x8d
 80009b4:	f000 fc58 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0x14); //--set(0x10) disable
 80009b8:	2014      	movs	r0, #20
 80009ba:	f000 fc55 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA4); // Disable Entire Display On (0xa4/0xa5)
 80009be:	20a4      	movs	r0, #164	; 0xa4
 80009c0:	f000 fc52 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xA6); // Disable Inverse Display On (0xa6/a7)
 80009c4:	20a6      	movs	r0, #166	; 0xa6
 80009c6:	f000 fc4f 	bl	8001268 <Bsp_I2C_SET>
	Bsp_I2C_SET(0xAF);
 80009ca:	20af      	movs	r0, #175	; 0xaf
 80009cc:	f000 fc4c 	bl	8001268 <Bsp_I2C_SET>
	// Bsp_I2C_SET(0x8D);	//设置充电泵
	// Bsp_I2C_SET(0x14);

	// Bsp_I2C_SET(0xAF);	//开启显示
	// //while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	Bsp_I2C_DMA_Init();
 80009d0:	f000 faf4 	bl	8000fbc <Bsp_I2C_DMA_Init>
	//GUI_CLEAR_SCREEN();				//复位OLED
	//GUI_Update_Screen();				//更新显示，清屏，防止初始化后未显示内容时花屏
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <GUI_Show_Image>:
			Image: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Show_Image(int16_t X, int16_t Y,uint8_t Height,uint8_t Width, const uint8_t *Image){
 80009d8:	b490      	push	{r4, r7}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4604      	mov	r4, r0
 80009e0:	4608      	mov	r0, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4623      	mov	r3, r4
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4603      	mov	r3, r0
 80009ec:	80bb      	strh	r3, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70fb      	strb	r3, [r7, #3]
 80009f2:	4613      	mov	r3, r2
 80009f4:	70bb      	strb	r3, [r7, #2]
	uint8_t	across_line = (Height-1) / 8 + 1 ; 			//先看占几行
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da00      	bge.n	8000a00 <GUI_Show_Image+0x28>
 80009fe:	3307      	adds	r3, #7
 8000a00:	10db      	asrs	r3, r3, #3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3301      	adds	r3, #1
 8000a06:	727b      	strb	r3, [r7, #9]
	int16_t Page, shift;
	for (uint8_t j = 0; j < across_line; j++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	72fb      	strb	r3, [r7, #11]
 8000a0c:	e0b4      	b.n	8000b78 <GUI_Show_Image+0x1a0>
	{	
		for (uint8_t i = 0; i < Width ; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	72bb      	strb	r3, [r7, #10]
 8000a12:	e0a9      	b.n	8000b68 <GUI_Show_Image+0x190>
		{	
			if ((X + i) > 127 && (X + i) < 0)
 8000a14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a18:	7abb      	ldrb	r3, [r7, #10]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a1e:	dd06      	ble.n	8000a2e <GUI_Show_Image+0x56>
 8000a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a24:	7abb      	ldrb	r3, [r7, #10]
 8000a26:	4413      	add	r3, r2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f2c0 8099 	blt.w	8000b60 <GUI_Show_Image+0x188>
			{
				continue;
			}
			shift = Y % 8;
 8000a2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a32:	425a      	negs	r2, r3
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	f002 0207 	and.w	r2, r2, #7
 8000a3c:	bf58      	it	pl
 8000a3e:	4253      	negpl	r3, r2
 8000a40:	81bb      	strh	r3, [r7, #12]
			Page = Y / 8;
 8000a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da00      	bge.n	8000a4c <GUI_Show_Image+0x74>
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	10db      	asrs	r3, r3, #3
 8000a4e:	81fb      	strh	r3, [r7, #14]

			if (Y < 0)   // Y<-8 的情况可以保证 Page+j<0(j ==0 ) 但是 -8<Y<0的情况会进去像素赋值，而j<0导致i+width出现不准确的情况，我们只需要需要的部分就好了
 8000a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da07      	bge.n	8000a68 <GUI_Show_Image+0x90>
			{
				Page -= 1;
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	81fb      	strh	r3, [r7, #14]
				shift += 8;
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	3308      	adds	r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	81bb      	strh	r3, [r7, #12]
			}
			if ((Page + j) >= 0 && (Page + j) < 8)
 8000a68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	4413      	add	r3, r2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db34      	blt.n	8000ade <GUI_Show_Image+0x106>
 8000a74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	dc2e      	bgt.n	8000ade <GUI_Show_Image+0x106>
			{
				GUI_DISPLAY_BUF[Page + j][X + i] |= Image[i + Width*j] << (shift);
 8000a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a84:	7afb      	ldrb	r3, [r7, #11]
 8000a86:	441a      	add	r2, r3
 8000a88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a8c:	7abb      	ldrb	r3, [r7, #10]
 8000a8e:	440b      	add	r3, r1
 8000a90:	493f      	ldr	r1, [pc, #252]	; (8000b90 <GUI_Show_Image+0x1b8>)
 8000a92:	01d2      	lsls	r2, r2, #7
 8000a94:	440a      	add	r2, r1
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25a      	sxtb	r2, r3
 8000a9c:	7ab9      	ldrb	r1, [r7, #10]
 8000a9e:	78bb      	ldrb	r3, [r7, #2]
 8000aa0:	7af8      	ldrb	r0, [r7, #11]
 8000aa2:	fb00 f303 	mul.w	r3, r0, r3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	440b      	add	r3, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b258      	sxtb	r0, r3
 8000ac0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000acc:	7abb      	ldrb	r3, [r7, #10]
 8000ace:	440b      	add	r3, r1
 8000ad0:	b2c0      	uxtb	r0, r0
 8000ad2:	492f      	ldr	r1, [pc, #188]	; (8000b90 <GUI_Show_Image+0x1b8>)
 8000ad4:	01d2      	lsls	r2, r2, #7
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	4602      	mov	r2, r0
 8000adc:	701a      	strb	r2, [r3, #0]
			}
			if ((Page + j + 1) >= 0 && (Page + j + 1) < 8)
 8000ade:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ae2:	7afb      	ldrb	r3, [r7, #11]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aea:	db3a      	blt.n	8000b62 <GUI_Show_Image+0x18a>
 8000aec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	4413      	add	r3, r2
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	dc34      	bgt.n	8000b62 <GUI_Show_Image+0x18a>
			{
				GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Image[i + Width*j] >> (8-(shift));
 8000af8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	4413      	add	r3, r2
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b06:	7abb      	ldrb	r3, [r7, #10]
 8000b08:	440b      	add	r3, r1
 8000b0a:	4921      	ldr	r1, [pc, #132]	; (8000b90 <GUI_Show_Image+0x1b8>)
 8000b0c:	01d2      	lsls	r2, r2, #7
 8000b0e:	440a      	add	r2, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	7ab9      	ldrb	r1, [r7, #10]
 8000b18:	78bb      	ldrb	r3, [r7, #2]
 8000b1a:	7af8      	ldrb	r0, [r7, #11]
 8000b1c:	fb00 f303 	mul.w	r3, r0, r3
 8000b20:	440b      	add	r3, r1
 8000b22:	4619      	mov	r1, r3
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	440b      	add	r3, r1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b30:	f1c3 0308 	rsb	r3, r3, #8
 8000b34:	fa41 f303 	asr.w	r3, r1, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b258      	sxtb	r0, r3
 8000b3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b42:	7afb      	ldrb	r3, [r7, #11]
 8000b44:	4413      	add	r3, r2
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b4c:	7abb      	ldrb	r3, [r7, #10]
 8000b4e:	440b      	add	r3, r1
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	490f      	ldr	r1, [pc, #60]	; (8000b90 <GUI_Show_Image+0x1b8>)
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e000      	b.n	8000b62 <GUI_Show_Image+0x18a>
				continue;
 8000b60:	bf00      	nop
		for (uint8_t i = 0; i < Width ; i++)
 8000b62:	7abb      	ldrb	r3, [r7, #10]
 8000b64:	3301      	adds	r3, #1
 8000b66:	72bb      	strb	r3, [r7, #10]
 8000b68:	7aba      	ldrb	r2, [r7, #10]
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f4ff af51 	bcc.w	8000a14 <GUI_Show_Image+0x3c>
	for (uint8_t j = 0; j < across_line; j++)
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	3301      	adds	r3, #1
 8000b76:	72fb      	strb	r3, [r7, #11]
 8000b78:	7afa      	ldrb	r2, [r7, #11]
 8000b7a:	7a7b      	ldrb	r3, [r7, #9]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f4ff af46 	bcc.w	8000a0e <GUI_Show_Image+0x36>
			}
		}
	}

}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc90      	pop	{r4, r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000030 	.word	0x20000030

08000b94 <GUI_Reverse_Y>:
*参    数:'y:要反转的y轴坐标 0<y<64 height：反转行的高度' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Reverse_Y(uint8_t y,uint8_t height){
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]

	for (uint8_t j = y; j < y+height; j++)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e029      	b.n	8000bfe <GUI_Reverse_Y+0x6a>
	{
		for (uint8_t i = 0; i < 128; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	73bb      	strb	r3, [r7, #14]
 8000bae:	e01f      	b.n	8000bf0 <GUI_Reverse_Y+0x5c>
		{
			GUI_DISPLAY_BUF[j / 8][i] ^= 0x01 << (j % 8); //对行取反
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	b2d8      	uxtb	r0, r3
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	4917      	ldr	r1, [pc, #92]	; (8000c18 <GUI_Reverse_Y+0x84>)
 8000bbc:	01d2      	lsls	r2, r2, #7
 8000bbe:	440a      	add	r2, r1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25a      	sxtb	r2, r3
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	b259      	sxtb	r1, r3
 8000bd8:	4602      	mov	r2, r0
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
 8000bdc:	b2c8      	uxtb	r0, r1
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <GUI_Reverse_Y+0x84>)
 8000be0:	01d2      	lsls	r2, r2, #7
 8000be2:	440a      	add	r2, r1
 8000be4:	4413      	add	r3, r2
 8000be6:	4602      	mov	r2, r0
 8000be8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 128; i++)
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	3301      	adds	r3, #1
 8000bee:	73bb      	strb	r3, [r7, #14]
 8000bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dadb      	bge.n	8000bb0 <GUI_Reverse_Y+0x1c>
	for (uint8_t j = y; j < y+height; j++)
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	79f9      	ldrb	r1, [r7, #7]
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	440b      	add	r3, r1
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbcf      	blt.n	8000baa <GUI_Reverse_Y+0x16>
		}
	}

}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000030 	.word	0x20000030

08000c1c <GUI_Draw_Line>:
		
	// }
	
}

void GUI_Draw_Line(int X1, int Y1,int X2, int Y2){
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
	// {
	// 	return ;
	// }
	float X;
	float Y;
	X = X2 - X1;
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb45 	bl	80002c0 <__aeabi_i2f>
 8000c36:	4603      	mov	r3, r0
 8000c38:	623b      	str	r3, [r7, #32]
	Y = Y2 - Y1;
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fb3d 	bl	80002c0 <__aeabi_i2f>
 8000c46:	4603      	mov	r3, r0
 8000c48:	61fb      	str	r3, [r7, #28]

	float slop = Y / X;
 8000c4a:	6a39      	ldr	r1, [r7, #32]
 8000c4c:	69f8      	ldr	r0, [r7, #28]
 8000c4e:	f7ff fc3f 	bl	80004d0 <__aeabi_fdiv>
 8000c52:	4603      	mov	r3, r0
 8000c54:	61bb      	str	r3, [r7, #24]
	float B = Y1 - slop * X1;
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff fb32 	bl	80002c0 <__aeabi_i2f>
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff fb2e 	bl	80002c0 <__aeabi_i2f>
 8000c64:	4603      	mov	r3, r0
 8000c66:	69b9      	ldr	r1, [r7, #24]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fb7d 	bl	8000368 <__aeabi_fmul>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff fa6e 	bl	8000154 <__aeabi_fsub>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	617b      	str	r3, [r7, #20]
	u8 count = (X2 - X1)?(X2-X1):(X1-X2);
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d006      	beq.n	8000c92 <GUI_Draw_Line+0x76>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	e005      	b.n	8000c9e <GUI_Draw_Line+0x82>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < count; i++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca4:	e041      	b.n	8000d2a <GUI_Draw_Line+0x10e>
	{	
		if ((X1 + i) < 0 || ((slop * (X1 + i)) +B) < 0)
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	4413      	add	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db38      	blt.n	8000d22 <GUI_Draw_Line+0x106>
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fb02 	bl	80002c0 <__aeabi_i2f>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb51 	bl	8000368 <__aeabi_fmul>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6979      	ldr	r1, [r7, #20]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa44 	bl	8000158 <__addsf3>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f04f 0100 	mov.w	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fce4 	bl	80006a4 <__aeabi_fcmplt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11f      	bne.n	8000d22 <GUI_Draw_Line+0x106>
		{
			continue;
		}
		
		GUI_Draw_Point((X1 + i),(slop * (X1 + i)) +B);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b2dc      	uxtb	r4, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fae3 	bl	80002c0 <__aeabi_i2f>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	69b9      	ldr	r1, [r7, #24]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fb32 	bl	8000368 <__aeabi_fmul>
 8000d04:	4603      	mov	r3, r0
 8000d06:	6979      	ldr	r1, [r7, #20]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa25 	bl	8000158 <__addsf3>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fcef 	bl	80006f4 <__aeabi_f2iz>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fd80 	bl	8000820 <GUI_Draw_Point>
 8000d20:	e000      	b.n	8000d24 <GUI_Draw_Line+0x108>
			continue;
 8000d22:	bf00      	nop
	for (int i = 0; i < count; i++)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	3301      	adds	r3, #1
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2a:	7cfb      	ldrb	r3, [r7, #19]
 8000d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbb9      	blt.n	8000ca6 <GUI_Draw_Line+0x8a>
	}
	

}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	372c      	adds	r7, #44	; 0x2c
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <GUI_Test>:
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
		}
	}
}

void GUI_Test(void){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af02      	add	r7, sp, #8
	
	//Bsp_DelayS(5);
	GUI_Show_Image(100,50,16,16,OLED_Test[0].CellMatrix);
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <GUI_Test+0x40>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2310      	movs	r3, #16
 8000d48:	2210      	movs	r2, #16
 8000d4a:	2132      	movs	r1, #50	; 0x32
 8000d4c:	2064      	movs	r0, #100	; 0x64
 8000d4e:	f7ff fe43 	bl	80009d8 <GUI_Show_Image>
	GUI_Show_Image(1,1,16,16,OLED_Test[0].CellMatrix);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <GUI_Test+0x40>)
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2310      	movs	r3, #16
 8000d58:	2210      	movs	r2, #16
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fe3b 	bl	80009d8 <GUI_Show_Image>
	GUI_Show_Image(-5,-5,16,16,OLED_Test[0].CellMatrix);
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <GUI_Test+0x40>)
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2310      	movs	r3, #16
 8000d68:	2210      	movs	r2, #16
 8000d6a:	f06f 0104 	mvn.w	r1, #4
 8000d6e:	f06f 0004 	mvn.w	r0, #4
 8000d72:	f7ff fe31 	bl	80009d8 <GUI_Show_Image>
	//GUI_SPI_Display_Graph(5,5,16,16,OLED_Test[0].CellMatrix);
	//GUI_Display_OFF();
	//Bsp_DelayS(5);
	//GUI_Display_ON();
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08001ef0 	.word	0x08001ef0

08000d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <SystemInit+0x5c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <SystemInit+0x5c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <SystemInit+0x5c>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4911      	ldr	r1, [pc, #68]	; (8000ddc <SystemInit+0x5c>)
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <SystemInit+0x60>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <SystemInit+0x5c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <SystemInit+0x5c>)
 8000da2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <SystemInit+0x5c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SystemInit+0x5c>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SystemInit+0x5c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <SystemInit+0x5c>)
 8000dbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000dc2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SystemInit+0x5c>)
 8000dc6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dca:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000dcc:	f000 f80c 	bl	8000de8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SystemInit+0x64>)
 8000dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	f8ff0000 	.word	0xf8ff0000
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000dec:	f000 f802 	bl	8000df4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a39      	ldr	r2, [pc, #228]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <SetSysClockTo72+0x38>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e2a:	d1f0      	bne.n	8000e0e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	e001      	b.n	8000e42 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d14b      	bne.n	8000ee0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e5a:	f023 0303 	bic.w	r3, r3, #3
 8000e5e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <SetSysClockTo72+0xfc>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e8e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000e92:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <SetSysClockTo72+0xf8>)
 8000e9a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000e9e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eaa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000eac:	bf00      	nop
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <SetSysClockTo72+0xf8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f9      	beq.n	8000eae <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ec0:	f023 0303 	bic.w	r3, r3, #3
 8000ec4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000ed2:	bf00      	nop
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SetSysClockTo72+0xf8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d1f9      	bne.n	8000ed4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef4:	f7ff ff44 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000efa:	490c      	ldr	r1, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f10:	4c09      	ldr	r4, [pc, #36]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f000 ffb7 	bl	8001e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff fc0d 	bl	8000740 <main>
  bx lr
 8000f26:	4770      	bx	lr
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f30:	08001f3c 	.word	0x08001f3c
  ldr r2, =_sbss
 8000f34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f38:	20000434 	.word	0x20000434

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 8000f48:	490d      	ldr	r1, [pc, #52]	; (8000f80 <Bsp_DelayUS+0x40>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <Bsp_DelayUS+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <Bsp_DelayUS+0x40>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 8000f62:	bf00      	nop
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <Bsp_DelayUS+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f9      	beq.n	8000f64 <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <Bsp_DelayUS+0x40>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	while(xms--)
 8000f8c:	e003      	b.n	8000f96 <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	f7ff ffd5 	bl	8000f40 <Bsp_DelayUS>
	while(xms--)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f6      	bne.n	8000f8e <Bsp_DelayMS+0xa>
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8000fae:	f000 f873 	bl	8001098 <Bsp_GPIO_Init>
	//Bsp_SPI_Init();	
	Bsp_I2C_Init();
 8000fb2:	f000 f89f 	bl	80010f4 <Bsp_I2C_Init>
    
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <Bsp_I2C_DMA_Init>:

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
}


void Bsp_I2C_DMA_Init(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
    Bsp_I2C_DMA_Ctrl(ENABLE);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 f886 	bl	80010d4 <Bsp_I2C_DMA_Ctrl>
    
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 fee8 	bl	8001da0 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel6);
 8000fd0:	481d      	ldr	r0, [pc, #116]	; (8001048 <Bsp_I2C_DMA_Init+0x8c>)
 8000fd2:	f000 f9ef 	bl	80013b4 <DMA_DeInit>

	DMA_InitTypeDef DMA_InitStructure;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&GUI_I2C->DR; 			//DMA 外设 ADC 基地址
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <Bsp_I2C_DMA_Init+0x90>)
 8000fd8:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <Bsp_I2C_DMA_Init+0x94>)
 8000fdc:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000fde:	2310      	movs	r3, #16
 8000fe0:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 128; 							//DMA 通道的 DMA 缓存的大小
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel6, &DMA_InitStructure); //根据指定的参数初始化
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <Bsp_I2C_DMA_Init+0x8c>)
 800100a:	f000 fa8f 	bl	800152c <DMA_Init>

	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = DMA1_Channel6_IRQn;
 800100e:	2310      	movs	r3, #16
 8001010:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800101a:	2301      	movs	r3, #1
 800101c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct);
 800101e:	463b      	mov	r3, r7
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f965 	bl	80012f0 <NVIC_Init>

	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
 8001026:	2101      	movs	r1, #1
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <Bsp_I2C_DMA_Init+0x8c>)
 800102a:	f000 fabd 	bl	80015a8 <DMA_Cmd>
	DMA_Cmd(DMA1_Channel6, DISABLE); 
 800102e:	2100      	movs	r1, #0
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <Bsp_I2C_DMA_Init+0x8c>)
 8001032:	f000 fab9 	bl	80015a8 <DMA_Cmd>
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
 8001036:	2201      	movs	r2, #1
 8001038:	2102      	movs	r1, #2
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <Bsp_I2C_DMA_Init+0x8c>)
 800103c:	f000 fad0 	bl	80015e0 <DMA_ITConfig>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	4002006c 	.word	0x4002006c
 800104c:	40005410 	.word	0x40005410
 8001050:	20000030 	.word	0x20000030

08001054 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8001058:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800105c:	f000 fade 	bl	800161c <DMA_GetFlagStatus>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d012      	beq.n	800108c <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8001066:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800106a:	f000 faff 	bl	800166c <DMA_ClearFlag>
		Bsp_DelayUS(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f7ff ff66 	bl	8000f40 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8001074:	2101      	movs	r1, #1
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <DMA1_Channel6_IRQHandler+0x3c>)
 8001078:	f000 fd11 	bl	8001a9e <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 800107c:	2101      	movs	r1, #1
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <DMA1_Channel6_IRQHandler+0x3c>)
 8001080:	f000 fd2c 	bl	8001adc <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8001084:	2100      	movs	r1, #0
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <DMA1_Channel6_IRQHandler+0x40>)
 8001088:	f000 fa8e 	bl	80015a8 <DMA_Cmd>
	}
}	
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	4002006c 	.word	0x4002006c

08001098 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;



void Bsp_GPIO_Init(){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 800109c:	2101      	movs	r1, #1
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fe9c 	bl	8001ddc <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2009      	movs	r0, #9
 80010a8:	f000 fe98 	bl	8001ddc <RCC_APB2PeriphClockCmd>

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
        GPIO_Init(GPIOA,&GPIO_InitStruct_OUT_PP);
      
    #elif defined(GUI_I2C_MODE_SUPPORT)
        GPIO_InitStruct_AF_OD.GPIO_Mode = GPIO_Mode_AF_OD;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <Bsp_GPIO_Init+0x34>)
 80010ae:	221c      	movs	r2, #28
 80010b0:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_OD.GPIO_Speed = GPIO_Speed_50MHz;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <Bsp_GPIO_Init+0x34>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_OD.GPIO_Pin = GUI_SCL_PIN | GUI_SDA_PIN ;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <Bsp_GPIO_Init+0x34>)
 80010ba:	22c0      	movs	r2, #192	; 0xc0
 80010bc:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);
 80010be:	4903      	ldr	r1, [pc, #12]	; (80010cc <Bsp_GPIO_Init+0x34>)
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <Bsp_GPIO_Init+0x38>)
 80010c2:	f000 faed 	bl	80016a0 <GPIO_Init>

    #endif
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000430 	.word	0x20000430
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <Bsp_I2C_DMA_Ctrl>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_DMA_Ctrl(FunctionalState ctrl){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    I2C_DMACmd(GUI_I2C,ctrl);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <Bsp_I2C_DMA_Ctrl+0x1c>)
 80010e4:	f000 fc9d 	bl	8001a22 <I2C_DMACmd>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40005400 	.word	0x40005400

080010f4 <Bsp_I2C_Init>:
*函数名称:'Bsp_I2C_Init' 
*函数功能:'硬件 I2C 初始化' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_Init(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

    if (GUI_I2C == I2C1){
        RCC_APB1PeriphClockCmd(RCC_APB1ENR_I2C1EN , ENABLE);
 80010fa:	2101      	movs	r1, #1
 80010fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001100:	f000 fe8a 	bl	8001e18 <RCC_APB1PeriphClockCmd>
    }
    else{
        RCC_APB2PeriphClockCmd(RCC_APB1ENR_I2C2EN , ENABLE);
    }

    I2C_DeInit(GUI_I2C);
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001106:	f000 fb87 	bl	8001818 <I2C_DeInit>

    GUI_I2C->CR1 |= 0x8000;  // 手动清除清BUSY 避免出现硬件错误
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <Bsp_I2C_Init+0x80>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800111a:	b29b      	uxth	r3, r3
 800111c:	8013      	strh	r3, [r2, #0]
	GUI_I2C->CR1 &= ~0x8000;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001126:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800112a:	b29b      	uxth	r3, r3
 800112c:	8013      	strh	r3, [r2, #0]
    
    I2C_InitTypeDef I2C_InitStruct;
    //cutome mode : common mode
    I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001132:	817b      	strh	r3, [r7, #10]
    // I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
    // I2C_InitStruct.I2C_OwnAddress1 = 0x30;
    // I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    // I2C_InitStruct.I2C_ClockSpeed = 400000;

    I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	817b      	strh	r3, [r7, #10]
    I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 800113a:	2300      	movs	r3, #0
 800113c:	80bb      	strh	r3, [r7, #4]
    I2C_InitStruct.I2C_DutyCycle = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	80fb      	strh	r3, [r7, #6]
    I2C_InitStruct.I2C_OwnAddress1 = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	813b      	strh	r3, [r7, #8]
    I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800114a:	81bb      	strh	r3, [r7, #12]
    I2C_InitStruct.I2C_ClockSpeed = 10000;
 800114c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001150:	603b      	str	r3, [r7, #0]
    I2C_Cmd(GUI_I2C,ENABLE);
 8001152:	2101      	movs	r1, #1
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001156:	f000 fc45 	bl	80019e4 <I2C_Cmd>
    I2C_Init(GUI_I2C,&I2C_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <Bsp_I2C_Init+0x80>)
 8001160:	f000 fb7e 	bl	8001860 <I2C_Init>

    
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 	
 8001164:	2101      	movs	r1, #1
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fe1a 	bl	8001da0 <RCC_AHBPeriphClockCmd>
	// NVIC_Init(&NVIC_InitStructure);  //初始化NVIC寄存器

    // DMA_ITConfig(DMA1_Channel6, DMA_IT_TC, ENABLE);	
    // DMA_Cmd(DMA1_Channel6,ENABLE);
    
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40005400 	.word	0x40005400

08001178 <I2C_Write_DATA>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_DATA(const uint8_t dat){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    // int error =0;
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)){
 8001182:	bf00      	nop
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <I2C_Write_DATA+0x2c>)
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <I2C_Write_DATA+0x30>)
 8001188:	f000 fcf3 	bl	8001b72 <I2C_CheckEvent>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f8      	beq.n	8001184 <I2C_Write_DATA+0xc>
        //ERROR_DECT(*OVER_NUM ,"const char *WARNING");
        //return;    
    };
    
    I2C_SendData(GUI_I2C,dat);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <I2C_Write_DATA+0x30>)
 8001198:	f000 fcbf 	bl	8001b1a <I2C_SendData>

}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	00070080 	.word	0x00070080
 80011a8:	40005400 	.word	0x40005400

080011ac <I2C_Write_Ins>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_Ins(const uint8_t Ins){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    // int error =0;
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING)){
 80011b6:	bf00      	nop
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <I2C_Write_Ins+0x2c>)
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <I2C_Write_Ins+0x30>)
 80011bc:	f000 fcd9 	bl	8001b72 <I2C_CheckEvent>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f8      	beq.n	80011b8 <I2C_Write_Ins+0xc>
        //     printf("\r\n I2C 写 指令 超时 \r\n");
        //     return ;
        // }        
    };
    
    I2C_SendData(GUI_I2C,Ins);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <I2C_Write_Ins+0x30>)
 80011cc:	f000 fca5 	bl	8001b1a <I2C_SendData>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	00070080 	.word	0x00070080
 80011dc:	40005400 	.word	0x40005400

080011e0 <I2C_Write_Addr>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_Write_Addr(const uint8_t addr){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
//    uint16_t error =0;
   while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_MODE_SELECT)){}
 80011ea:	bf00      	nop
 80011ec:	4908      	ldr	r1, [pc, #32]	; (8001210 <I2C_Write_Addr+0x30>)
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <I2C_Write_Addr+0x34>)
 80011f0:	f000 fcbf 	bl	8001b72 <I2C_CheckEvent>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f8      	beq.n	80011ec <I2C_Write_Addr+0xc>
   I2C_Send7bitAddress(GUI_I2C,addr,I2C_Direction_Transmitter);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <I2C_Write_Addr+0x34>)
 8001202:	f000 fc99 	bl	8001b38 <I2C_Send7bitAddress>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	00030001 	.word	0x00030001
 8001214:	40005400 	.word	0x40005400

08001218 <I2C_START>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_START(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    while (I2C_GetFlagStatus(GUI_I2C, I2C_FLAG_BUSY)){};
 800121c:	bf00      	nop
 800121e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <I2C_START+0x24>)
 8001224:	f000 fcd4 	bl	8001bd0 <I2C_GetFlagStatus>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f7      	bne.n	800121e <I2C_START+0x6>
    
	I2C_GenerateSTART(GUI_I2C,ENABLE);
 800122e:	2101      	movs	r1, #1
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <I2C_START+0x24>)
 8001232:	f000 fc15 	bl	8001a60 <I2C_GenerateSTART>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40005400 	.word	0x40005400

08001240 <I2C_STOP>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void I2C_STOP(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    while(!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){};
 8001244:	bf00      	nop
 8001246:	4906      	ldr	r1, [pc, #24]	; (8001260 <I2C_STOP+0x20>)
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <I2C_STOP+0x24>)
 800124a:	f000 fc92 	bl	8001b72 <I2C_CheckEvent>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f8      	beq.n	8001246 <I2C_STOP+0x6>
	
    I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8001254:	2101      	movs	r1, #1
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <I2C_STOP+0x24>)
 8001258:	f000 fc21 	bl	8001a9e <I2C_GenerateSTOP>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	00070084 	.word	0x00070084
 8001264:	40005400 	.word	0x40005400

08001268 <Bsp_I2C_SET>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_SET(const uint8_t CMD){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	I2C_START();
 8001272:	f7ff ffd1 	bl	8001218 <I2C_START>

	I2C_Write_Addr(OLED_ADDRESS);
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f7ff ffb2 	bl	80011e0 <I2C_Write_Addr>
    I2C_Write_Ins(OLED_SSD1306_SEND_CMD);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ff95 	bl	80011ac <I2C_Write_Ins>
    I2C_Write_DATA(CMD);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff77 	bl	8001178 <I2C_Write_DATA>

	I2C_STOP();
 800128a:	f7ff ffd9 	bl	8001240 <I2C_STOP>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <Bsp_I2C_Write_Bytes>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_I2C_Write_Bytes(const uint8_t *dat,uint8_t count){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
    //Bsp_I2C_DMA_Ctrl(ENABLE);

    I2C_START();
 80012a4:	f7ff ffb8 	bl	8001218 <I2C_START>
	I2C_Write_Addr(OLED_ADDRESS);
 80012a8:	2078      	movs	r0, #120	; 0x78
 80012aa:	f7ff ff99 	bl	80011e0 <I2C_Write_Addr>
    I2C_Write_Ins(OLED_SSD1306_SEND_DATA);
 80012ae:	2040      	movs	r0, #64	; 0x40
 80012b0:	f7ff ff7c 	bl	80011ac <I2C_Write_Ins>
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80012b4:	e003      	b.n	80012be <Bsp_I2C_Write_Bytes+0x26>
    DMA_Cmd(DMA1_Channel6,DISABLE);
 80012b6:	2100      	movs	r1, #0
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <Bsp_I2C_Write_Bytes+0x4c>)
 80012ba:	f000 f975 	bl	80015a8 <DMA_Cmd>
    while (!I2C_CheckEvent(GUI_I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80012be:	490a      	ldr	r1, [pc, #40]	; (80012e8 <Bsp_I2C_Write_Bytes+0x50>)
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <Bsp_I2C_Write_Bytes+0x54>)
 80012c2:	f000 fc56 	bl	8001b72 <I2C_CheckEvent>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f4      	beq.n	80012b6 <Bsp_I2C_Write_Bytes+0x1e>
    //DMA_SetCurrDataCounter(DMA1_Channel6, 1024);
    DMA1_Channel6->CMAR = (uint32_t)dat;
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <Bsp_I2C_Write_Bytes+0x4c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60d3      	str	r3, [r2, #12]
    DMA_Cmd(DMA1_Channel6,ENABLE);
 80012d2:	2101      	movs	r1, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <Bsp_I2C_Write_Bytes+0x4c>)
 80012d6:	f000 f967 	bl	80015a8 <DMA_Cmd>
        
    //     I2C_Write_DATA(dat[i]);
    //     //Bsp_printf("\r\n %d \r\n",DMA_GetCurrDataCounter(DMA1_Channel6));
    // }
	//I2C_STOP();
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	4002006c 	.word	0x4002006c
 80012e8:	00070080 	.word	0x00070080
 80012ec:	40005400 	.word	0x40005400

080012f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	230f      	movs	r3, #15
 8001302:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d03a      	beq.n	8001382 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <NVIC_Init+0xbc>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f1c3 0304 	rsb	r3, r3, #4
 8001320:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	461a      	mov	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <NVIC_Init+0xc0>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	b2c9      	uxtb	r1, r1
 800135a:	4413      	add	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800136a:	4911      	ldr	r1, [pc, #68]	; (80013b0 <NVIC_Init+0xc0>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	0952      	lsrs	r2, r2, #5
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800137c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001380:	e00f      	b.n	80013a2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800138a:	4909      	ldr	r1, [pc, #36]	; (80013b0 <NVIC_Init+0xc0>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	0952      	lsrs	r2, r2, #5
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800139a:	f100 0320 	add.w	r3, r0, #32
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013a2:	bf00      	nop
 80013a4:	371c      	adds	r7, #28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80013c4:	4013      	ands	r3, r2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a43      	ldr	r2, [pc, #268]	; (80014f4 <DMA_DeInit+0x140>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <DMA_DeInit+0x144>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a42      	ldr	r2, [pc, #264]	; (80014f8 <DMA_DeInit+0x144>)
 80013f0:	f043 030f 	orr.w	r3, r3, #15
 80013f4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80013f6:	e077      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <DMA_DeInit+0x148>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d106      	bne.n	800140e <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <DMA_DeInit+0x144>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a3c      	ldr	r2, [pc, #240]	; (80014f8 <DMA_DeInit+0x144>)
 8001406:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800140a:	6053      	str	r3, [r2, #4]
}
 800140c:	e06c      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <DMA_DeInit+0x14c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d106      	bne.n	8001424 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <DMA_DeInit+0x144>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a37      	ldr	r2, [pc, #220]	; (80014f8 <DMA_DeInit+0x144>)
 800141c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001420:	6053      	str	r3, [r2, #4]
}
 8001422:	e061      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a37      	ldr	r2, [pc, #220]	; (8001504 <DMA_DeInit+0x150>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d106      	bne.n	800143a <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <DMA_DeInit+0x144>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <DMA_DeInit+0x144>)
 8001432:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001436:	6053      	str	r3, [r2, #4]
}
 8001438:	e056      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <DMA_DeInit+0x154>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d106      	bne.n	8001450 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <DMA_DeInit+0x144>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a2c      	ldr	r2, [pc, #176]	; (80014f8 <DMA_DeInit+0x144>)
 8001448:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800144c:	6053      	str	r3, [r2, #4]
}
 800144e:	e04b      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a2e      	ldr	r2, [pc, #184]	; (800150c <DMA_DeInit+0x158>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <DMA_DeInit+0x144>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <DMA_DeInit+0x144>)
 800145e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001462:	6053      	str	r3, [r2, #4]
}
 8001464:	e040      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <DMA_DeInit+0x15c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d106      	bne.n	800147c <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <DMA_DeInit+0x144>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <DMA_DeInit+0x144>)
 8001474:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001478:	6053      	str	r3, [r2, #4]
}
 800147a:	e035      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <DMA_DeInit+0x160>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d106      	bne.n	8001492 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <DMA_DeInit+0x164>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <DMA_DeInit+0x164>)
 800148a:	f043 030f 	orr.w	r3, r3, #15
 800148e:	6053      	str	r3, [r2, #4]
}
 8001490:	e02a      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <DMA_DeInit+0x168>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d106      	bne.n	80014a8 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <DMA_DeInit+0x164>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <DMA_DeInit+0x164>)
 80014a0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80014a4:	6053      	str	r3, [r2, #4]
}
 80014a6:	e01f      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <DMA_DeInit+0x16c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d106      	bne.n	80014be <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <DMA_DeInit+0x164>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a18      	ldr	r2, [pc, #96]	; (8001518 <DMA_DeInit+0x164>)
 80014b6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80014ba:	6053      	str	r3, [r2, #4]
}
 80014bc:	e014      	b.n	80014e8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a18      	ldr	r2, [pc, #96]	; (8001524 <DMA_DeInit+0x170>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d106      	bne.n	80014d4 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <DMA_DeInit+0x164>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <DMA_DeInit+0x164>)
 80014cc:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80014d0:	6053      	str	r3, [r2, #4]
}
 80014d2:	e009      	b.n	80014e8 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <DMA_DeInit+0x174>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d105      	bne.n	80014e8 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <DMA_DeInit+0x164>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <DMA_DeInit+0x164>)
 80014e2:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80014e6:	6053      	str	r3, [r2, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40020008 	.word	0x40020008
 80014f8:	40020000 	.word	0x40020000
 80014fc:	4002001c 	.word	0x4002001c
 8001500:	40020030 	.word	0x40020030
 8001504:	40020044 	.word	0x40020044
 8001508:	40020058 	.word	0x40020058
 800150c:	4002006c 	.word	0x4002006c
 8001510:	40020080 	.word	0x40020080
 8001514:	40020408 	.word	0x40020408
 8001518:	40020400 	.word	0x40020400
 800151c:	4002041c 	.word	0x4002041c
 8001520:	40020430 	.word	0x40020430
 8001524:	40020444 	.word	0x40020444
 8001528:	40020458 	.word	0x40020458

0800152c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800155a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001566:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001572:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60da      	str	r2, [r3, #12]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 80015c6:	e006      	b.n	80015d6 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001600:	e006      	b.n	8001610 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
	...

0800161c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <DMA_GetFlagStatus+0x48>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	e002      	b.n	8001644 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <DMA_GetFlagStatus+0x4c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e001      	b.n	8001658 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40020400 	.word	0x40020400
 8001668:	40020000 	.word	0x40020000

0800166c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <DMA_ClearFlag+0x2c>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8001684:	e002      	b.n	800168c <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <DMA_ClearFlag+0x30>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6053      	str	r3, [r2, #4]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40020400 	.word	0x40020400
 800169c:	40020000 	.word	0x40020000

080016a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	78db      	ldrb	r3, [r3, #3]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	461a      	mov	r2, r3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	e038      	b.n	800176c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80016fa:	2201      	movs	r2, #1
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d126      	bne.n	8001766 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800171e:	220f      	movs	r2, #15
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	43db      	mvns	r3, r3
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4013      	ands	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	78db      	ldrb	r3, [r3, #3]
 8001744:	2b28      	cmp	r3, #40	; 0x28
 8001746:	d105      	bne.n	8001754 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001748:	2201      	movs	r2, #1
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	409a      	lsls	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	e008      	b.n	8001766 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	78db      	ldrb	r3, [r3, #3]
 8001758:	2b48      	cmp	r3, #72	; 0x48
 800175a:	d104      	bne.n	8001766 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800175c:	2201      	movs	r2, #1
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	3301      	adds	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d9c3      	bls.n	80016fa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2bff      	cmp	r3, #255	; 0xff
 800177e:	d946      	bls.n	800180e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	e03a      	b.n	8001802 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3308      	adds	r3, #8
 8001790:	2201      	movs	r2, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d127      	bne.n	80017fc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80017b2:	220f      	movs	r2, #15
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	43db      	mvns	r3, r3
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4013      	ands	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	2b28      	cmp	r3, #40	; 0x28
 80017da:	d105      	bne.n	80017e8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	3308      	adds	r3, #8
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	2b48      	cmp	r3, #72	; 0x48
 80017ee:	d105      	bne.n	80017fc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	3308      	adds	r3, #8
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	3301      	adds	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b07      	cmp	r3, #7
 8001806:	d9c1      	bls.n	800178c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	605a      	str	r2, [r3, #4]
  }
}
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <I2C_DeInit+0x44>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d10a      	bne.n	800183e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001828:	2101      	movs	r1, #1
 800182a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800182e:	f000 fb11 	bl	8001e54 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8001832:	2100      	movs	r1, #0
 8001834:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001838:	f000 fb0c 	bl	8001e54 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 800183c:	e009      	b.n	8001852 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800183e:	2101      	movs	r1, #1
 8001840:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001844:	f000 fb06 	bl	8001e54 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001848:	2100      	movs	r1, #0
 800184a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800184e:	f000 fb01 	bl	8001e54 <RCC_APB1PeriphResetCmd>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40005400 	.word	0x40005400

08001860 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800186e:	2300      	movs	r3, #0
 8001870:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001872:	2304      	movs	r3, #4
 8001874:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001876:	4b57      	ldr	r3, [pc, #348]	; (80019d4 <I2C_Init+0x174>)
 8001878:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8001880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001882:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001886:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f9d1 	bl	8001c34 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <I2C_Init+0x178>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80018a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018a6:	4313      	orrs	r3, r2
 80018a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018ae:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <I2C_Init+0x17c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d815      	bhi.n	80018fa <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80018dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d801      	bhi.n	80018e6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80018e2:	2304      	movs	r3, #4
 80018e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80018e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ea:	4313      	orrs	r3, r2
 80018ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80018ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018f0:	3301      	adds	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	841a      	strh	r2, [r3, #32]
 80018f8:	e040      	b.n	800197c <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	88db      	ldrh	r3, [r3, #6]
 80018fe:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001902:	4293      	cmp	r3, r2
 8001904:	d109      	bne.n	800191a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001918:	e00e      	b.n	8001938 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8001938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 800194a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800194c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800194e:	4313      	orrs	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800195a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800195c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800195e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <I2C_Init+0x180>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	1192      	asrs	r2, r2, #6
 800196e:	17db      	asrs	r3, r3, #31
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001980:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800199a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800199e:	f023 0302 	bic.w	r3, r3, #2
 80019a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	889a      	ldrh	r2, [r3, #4]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	895b      	ldrh	r3, [r3, #10]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019b2:	4313      	orrs	r3, r2
 80019b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019ba:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	899a      	ldrh	r2, [r3, #12]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	891b      	ldrh	r3, [r3, #8]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	811a      	strh	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	000186a0 	.word	0x000186a0
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8001a06:	e007      	b.n	8001a18 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	801a      	strh	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	889b      	ldrh	r3, [r3, #4]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
  }
}
 8001a44:	e007      	b.n	8001a56 <I2C_DMACmd+0x34>
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	889b      	ldrh	r3, [r3, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	809a      	strh	r2, [r3, #4]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8001a82:	e007      	b.n	8001a94 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	801a      	strh	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8001ac0:	e007      	b.n	8001ad2 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	801a      	strh	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8001afe:	e007      	b.n	8001b10 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	801a      	strh	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	821a      	strh	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
 8001b44:	4613      	mov	r3, r2
 8001b46:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001b48:	78bb      	ldrb	r3, [r7, #2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	e003      	b.n	8001b60 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	821a      	strh	r2, [r3, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b087      	sub	sp, #28
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8a9b      	ldrh	r3, [r3, #20]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8b1b      	ldrh	r3, [r3, #24]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bac:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d102      	bne.n	8001bc0 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	e001      	b.n	8001bc4 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	0f1b      	lsrs	r3, r3, #28
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bf6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3314      	adds	r3, #20
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e005      	b.n	8001c12 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3318      	adds	r3, #24
 8001c10:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
 8001c22:	e001      	b.n	8001c28 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d011      	beq.n	8001c80 <RCC_GetClocksFreq+0x4c>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d83a      	bhi.n	8001cd8 <RCC_GetClocksFreq+0xa4>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <RCC_GetClocksFreq+0x3c>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d004      	beq.n	8001c78 <RCC_GetClocksFreq+0x44>
 8001c6e:	e033      	b.n	8001cd8 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a47      	ldr	r2, [pc, #284]	; (8001d90 <RCC_GetClocksFreq+0x15c>)
 8001c74:	601a      	str	r2, [r3, #0]
      break;
 8001c76:	e033      	b.n	8001ce0 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <RCC_GetClocksFreq+0x15c>)
 8001c7c:	601a      	str	r2, [r3, #0]
      break;
 8001c7e:	e02f      	b.n	8001ce0 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001c80:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c88:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	0c9b      	lsrs	r3, r3, #18
 8001c98:	3302      	adds	r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <RCC_GetClocksFreq+0x160>)
 8001ca6:	fb03 f202 	mul.w	r2, r3, r2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001cae:	e017      	b.n	8001ce0 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4a35      	ldr	r2, [pc, #212]	; (8001d94 <RCC_GetClocksFreq+0x160>)
 8001cc0:	fb03 f202 	mul.w	r2, r3, r2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
      break;
 8001cc8:	e00a      	b.n	8001ce0 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <RCC_GetClocksFreq+0x15c>)
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]
      break;
 8001cd6:	e003      	b.n	8001ce0 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <RCC_GetClocksFreq+0x15c>)
 8001cdc:	601a      	str	r2, [r3, #0]
      break;
 8001cde:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <RCC_GetClocksFreq+0x164>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d10:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <RCC_GetClocksFreq+0x164>)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	40da      	lsrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d38:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	0adb      	lsrs	r3, r3, #11
 8001d3e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <RCC_GetClocksFreq+0x164>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <RCC_GetClocksFreq+0x158>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d60:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	0b9b      	lsrs	r3, r3, #14
 8001d66:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <RCC_GetClocksFreq+0x168>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	007a1200 	.word	0x007a1200
 8001d94:	003d0900 	.word	0x003d0900
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000010 	.word	0x20000010

08001da0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <RCC_AHBPeriphClockCmd+0x38>)
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <RCC_AHBPeriphClockCmd+0x38>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001dbe:	e006      	b.n	8001dce <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <RCC_AHBPeriphClockCmd+0x38>)
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4903      	ldr	r1, [pc, #12]	; (8001dd8 <RCC_AHBPeriphClockCmd+0x38>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	614b      	str	r3, [r1, #20]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000

08001ddc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <RCC_APB2PeriphClockCmd+0x38>)
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <RCC_APB2PeriphClockCmd+0x38>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001dfa:	e006      	b.n	8001e0a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <RCC_APB2PeriphClockCmd+0x38>)
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <RCC_APB2PeriphClockCmd+0x38>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	618b      	str	r3, [r1, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000

08001e18 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <RCC_APB1PeriphClockCmd+0x38>)
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <RCC_APB1PeriphClockCmd+0x38>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e36:	e006      	b.n	8001e46 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <RCC_APB1PeriphClockCmd+0x38>)
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <RCC_APB1PeriphClockCmd+0x38>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	61cb      	str	r3, [r1, #28]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000

08001e54 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <RCC_APB1PeriphResetCmd+0x38>)
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <RCC_APB1PeriphResetCmd+0x38>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001e72:	e006      	b.n	8001e82 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <RCC_APB1PeriphResetCmd+0x38>)
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4903      	ldr	r1, [pc, #12]	; (8001e8c <RCC_APB1PeriphResetCmd+0x38>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	610b      	str	r3, [r1, #16]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000

08001e90 <__libc_init_array>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	2600      	movs	r6, #0
 8001e94:	4d0c      	ldr	r5, [pc, #48]	; (8001ec8 <__libc_init_array+0x38>)
 8001e96:	4c0d      	ldr	r4, [pc, #52]	; (8001ecc <__libc_init_array+0x3c>)
 8001e98:	1b64      	subs	r4, r4, r5
 8001e9a:	10a4      	asrs	r4, r4, #2
 8001e9c:	42a6      	cmp	r6, r4
 8001e9e:	d109      	bne.n	8001eb4 <__libc_init_array+0x24>
 8001ea0:	f000 f81a 	bl	8001ed8 <_init>
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	4d0a      	ldr	r5, [pc, #40]	; (8001ed0 <__libc_init_array+0x40>)
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <__libc_init_array+0x44>)
 8001eaa:	1b64      	subs	r4, r4, r5
 8001eac:	10a4      	asrs	r4, r4, #2
 8001eae:	42a6      	cmp	r6, r4
 8001eb0:	d105      	bne.n	8001ebe <__libc_init_array+0x2e>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb8:	4798      	blx	r3
 8001eba:	3601      	adds	r6, #1
 8001ebc:	e7ee      	b.n	8001e9c <__libc_init_array+0xc>
 8001ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec2:	4798      	blx	r3
 8001ec4:	3601      	adds	r6, #1
 8001ec6:	e7f2      	b.n	8001eae <__libc_init_array+0x1e>
 8001ec8:	08001f34 	.word	0x08001f34
 8001ecc:	08001f34 	.word	0x08001f34
 8001ed0:	08001f34 	.word	0x08001f34
 8001ed4:	08001f38 	.word	0x08001f38

08001ed8 <_init>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	bf00      	nop
 8001edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ede:	bc08      	pop	{r3}
 8001ee0:	469e      	mov	lr, r3
 8001ee2:	4770      	bx	lr

08001ee4 <_fini>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	bf00      	nop
 8001ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eea:	bc08      	pop	{r3}
 8001eec:	469e      	mov	lr, r3
 8001eee:	4770      	bx	lr
