
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b10 	.word	0x08001b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08001b10 	.word	0x08001b10

0800014c <main>:
u8 addr = 0x000000;
u8 addr1[3] = {0x00,0x00,0x00};
u8 data[4] = {0x01,0x02,0x03,0x04};
u8 Rxdata[4] ={0x08,0x07,0x06,0x05};
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
  	Bsp_Init();
 8000150:	f000 fc2c 	bl	80009ac <Bsp_Init>
 	//GUI_SPI_Init(); //初始化测试下来要4s钟有点长

	
	FLASH_Write_Data(addr,data,4);
 8000154:	4b14      	ldr	r3, [pc, #80]	; (80001a8 <main+0x5c>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2204      	movs	r2, #4
 800015a:	4914      	ldr	r1, [pc, #80]	; (80001ac <main+0x60>)
 800015c:	4618      	mov	r0, r3
 800015e:	f000 fa39 	bl	80005d4 <FLASH_Write_Data>
		
	FLASH_Read_Data(addr1,Rxdata,4);
 8000162:	2204      	movs	r2, #4
 8000164:	4912      	ldr	r1, [pc, #72]	; (80001b0 <main+0x64>)
 8000166:	4813      	ldr	r0, [pc, #76]	; (80001b4 <main+0x68>)
 8000168:	f000 f9b6 	bl	80004d8 <FLASH_Read_Data>
	Bsp_printf("zheshi %d ",Rxdata[0]);
 800016c:	4b10      	ldr	r3, [pc, #64]	; (80001b0 <main+0x64>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	4619      	mov	r1, r3
 8000172:	4811      	ldr	r0, [pc, #68]	; (80001b8 <main+0x6c>)
 8000174:	f000 fba0 	bl	80008b8 <Bsp_printf>
	Bsp_printf("%d",Rxdata[1]);
 8000178:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <main+0x64>)
 800017a:	785b      	ldrb	r3, [r3, #1]
 800017c:	4619      	mov	r1, r3
 800017e:	480f      	ldr	r0, [pc, #60]	; (80001bc <main+0x70>)
 8000180:	f000 fb9a 	bl	80008b8 <Bsp_printf>
	Bsp_printf("%d ",Rxdata[2]);
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <main+0x64>)
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	4619      	mov	r1, r3
 800018a:	480d      	ldr	r0, [pc, #52]	; (80001c0 <main+0x74>)
 800018c:	f000 fb94 	bl	80008b8 <Bsp_printf>
	Bsp_printf("%d",Rxdata[3]);
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <main+0x64>)
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	4619      	mov	r1, r3
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <main+0x70>)
 8000198:	f000 fb8e 	bl	80008b8 <Bsp_printf>
	//GUI_Test();
	while (1)
	{	

		//GUI_CLEAR_SCREEN();
		Key_Process();
 800019c:	f000 f8b6 	bl	800030c <Key_Process>
		System_Poll();
 80001a0:	f000 f95a 	bl	8000458 <System_Poll>
		Key_Process();
 80001a4:	e7fa      	b.n	800019c <main+0x50>
 80001a6:	bf00      	nop
 80001a8:	20000088 	.word	0x20000088
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000004 	.word	0x20000004
 80001b4:	2000008c 	.word	0x2000008c
 80001b8:	08001b28 	.word	0x08001b28
 80001bc:	08001b34 	.word	0x08001b34
 80001c0:	08001b38 	.word	0x08001b38

080001c4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <HardFault_Handler+0x4>

080001d6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001da:	e7fe      	b.n	80001da <MemManage_Handler+0x4>

080001dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <BusFault_Handler+0x4>

080001e2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <UsageFault_Handler+0x4>

080001e8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <Key_Trig_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Trig_Handler(void){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <Key_Mainpage_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Mainpage_Process(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

    uint8_t Page_Index = System_Page_Status_Read();
 800022a:	f000 f8fb 	bl	8000424 <System_Page_Status_Read>
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]

    if (KEY_IS_UP_RELEASE())
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <Key_Mainpage_Process+0x78>)
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d008      	beq.n	8000250 <Key_Mainpage_Process+0x2c>
    {
        if (Page_Index < SYSTEM_MAIN_PAGE_CONFIG_READY )
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b03      	cmp	r3, #3
 8000242:	d803      	bhi.n	800024c <Key_Mainpage_Process+0x28>
        {
            Page_Index += 2;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	3302      	adds	r3, #2
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	e001      	b.n	8000250 <Key_Mainpage_Process+0x2c>
        }else
        {
            Page_Index = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (KEY_IS_DOWN_RELEASE())
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <Key_Mainpage_Process+0x78>)
 8000252:	78db      	ldrb	r3, [r3, #3]
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d008      	beq.n	800026e <Key_Mainpage_Process+0x4a>
    {
        if (Page_Index > SYSTEM_MAIN_PAGE_START_TRAIN_READY )
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d003      	beq.n	800026a <Key_Mainpage_Process+0x46>
        {
            Page_Index -= 2;
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	3b02      	subs	r3, #2
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	e001      	b.n	800026e <Key_Mainpage_Process+0x4a>
        }else
        {
            Page_Index = SYSTEM_MAIN_PAGE_CONFIG_READY;
 800026a:	2304      	movs	r3, #4
 800026c:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (KEY_IS_SET_PRESS())
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <Key_Mainpage_Process+0x78>)
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	2b00      	cmp	r3, #0
 8000278:	d008      	beq.n	800028c <Key_Mainpage_Process+0x68>
    {
        if (Page_Index % 2 == 0)    //选中图标 处于ready状态
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d102      	bne.n	800028c <Key_Mainpage_Process+0x68>
        {
            Page_Index += 1;        //系统轮询检测到为奇数 自动跳转
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	3301      	adds	r3, #1
 800028a:	71fb      	strb	r3, [r7, #7]
        }
    }

    System_Page_Status_Write(Page_Index);
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f8d2 	bl	8000438 <System_Page_Status_Write>
    
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000094 	.word	0x20000094

080002a0 <Key_MenuSelect_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_MenuSelect_Process(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
        
        
    }
    
    
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <Key_MenuEdit_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_MenuEdit_Process(void){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
            /* 进入选中的菜单内容（根据索引来加载菜单内容 菜单是一个数组） */
        }
        
    }
    
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <Key_ConfigPage_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_ConfigPage_Process(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <Key_release_Handler>:

void Key_release_Handler(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

    switch (SystemCtrl.status)
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <Key_release_Handler+0x44>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	d817      	bhi.n	8000300 <Key_release_Handler+0x3c>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <Key_release_Handler+0x14>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	080002ef 	.word	0x080002ef
 80002e0:	080002f5 	.word	0x080002f5
 80002e4:	080002fb 	.word	0x080002fb
    {
        case SYSTEM_MAIN_PAGE: Key_Mainpage_Process(); break;
 80002e8:	f7ff ff9c 	bl	8000224 <Key_Mainpage_Process>
 80002ec:	e009      	b.n	8000302 <Key_release_Handler+0x3e>
        case SYSTEM_TARIN_MENU_SELECET_PAGE: Key_MenuSelect_Process(); break;
 80002ee:	f7ff ffd7 	bl	80002a0 <Key_MenuSelect_Process>
 80002f2:	e006      	b.n	8000302 <Key_release_Handler+0x3e>
        case SYSTEM_EDIT_MENU_PAGE : Key_MenuEdit_Process(); break;
 80002f4:	f7ff ffda 	bl	80002ac <Key_MenuEdit_Process>
 80002f8:	e003      	b.n	8000302 <Key_release_Handler+0x3e>
        case SYSTEM_CONFIG_PAGE: Key_ConfigPage_Process(); break;
 80002fa:	f7ff ffdd 	bl	80002b8 <Key_ConfigPage_Process>
 80002fe:	e000      	b.n	8000302 <Key_release_Handler+0x3e>
        default:
            break;
 8000300:	bf00      	nop
    }
    
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000098 	.word	0x20000098

0800030c <Key_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Process(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
    u8 i = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	71fb      	strb	r3, [r7, #7]
    u8 key_mask = 1;
 8000316:	2301      	movs	r3, #1
 8000318:	71bb      	strb	r3, [r7, #6]
    
    for ( i = 0; i < KEYS_NUM; i++)
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
 800031e:	e040      	b.n	80003a2 <Key_Process+0x96>
    {
        /***              去抖           ***/
        if(Bsp_KEY_Probe(i))
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc30 	bl	8000b88 <Bsp_KEY_Probe>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d017      	beq.n	800035e <Key_Process+0x52>
        {
            if (Key[i].Tmr1ms <= KEY_DEBOUNCE_TIME)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4a3a      	ldr	r2, [pc, #232]	; (800041c <Key_Process+0x110>)
 8000332:	5cd3      	ldrb	r3, [r2, r3]
 8000334:	2b14      	cmp	r3, #20
 8000336:	d82e      	bhi.n	8000396 <Key_Process+0x8a>
            {
                if ( ++Key[i].Tmr1ms > KEY_DEBOUNCE_TIME)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4a38      	ldr	r2, [pc, #224]	; (800041c <Key_Process+0x110>)
 800033c:	5cd2      	ldrb	r2, [r2, r3]
 800033e:	3201      	adds	r2, #1
 8000340:	b2d1      	uxtb	r1, r2
 8000342:	4a36      	ldr	r2, [pc, #216]	; (800041c <Key_Process+0x110>)
 8000344:	54d1      	strb	r1, [r2, r3]
 8000346:	4a35      	ldr	r2, [pc, #212]	; (800041c <Key_Process+0x110>)
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	2b14      	cmp	r3, #20
 800034c:	d923      	bls.n	8000396 <Key_Process+0x8a>
                {
                    KeyCtrl.cache |= key_mask ;
 800034e:	4b34      	ldr	r3, [pc, #208]	; (8000420 <Key_Process+0x114>)
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	4313      	orrs	r3, r2
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <Key_Process+0x114>)
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	e01b      	b.n	8000396 <Key_Process+0x8a>
                }
            }
        }else{
            if (Key[i].Tmr1ms)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	4a2e      	ldr	r2, [pc, #184]	; (800041c <Key_Process+0x110>)
 8000362:	5cd3      	ldrb	r3, [r2, r3]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d016      	beq.n	8000396 <Key_Process+0x8a>
            {
                if (--Key[i].Tmr1ms == 0)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a2c      	ldr	r2, [pc, #176]	; (800041c <Key_Process+0x110>)
 800036c:	5cd2      	ldrb	r2, [r2, r3]
 800036e:	3a01      	subs	r2, #1
 8000370:	b2d1      	uxtb	r1, r2
 8000372:	4a2a      	ldr	r2, [pc, #168]	; (800041c <Key_Process+0x110>)
 8000374:	54d1      	strb	r1, [r2, r3]
 8000376:	4a29      	ldr	r2, [pc, #164]	; (800041c <Key_Process+0x110>)
 8000378:	5cd3      	ldrb	r3, [r2, r3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10b      	bne.n	8000396 <Key_Process+0x8a>
                {
                    KeyCtrl.cache &= ~key_mask ;
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <Key_Process+0x114>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b25a      	sxtb	r2, r3
 8000384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000388:	43db      	mvns	r3, r3
 800038a:	b25b      	sxtb	r3, r3
 800038c:	4013      	ands	r3, r2
 800038e:	b25b      	sxtb	r3, r3
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <Key_Process+0x114>)
 8000394:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        key_mask <<= 1;
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	71bb      	strb	r3, [r7, #6]
    for ( i = 0; i < KEYS_NUM; i++)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	3301      	adds	r3, #1
 80003a0:	71fb      	strb	r3, [r7, #7]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d9bb      	bls.n	8000320 <Key_Process+0x14>
    }

    if (KeyCtrl.cache != KeyCtrl.value)
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <Key_Process+0x114>)
 80003aa:	781a      	ldrb	r2, [r3, #0]
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <Key_Process+0x114>)
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d01d      	beq.n	80003f0 <Key_Process+0xe4>
    {
        KeyCtrl.trg = KeyCtrl.cache & (~KeyCtrl.value);      //存储被按下的按键
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <Key_Process+0x114>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b25a      	sxtb	r2, r3
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <Key_Process+0x114>)
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	4013      	ands	r3, r2
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <Key_Process+0x114>)
 80003cc:	709a      	strb	r2, [r3, #2]
        KeyCtrl.release = (~KeyCtrl.cache) & KeyCtrl.value;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <Key_Process+0x114>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	b25a      	sxtb	r2, r3
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <Key_Process+0x114>)
 80003da:	785b      	ldrb	r3, [r3, #1]
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	4013      	ands	r3, r2
 80003e0:	b25b      	sxtb	r3, r3
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <Key_Process+0x114>)
 80003e6:	70da      	strb	r2, [r3, #3]
        KeyCtrl.value = KeyCtrl.cache;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <Key_Process+0x114>)
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <Key_Process+0x114>)
 80003ee:	705a      	strb	r2, [r3, #1]
    }
    
    if (KeyCtrl.trg)
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <Key_Process+0x114>)
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <Key_Process+0xf6>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(1,6,"C",0);break;
        //     case 0x01: GUI_CLEAR_SCREEN();break;
        //     default:
        //     break;
        // }
        Key_Trig_Handler();
 80003f8:	f7ff ff0e 	bl	8000218 <Key_Trig_Handler>
        KeyCtrl.trg = 0;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <Key_Process+0x114>)
 80003fe:	2200      	movs	r2, #0
 8000400:	709a      	strb	r2, [r3, #2]
    }

    if (KeyCtrl.release)
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <Key_Process+0x114>)
 8000404:	78db      	ldrb	r3, [r3, #3]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d004      	beq.n	8000414 <Key_Process+0x108>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(5,4,"G",0);break;
        //     case 0x01: GUI_SPI_Display_Char_ASCII(5,5,"H",0);break;
        //     default:
        //     break;
        // }
        Key_release_Handler();
 800040a:	f7ff ff5b 	bl	80002c4 <Key_release_Handler>
        KeyCtrl.release = 0;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <Key_Process+0x114>)
 8000410:	2200      	movs	r2, #0
 8000412:	70da      	strb	r2, [r3, #3]
    }
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000090 	.word	0x20000090
 8000420:	20000094 	.word	0x20000094

08000424 <System_Page_Status_Read>:
*参    数:'' 
*返 回 值:'' 
*说    明: '返回当前所处页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t System_Page_Status_Read(void){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

    return (uint8_t)SystemCtrl.page_index;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <System_Page_Status_Read+0x10>)
 800042a:	785b      	ldrb	r3, [r3, #1]
    
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000098 	.word	0x20000098

08000438 <System_Page_Status_Write>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Page_Status_Write(uint8_t page_index){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]

    SystemCtrl.page_index = page_index ;
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <System_Page_Status_Write+0x1c>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	7053      	strb	r3, [r2, #1]

}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	20000098 	.word	0x20000098

08000458 <System_Poll>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Poll(void){
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

    switch (SystemCtrl.status)
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <System_Poll+0x54>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d81b      	bhi.n	800049c <System_Poll+0x44>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <System_Poll+0x14>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	0800047d 	.word	0x0800047d
 8000470:	0800049d 	.word	0x0800049d
 8000474:	0800049d 	.word	0x0800049d
 8000478:	0800049d 	.word	0x0800049d
    {
        case SYSTEM_MAIN_PAGE:
            if (SystemCtrl.page_index % 2 == 1){
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <System_Poll+0x54>)
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d00a      	beq.n	80004a0 <System_Poll+0x48>
                SystemCtrl.status = SystemCtrl.page_index / 2 +1;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <System_Poll+0x54>)
 800048c:	785b      	ldrb	r3, [r3, #1]
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3301      	adds	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <System_Poll+0x54>)
 8000498:	701a      	strb	r2, [r3, #0]
                
            };
            break;
 800049a:	e001      	b.n	80004a0 <System_Poll+0x48>
            break;
        case SYSTEM_CONFIG_PAGE:
            
            break;
        default:
            break;
 800049c:	bf00      	nop
 800049e:	e000      	b.n	80004a2 <System_Poll+0x4a>
            break;
 80004a0:	bf00      	nop
    }
    


 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000098 	.word	0x20000098

080004b0 <FLASH_Write_Enable>:
	*DID |= Bsp_Flash_SPI_TransmitReceive(0xff);
	FLASH_DISELECTED();
}

void FLASH_Write_Enable()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    FLASH_SELECTED();
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <FLASH_Write_Enable+0x24>)
 80004ba:	f000 fd24 	bl	8000f06 <GPIO_ResetBits>
    Bsp_Flash_SPI_TransmitReceive(0x06);
 80004be:	2006      	movs	r0, #6
 80004c0:	f000 face 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    FLASH_DISELECTED();  
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <FLASH_Write_Enable+0x24>)
 80004ca:	f000 fd0e 	bl	8000eea <GPIO_SetBits>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <FLASH_Read_Data>:
            F个page组成一个sector，
            Length:要读取的字节个数 (u8 最多255个数据)
*作    者: Danny
*----------------------------------------------------------------------------------------*/
void FLASH_Read_Data(u8 *addr, u8 *Rxdata, u8 Length)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4613      	mov	r3, r2
 80004e4:	71fb      	strb	r3, [r7, #7]
    FLASH_SELECTED();
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	4818      	ldr	r0, [pc, #96]	; (800054c <FLASH_Read_Data+0x74>)
 80004ec:	f000 fd0b 	bl	8000f06 <GPIO_ResetBits>
    Bsp_Flash_SPI_TransmitReceive(0x03);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 fab5 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>

    for (u8 i = 0; i < 3; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
 80004fa:	e009      	b.n	8000510 <FLASH_Read_Data+0x38>
    {
        Bsp_Flash_SPI_TransmitReceive(addr[i]);
 80004fc:	7dfb      	ldrb	r3, [r7, #23]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f000 faab 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    for (u8 i = 0; i < 3; i++)
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	3301      	adds	r3, #1
 800050e:	75fb      	strb	r3, [r7, #23]
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d9f2      	bls.n	80004fc <FLASH_Read_Data+0x24>
    }
    

    for (u8 i = 0; i < Length; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	75bb      	strb	r3, [r7, #22]
 800051a:	e00a      	b.n	8000532 <FLASH_Read_Data+0x5a>
    {
        Rxdata[i] = Bsp_Flash_SPI_TransmitReceive(0xfc); // 传输一个无效字符来接收有效的数据
 800051c:	7dbb      	ldrb	r3, [r7, #22]
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	18d4      	adds	r4, r2, r3
 8000522:	20fc      	movs	r0, #252	; 0xfc
 8000524:	f000 fa9c 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
 8000528:	4603      	mov	r3, r0
 800052a:	7023      	strb	r3, [r4, #0]
    for (u8 i = 0; i < Length; i++)
 800052c:	7dbb      	ldrb	r3, [r7, #22]
 800052e:	3301      	adds	r3, #1
 8000530:	75bb      	strb	r3, [r7, #22]
 8000532:	7dba      	ldrb	r2, [r7, #22]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	429a      	cmp	r2, r3
 8000538:	d3f0      	bcc.n	800051c <FLASH_Read_Data+0x44>
    }
    FLASH_DISELECTED();  
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <FLASH_Read_Data+0x74>)
 8000540:	f000 fcd3 	bl	8000eea <GPIO_SetBits>
}
 8000544:	bf00      	nop
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40010c00 	.word	0x40010c00

08000550 <Flash_Read_Status>:
 *返 回 值:''
 *说    明: ''
 *作    者: Danny
 *----------------------------------------------------------------------------------------*/
void Flash_Read_Status(u8 Stat_reg_f)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

    u8 stat_ins;
    switch (Stat_reg_f)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d00c      	beq.n	800057a <Flash_Read_Status+0x2a>
 8000560:	2b03      	cmp	r3, #3
 8000562:	dc0d      	bgt.n	8000580 <Flash_Read_Status+0x30>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d002      	beq.n	800056e <Flash_Read_Status+0x1e>
 8000568:	2b02      	cmp	r3, #2
 800056a:	d003      	beq.n	8000574 <Flash_Read_Status+0x24>
        break;
    case 3:
        stat_ins = 0x15;
        break;
    default:
        break;
 800056c:	e008      	b.n	8000580 <Flash_Read_Status+0x30>
        stat_ins = 0x05;
 800056e:	2305      	movs	r3, #5
 8000570:	73fb      	strb	r3, [r7, #15]
        break;
 8000572:	e006      	b.n	8000582 <Flash_Read_Status+0x32>
        stat_ins = 0x35;
 8000574:	2335      	movs	r3, #53	; 0x35
 8000576:	73fb      	strb	r3, [r7, #15]
        break;
 8000578:	e003      	b.n	8000582 <Flash_Read_Status+0x32>
        stat_ins = 0x15;
 800057a:	2315      	movs	r3, #21
 800057c:	73fb      	strb	r3, [r7, #15]
        break;
 800057e:	e000      	b.n	8000582 <Flash_Read_Status+0x32>
        break;
 8000580:	bf00      	nop
    }
    FLASH_SELECTED();
 8000582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <Flash_Read_Status+0x80>)
 8000588:	f000 fcbd 	bl	8000f06 <GPIO_ResetBits>
    Bsp_Flash_SPI_TransmitReceive(stat_ins);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fa66 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    u32 Timeout = 1000;
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	60bb      	str	r3, [r7, #8]
    while ( (Bsp_Flash_SPI_TransmitReceive(0xFF) & FLASH_BUSY_MASK) == FLASH_BUSY_MASK){
 800059a:	e005      	b.n	80005a8 <Flash_Read_Status+0x58>
        Timeout --;
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3b01      	subs	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
		if (Timeout == 0)
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d008      	beq.n	80005ba <Flash_Read_Status+0x6a>
    while ( (Bsp_Flash_SPI_TransmitReceive(0xFF) & FLASH_BUSY_MASK) == FLASH_BUSY_MASK){
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	f000 fa59 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d0f1      	beq.n	800059c <Flash_Read_Status+0x4c>
 80005b8:	e000      	b.n	80005bc <Flash_Read_Status+0x6c>
		{
			break;
 80005ba:	bf00      	nop
		}
    };
    FLASH_DISELECTED();  
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Flash_Read_Status+0x80>)
 80005c2:	f000 fc92 	bl	8000eea <GPIO_SetBits>
    //return Bsp_Flash_SPI_TransmitReceive(0xFF);
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <FLASH_Write_Data>:
*说    明: '写之前必须使能，写完之后自动写失能，写之前要先检查busy位，如果要写一个已经写入的数据要先清理所有的数据'
            一次最多写1Page（256字节）
*作    者: Danny
*----------------------------------------------------------------------------------------*/
void FLASH_Write_Data(u8 addr, u8 *Data, u8 Length)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
    // 检查busy位
    
    FLASH_Write_Enable();
 80005e4:	f7ff ff64 	bl	80004b0 <FLASH_Write_Enable>
    FLASH_SELECTED();
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <FLASH_Write_Data+0x80>)
 80005ee:	f000 fc8a 	bl	8000f06 <GPIO_ResetBits>
    Bsp_Flash_SPI_TransmitReceive(0x02);
 80005f2:	2002      	movs	r0, #2
 80005f4:	f000 fa34 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    Bsp_Flash_SPI_TransmitReceive(addr>>16);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	141b      	asrs	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fa2e 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    Bsp_Flash_SPI_TransmitReceive(addr>>8);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	121b      	asrs	r3, r3, #8
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa28 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    Bsp_Flash_SPI_TransmitReceive(addr);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fa24 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    for (u8 i = 0; i < Length; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e009      	b.n	8000632 <FLASH_Write_Data+0x5e>
    {
        Bsp_Flash_SPI_TransmitReceive(Data[i]);
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fa1a 	bl	8000a60 <Bsp_Flash_SPI_TransmitReceive>
    for (u8 i = 0; i < Length; i++)
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	3301      	adds	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	7bfa      	ldrb	r2, [r7, #15]
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3f1      	bcc.n	800061e <FLASH_Write_Data+0x4a>
    }
    FLASH_DISELECTED();  
 800063a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <FLASH_Write_Data+0x80>)
 8000640:	f000 fc53 	bl	8000eea <GPIO_SetBits>
    Flash_Read_Status(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff ff83 	bl	8000550 <Flash_Read_Status>
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010c00 	.word	0x40010c00

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <SystemInit+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <SystemInit+0x5c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <SystemInit+0x5c>)
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SystemInit+0x5c>)
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <SystemInit+0x60>)
 8000670:	4013      	ands	r3, r2
 8000672:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <SystemInit+0x5c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <SystemInit+0x5c>)
 800067a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800067e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000682:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0x5c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SystemInit+0x5c>)
 800068a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SystemInit+0x5c>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SystemInit+0x5c>)
 8000696:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800069a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SystemInit+0x5c>)
 800069e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006a2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80006a4:	f000 f80c 	bl	80006c0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <SystemInit+0x64>)
 80006aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	f8ff0000 	.word	0xf8ff0000
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80006c4:	f000 f802 	bl	80006cc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <SetSysClockTo72+0xf8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a39      	ldr	r2, [pc, #228]	; (80007c4 <SetSysClockTo72+0xf8>)
 80006e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <SetSysClockTo72+0xf8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3301      	adds	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <SetSysClockTo72+0x38>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000702:	d1f0      	bne.n	80006e6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000710:	2301      	movs	r3, #1
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e001      	b.n	800071a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d14b      	bne.n	80007b8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SetSysClockTo72+0xfc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <SetSysClockTo72+0xfc>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SetSysClockTo72+0xfc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <SetSysClockTo72+0xfc>)
 8000732:	f023 0303 	bic.w	r3, r3, #3
 8000736:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <SetSysClockTo72+0xfc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <SetSysClockTo72+0xfc>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SetSysClockTo72+0xf8>)
 800074e:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <SetSysClockTo72+0xf8>)
 800075a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000766:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800076a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <SetSysClockTo72+0xf8>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000772:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000776:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <SetSysClockTo72+0xf8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <SetSysClockTo72+0xf8>)
 800077e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000782:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000784:	bf00      	nop
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <SetSysClockTo72+0xf8>)
 8000798:	f023 0303 	bic.w	r3, r3, #3
 800079c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <SetSysClockTo72+0xf8>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <SetSysClockTo72+0xf8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007aa:	bf00      	nop
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SetSysClockTo72+0xf8>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d1f9      	bne.n	80007ac <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40022000 	.word	0x40022000

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ff44 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e8:	4c09      	ldr	r4, [pc, #36]	; (8000810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f000 fd0f 	bl	8001218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fca7 	bl	800014c <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000808:	08001bdc 	.word	0x08001bdc
  ldr r2, =_sbss
 800080c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000810:	200000bc 	.word	0x200000bc

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <ITM_SendChar>:
 * The function outputs a character via the ITM channel 0. 
 * The function returns when no debugger is connected that has booked the output.  
 * It is blocking when a debugger is connected, but the previous character send is not transmitted. 
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <ITM_SendChar+0x58>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d01a      	beq.n	8000862 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800082c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000830:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000834:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8000838:	2b00      	cmp	r3, #0
 800083a:	d012      	beq.n	8000862 <ITM_SendChar+0x4a>
      (ITM->TER & (1ul << 0)        )                    )     /* ITM Port #0 enabled */
 800083c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000840:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000844:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00a      	beq.n	8000862 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 800084c:	bf00      	nop
 800084e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0fa      	beq.n	800084e <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8000858:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
  }  
  return (ch);
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000edf0 	.word	0xe000edf0

08000874 <Bsp_fputc>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
int Bsp_fputc(int Character)
{	
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(Character);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffca 	bl	8000818 <ITM_SendChar>
	return Character;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <Bsp_fputs>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_fputs(const char *str){
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	while (*str)
 8000896:	e006      	b.n	80008a6 <Bsp_fputs+0x18>
	{
		Bsp_fputc(*str++);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe7 	bl	8000874 <Bsp_fputc>
	while (*str)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f4      	bne.n	8000898 <Bsp_fputs+0xa>
	}
	
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <Bsp_printf>:
*参    数:'format （字符数组）' 
*返 回 值:'' 
*说    明: '临时使用，后续需改进增加可用性' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_printf(const char *format,...){ 
 80008b8:	b40f      	push	{r0, r1, r2, r3}
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b08c      	sub	sp, #48	; 0x30
 80008be:	af00      	add	r7, sp, #0
	va_list args;  
    va_start(args, format); 
 80008c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008c4:	623b      	str	r3, [r7, #32]

	while (*format) {
 80008c6:	e040      	b.n	800094a <Bsp_printf+0x92>
		if (*format == '%') {  
 80008c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b25      	cmp	r3, #37	; 0x25
 80008ce:	d132      	bne.n	8000936 <Bsp_printf+0x7e>
            format++;  
 80008d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d2:	3301      	adds	r3, #1
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
            switch (*format) {  
 80008d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b73      	cmp	r3, #115	; 0x73
 80008dc:	d006      	beq.n	80008ec <Bsp_printf+0x34>
 80008de:	2b73      	cmp	r3, #115	; 0x73
 80008e0:	dc2f      	bgt.n	8000942 <Bsp_printf+0x8a>
 80008e2:	2b63      	cmp	r3, #99	; 0x63
 80008e4:	d01b      	beq.n	800091e <Bsp_printf+0x66>
 80008e6:	2b64      	cmp	r3, #100	; 0x64
 80008e8:	d009      	beq.n	80008fe <Bsp_printf+0x46>
                // 可以添加更多格式说明符的处理...  
                default:  
                    // 未知的格式说明符，可以输出一个错误消息或忽略它  
                    //my_putchar('%');  
                    //my_putchar(*format);  
                    break;  
 80008ea:	e02a      	b.n	8000942 <Bsp_printf+0x8a>
                    const char *s = va_arg(args, const char *);  
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	1d1a      	adds	r2, r3, #4
 80008f0:	623a      	str	r2, [r7, #32]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    Bsp_fputs(s);  
 80008f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008f8:	f7ff ffc9 	bl	800088e <Bsp_fputs>
                    break;  
 80008fc:	e022      	b.n	8000944 <Bsp_printf+0x8c>
                    int i = va_arg(args, int);  
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	1d1a      	adds	r2, r3, #4
 8000902:	623a      	str	r2, [r7, #32]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
                    snprintf(buffer, sizeof(buffer), "%d", i);  
 8000908:	4638      	mov	r0, r7
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <Bsp_printf+0xac>)
 800090e:	2120      	movs	r1, #32
 8000910:	f000 fca6 	bl	8001260 <sniprintf>
                    Bsp_fputs(buffer);  
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffb9 	bl	800088e <Bsp_fputs>
                    break;  
 800091c:	e012      	b.n	8000944 <Bsp_printf+0x8c>
                    char c = (char)va_arg(args, int); // va_arg返回的是int类型，需要转换为char  
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	1d1a      	adds	r2, r3, #4
 8000922:	623a      	str	r2, [r7, #32]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    Bsp_fputc(c);  
 800092a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffa0 	bl	8000874 <Bsp_fputc>
                    break;  
 8000934:	e006      	b.n	8000944 <Bsp_printf+0x8c>
            }
		}  
		else
        {
            Bsp_fputc(*format); // 调用自定义的my_fputc  
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff9a 	bl	8000874 <Bsp_fputc>
 8000940:	e000      	b.n	8000944 <Bsp_printf+0x8c>
                    break;  
 8000942:	bf00      	nop
        }
        
        
        format++; 
 8000944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000946:	3301      	adds	r3, #1
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
	while (*format) {
 800094a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1ba      	bne.n	80008c8 <Bsp_printf+0x10>
       
    } 
	va_end(args);
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095e:	b004      	add	sp, #16
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	08001b3c 	.word	0x08001b3c

08000968 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 8000970:	490d      	ldr	r1, [pc, #52]	; (80009a8 <Bsp_DelayUS+0x40>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4613      	mov	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <Bsp_DelayUS+0x40>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <Bsp_DelayUS+0x40>)
 8000986:	2205      	movs	r2, #5
 8000988:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 800098a:	bf00      	nop
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <Bsp_DelayUS+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f9      	beq.n	800098c <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <Bsp_DelayUS+0x40>)
 800099a:	2204      	movs	r2, #4
 800099c:	601a      	str	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e010 	.word	0xe000e010

080009ac <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 80009b0:	f000 f87a 	bl	8000aa8 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 80009b4:	f000 f934 	bl	8000c20 <Bsp_SPI_Init>
    Bsp_Flash_Init();
 80009b8:	f000 f824 	bl	8000a04 <Bsp_Flash_Init>
	//Bsp_I2C_Init();
    
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 80009c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009c8:	f000 f978 	bl	8000cbc <DMA_GetFlagStatus>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d012      	beq.n	80009f8 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 80009d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009d6:	f000 f999 	bl	8000d0c <DMA_ClearFlag>
		Bsp_DelayUS(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f7ff ffc4 	bl	8000968 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 80009e0:	2101      	movs	r1, #1
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <DMA1_Channel6_IRQHandler+0x3c>)
 80009e4:	f000 fa9d 	bl	8000f22 <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 80009e8:	2101      	movs	r1, #1
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <DMA1_Channel6_IRQHandler+0x3c>)
 80009ec:	f000 fab8 	bl	8000f60 <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 80009f0:	2100      	movs	r1, #0
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <DMA1_Channel6_IRQHandler+0x40>)
 80009f4:	f000 f946 	bl	8000c84 <DMA_Cmd>
	}
}	
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	4002006c 	.word	0x4002006c

08000a04 <Bsp_Flash_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '初始化flash' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Flash_Init(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef FLASH_SPI_InitStruct;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 , ENABLE);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a10:	f000 fae4 	bl	8000fdc <RCC_APB1PeriphClockCmd>
    
    SPI_I2S_DeInit(FLASH_SPI);
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <Bsp_Flash_Init+0x58>)
 8000a16:	f000 fb3b 	bl	8001090 <SPI_I2S_DeInit>
    FLASH_SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	80bb      	strh	r3, [r7, #4]
    FLASH_SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000a1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a22:	80fb      	strh	r3, [r7, #6]
    FLASH_SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000a24:	2300      	movs	r3, #0
 8000a26:	813b      	strh	r3, [r7, #8]
    FLASH_SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000a28:	2300      	movs	r3, #0
 8000a2a:	817b      	strh	r3, [r7, #10]
    FLASH_SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                  //奇数边沿
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	81bb      	strh	r3, [r7, #12]
    FLASH_SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a34:	81fb      	strh	r3, [r7, #14]
    FLASH_SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000a36:	2330      	movs	r3, #48	; 0x30
 8000a38:	823b      	strh	r3, [r7, #16]
    FLASH_SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	827b      	strh	r3, [r7, #18]
    FLASH_SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	82bb      	strh	r3, [r7, #20]

    SPI_Init(FLASH_SPI,&FLASH_SPI_InitStruct);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <Bsp_Flash_Init+0x58>)
 8000a48:	f000 fb5c 	bl	8001104 <SPI_Init>
    
    SPI_Cmd(FLASH_SPI,ENABLE);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <Bsp_Flash_Init+0x58>)
 8000a50:	f000 fb9b 	bl	800118a <SPI_Cmd>
    
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40003800 	.word	0x40003800

08000a60 <Bsp_Flash_SPI_TransmitReceive>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
u8 Bsp_Flash_SPI_TransmitReceive(u8 TxData){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
    
    //FLASH_SELECTED();
	while (SPI_I2S_GetFlagStatus(FLASH_SPI, SPI_I2S_FLAG_TXE) != SET); //检查指定的 SPI标志位设置与否:发送缓存空标志位	
 8000a6a:	bf00      	nop
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <Bsp_Flash_SPI_TransmitReceive+0x44>)
 8000a70:	f000 fbb6 	bl	80011e0 <SPI_I2S_GetFlagStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d1f8      	bne.n	8000a6c <Bsp_Flash_SPI_TransmitReceive+0xc>
    
    FLASH_SPI->DR = TxData;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <Bsp_Flash_SPI_TransmitReceive+0x44>)
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	819a      	strh	r2, [r3, #12]
    
    while (SPI_I2S_GetFlagStatus(FLASH_SPI,SPI_I2S_FLAG_RXNE) != SET);
 8000a82:	bf00      	nop
 8000a84:	2101      	movs	r1, #1
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <Bsp_Flash_SPI_TransmitReceive+0x44>)
 8000a88:	f000 fbaa 	bl	80011e0 <SPI_I2S_GetFlagStatus>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1f8      	bne.n	8000a84 <Bsp_Flash_SPI_TransmitReceive+0x24>

    return SPI_I2S_ReceiveData(FLASH_SPI);
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <Bsp_Flash_SPI_TransmitReceive+0x44>)
 8000a94:	f000 fb98 	bl	80011c8 <SPI_I2S_ReceiveData>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b2db      	uxtb	r3, r3
    
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40003800 	.word	0x40003800

08000aa8 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f000 fa76 	bl	8000fa0 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	f000 fa72 	bl	8000fa0 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000abe:	2218      	movs	r2, #24
 8000ac0:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000aca:	22a0      	movs	r2, #160	; 0xa0
 8000acc:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000adc:	2250      	movs	r2, #80	; 0x50
 8000ade:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000ae0:	4924      	ldr	r1, [pc, #144]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000ae2:	4826      	ldr	r0, [pc, #152]	; (8000b7c <Bsp_GPIO_Init+0xd4>)
 8000ae4:	f000 f92c 	bl	8000d40 <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8000ae8:	4923      	ldr	r1, [pc, #140]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000aea:	4824      	ldr	r0, [pc, #144]	; (8000b7c <Bsp_GPIO_Init+0xd4>)
 8000aec:	f000 f928 	bl	8000d40 <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000af2:	2248      	movs	r2, #72	; 0x48
 8000af4:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000afe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b02:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 8000b04:	491e      	ldr	r1, [pc, #120]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b06:	481d      	ldr	r0, [pc, #116]	; (8000b7c <Bsp_GPIO_Init+0xd4>)
 8000b08:	f000 f91a 	bl	8000d40 <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 8000b12:	491b      	ldr	r1, [pc, #108]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b14:	481b      	ldr	r0, [pc, #108]	; (8000b84 <Bsp_GPIO_Init+0xdc>)
 8000b16:	f000 f913 	bl	8000d40 <GPIO_Init>
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000b1c:	2218      	movs	r2, #24
 8000b1e:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000b28:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000b2c:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b30:	2248      	movs	r2, #72	; 0x48
 8000b32:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b36:	2203      	movs	r2, #3
 8000b38:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b40:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000b44:	2210      	movs	r2, #16
 8000b46:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b54:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <Bsp_GPIO_Init+0xd0>)
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <Bsp_GPIO_Init+0xdc>)
 8000b5a:	f000 f8f1 	bl	8000d40 <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8000b5e:	4905      	ldr	r1, [pc, #20]	; (8000b74 <Bsp_GPIO_Init+0xcc>)
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <Bsp_GPIO_Init+0xdc>)
 8000b62:	f000 f8ed 	bl	8000d40 <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 8000b66:	4906      	ldr	r1, [pc, #24]	; (8000b80 <Bsp_GPIO_Init+0xd8>)
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <Bsp_GPIO_Init+0xdc>)
 8000b6a:	f000 f8e9 	bl	8000d40 <GPIO_Init>
    #endif

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	200000a0 	.word	0x200000a0
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	200000a4 	.word	0x200000a4
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <Bsp_KEY_Probe>:
*参    数:'void' 
*返 回 值:'none' 
*说    明: '返回 0 表示按键按下 返回 1 表示按键释放' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t Bsp_KEY_Probe(u8 key){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
    switch (key)
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d83a      	bhi.n	8000c0e <Bsp_KEY_Probe+0x86>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <Bsp_KEY_Probe+0x18>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bc9 	.word	0x08000bc9
 8000ba8:	08000be1 	.word	0x08000be1
 8000bac:	08000bf9 	.word	0x08000bf9
    {
        case KEY_UP: return (GPIO_ReadInputDataBit(KEY_UP_PORT,KEY_UP_PIN) == 0); break;   //这里用 == 0 而不直接读取值，有两个好处 向上层屏蔽了按下和没按下的底层逻辑，上层只需要知道 按下为1 未按下0，如果后续出现改动比如 电平0为释放 1为按下 不用对上层做对应的变化，符合分层 对上层屏蔽细节的作用，便于维护 与阅读 （告诉读者 当前针对 0）
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <Bsp_KEY_Probe+0x90>)
 8000bb6:	f000 f97f 	bl	8000eb8 <GPIO_ReadInputDataBit>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	e023      	b.n	8000c10 <Bsp_KEY_Probe+0x88>
        case KEY_DOWN:return (GPIO_ReadInputDataBit(KEY_DOWN_PORT,KEY_DOWN_PIN) == 0); break;
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <Bsp_KEY_Probe+0x90>)
 8000bce:	f000 f973 	bl	8000eb8 <GPIO_ReadInputDataBit>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2301      	moveq	r3, #1
 8000bda:	2300      	movne	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	e017      	b.n	8000c10 <Bsp_KEY_Probe+0x88>
        case KEY_SET:return (GPIO_ReadInputDataBit(KEY_SET_PORT,KEY_SET_PIN) == 0);  break;
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <Bsp_KEY_Probe+0x90>)
 8000be6:	f000 f967 	bl	8000eb8 <GPIO_ReadInputDataBit>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf0c      	ite	eq
 8000bf0:	2301      	moveq	r3, #1
 8000bf2:	2300      	movne	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	e00b      	b.n	8000c10 <Bsp_KEY_Probe+0x88>
        case KEY_COMFIRM: return (GPIO_ReadInputDataBit(KEY_COMFIRM_PORT,KEY_COMFIRM_PIN) == 0); break;
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <Bsp_KEY_Probe+0x94>)
 8000bfc:	f000 f95c 	bl	8000eb8 <GPIO_ReadInputDataBit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf0c      	ite	eq
 8000c06:	2301      	moveq	r3, #1
 8000c08:	2300      	movne	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	e000      	b.n	8000c10 <Bsp_KEY_Probe+0x88>
    }
    return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00

08000c20 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8000c26:	2101      	movs	r1, #1
 8000c28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c2c:	f000 f9b8 	bl	8000fa0 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <Bsp_SPI_Init+0x60>)
 8000c32:	f000 fa2d 	bl	8001090 <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8000c36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c3a:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000c3c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c40:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000c42:	2300      	movs	r3, #0
 8000c44:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000c46:	2300      	movs	r3, #0
 8000c48:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c52:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 8000c54:	2338      	movs	r3, #56	; 0x38
 8000c56:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000c58:	2300      	movs	r3, #0
 8000c5a:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <Bsp_SPI_Init+0x60>)
 8000c66:	f000 fa4d 	bl	8001104 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <Bsp_SPI_Init+0x60>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8000c70:	2101      	movs	r1, #1
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <Bsp_SPI_Init+0x60>)
 8000c74:	f000 fa89 	bl	800118a <SPI_Cmd>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40013000 	.word	0x40013000

08000c84 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000ca2:	e006      	b.n	8000cb2 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000cac:	4013      	ands	r3, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <DMA_GetFlagStatus+0x48>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	e002      	b.n	8000ce4 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <DMA_GetFlagStatus+0x4c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e001      	b.n	8000cf8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40020000 	.word	0x40020000

08000d0c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000d1e:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <DMA_ClearFlag+0x2c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000d24:	e002      	b.n	8000d2c <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <DMA_ClearFlag+0x30>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6053      	str	r3, [r2, #4]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020000 	.word	0x40020000

08000d40 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	78db      	ldrb	r3, [r3, #3]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	78db      	ldrb	r3, [r3, #3]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d044      	beq.n	8000e18 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	e038      	b.n	8000e0c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d126      	bne.n	8000e06 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	78db      	ldrb	r3, [r3, #3]
 8000de4:	2b28      	cmp	r3, #40	; 0x28
 8000de6:	d105      	bne.n	8000df4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000de8:	2201      	movs	r2, #1
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	409a      	lsls	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	e008      	b.n	8000e06 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	78db      	ldrb	r3, [r3, #3]
 8000df8:	2b48      	cmp	r3, #72	; 0x48
 8000dfa:	d104      	bne.n	8000e06 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	409a      	lsls	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d9c3      	bls.n	8000d9a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d946      	bls.n	8000eae <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	e03a      	b.n	8000ea2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	2201      	movs	r2, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d127      	bne.n	8000e9c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e52:	220f      	movs	r2, #15
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4013      	ands	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	2b28      	cmp	r3, #40	; 0x28
 8000e7a:	d105      	bne.n	8000e88 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	3308      	adds	r3, #8
 8000e80:	2201      	movs	r2, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	2b48      	cmp	r3, #72	; 0x48
 8000e8e:	d105      	bne.n	8000e9c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3308      	adds	r3, #8
 8000e94:	2201      	movs	r2, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9c1      	bls.n	8000e2c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	605a      	str	r2, [r3, #4]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	615a      	str	r2, [r3, #20]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8000f44:	e007      	b.n	8000f56 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	801a      	strh	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000f82:	e007      	b.n	8000f94 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	801a      	strh	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fbe:	e006      	b.n	8000fce <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4903      	ldr	r1, [pc, #12]	; (8000fd8 <RCC_APB2PeriphClockCmd+0x38>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	618b      	str	r3, [r1, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <RCC_APB1PeriphClockCmd+0x38>)
 8000ff0:	69da      	ldr	r2, [r3, #28]
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <RCC_APB1PeriphClockCmd+0x38>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ffa:	e006      	b.n	800100a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <RCC_APB1PeriphClockCmd+0x38>)
 8000ffe:	69da      	ldr	r2, [r3, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	43db      	mvns	r3, r3
 8001004:	4903      	ldr	r1, [pc, #12]	; (8001014 <RCC_APB1PeriphClockCmd+0x38>)
 8001006:	4013      	ands	r3, r2
 8001008:	61cb      	str	r3, [r1, #28]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000

08001018 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <RCC_APB2PeriphResetCmd+0x38>)
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <RCC_APB2PeriphResetCmd+0x38>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4313      	orrs	r3, r2
 8001034:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001036:	e006      	b.n	8001046 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <RCC_APB2PeriphResetCmd+0x38>)
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	43db      	mvns	r3, r3
 8001040:	4903      	ldr	r1, [pc, #12]	; (8001050 <RCC_APB2PeriphResetCmd+0x38>)
 8001042:	4013      	ands	r3, r2
 8001044:	60cb      	str	r3, [r1, #12]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000

08001054 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <RCC_APB1PeriphResetCmd+0x38>)
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <RCC_APB1PeriphResetCmd+0x38>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4313      	orrs	r3, r2
 8001070:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001072:	e006      	b.n	8001082 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <RCC_APB1PeriphResetCmd+0x38>)
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	43db      	mvns	r3, r3
 800107c:	4903      	ldr	r1, [pc, #12]	; (800108c <RCC_APB1PeriphResetCmd+0x38>)
 800107e:	4013      	ands	r3, r2
 8001080:	610b      	str	r3, [r1, #16]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000

08001090 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <SPI_I2S_DeInit+0x68>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d10a      	bne.n	80010b6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80010a0:	2101      	movs	r1, #1
 80010a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010a6:	f7ff ffb7 	bl	8001018 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80010aa:	2100      	movs	r1, #0
 80010ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010b0:	f7ff ffb2 	bl	8001018 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80010b4:	e01c      	b.n	80010f0 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <SPI_I2S_DeInit+0x6c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10a      	bne.n	80010d4 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80010be:	2101      	movs	r1, #1
 80010c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010c4:	f7ff ffc6 	bl	8001054 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80010c8:	2100      	movs	r1, #0
 80010ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010ce:	f7ff ffc1 	bl	8001054 <RCC_APB1PeriphResetCmd>
}
 80010d2:	e00d      	b.n	80010f0 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SPI_I2S_DeInit+0x70>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d109      	bne.n	80010f0 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80010dc:	2101      	movs	r1, #1
 80010de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010e2:	f7ff ffb7 	bl	8001054 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80010e6:	2100      	movs	r1, #0
 80010e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010ec:	f7ff ffb2 	bl	8001054 <RCC_APB1PeriphResetCmd>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013000 	.word	0x40013000
 80010fc:	40003800 	.word	0x40003800
 8001100:	40003c00 	.word	0x40003c00

08001104 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800111e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	885b      	ldrh	r3, [r3, #2]
 8001128:	4313      	orrs	r3, r2
 800112a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001130:	4313      	orrs	r3, r2
 8001132:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001138:	4313      	orrs	r3, r2
 800113a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001140:	4313      	orrs	r3, r2
 8001142:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001148:	4313      	orrs	r3, r2
 800114a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001150:	4313      	orrs	r3, r2
 8001152:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001158:	4313      	orrs	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	4313      	orrs	r3, r2
 8001160:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	89fa      	ldrh	r2, [r7, #14]
 8001166:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	8b9b      	ldrh	r3, [r3, #28]
 800116c:	b29b      	uxth	r3, r3
 800116e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	8a1a      	ldrh	r2, [r3, #16]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	821a      	strh	r2, [r3, #16]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80011ac:	e007      	b.n	80011be <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	801a      	strh	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	899b      	ldrh	r3, [r3, #12]
 80011d4:	b29b      	uxth	r3, r3
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	4013      	ands	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e001      	b.n	800120a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <__libc_init_array>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	2600      	movs	r6, #0
 800121c:	4d0c      	ldr	r5, [pc, #48]	; (8001250 <__libc_init_array+0x38>)
 800121e:	4c0d      	ldr	r4, [pc, #52]	; (8001254 <__libc_init_array+0x3c>)
 8001220:	1b64      	subs	r4, r4, r5
 8001222:	10a4      	asrs	r4, r4, #2
 8001224:	42a6      	cmp	r6, r4
 8001226:	d109      	bne.n	800123c <__libc_init_array+0x24>
 8001228:	f000 fc72 	bl	8001b10 <_init>
 800122c:	2600      	movs	r6, #0
 800122e:	4d0a      	ldr	r5, [pc, #40]	; (8001258 <__libc_init_array+0x40>)
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <__libc_init_array+0x44>)
 8001232:	1b64      	subs	r4, r4, r5
 8001234:	10a4      	asrs	r4, r4, #2
 8001236:	42a6      	cmp	r6, r4
 8001238:	d105      	bne.n	8001246 <__libc_init_array+0x2e>
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001240:	4798      	blx	r3
 8001242:	3601      	adds	r6, #1
 8001244:	e7ee      	b.n	8001224 <__libc_init_array+0xc>
 8001246:	f855 3b04 	ldr.w	r3, [r5], #4
 800124a:	4798      	blx	r3
 800124c:	3601      	adds	r6, #1
 800124e:	e7f2      	b.n	8001236 <__libc_init_array+0x1e>
 8001250:	08001bd4 	.word	0x08001bd4
 8001254:	08001bd4 	.word	0x08001bd4
 8001258:	08001bd4 	.word	0x08001bd4
 800125c:	08001bd8 	.word	0x08001bd8

08001260 <sniprintf>:
 8001260:	b40c      	push	{r2, r3}
 8001262:	b530      	push	{r4, r5, lr}
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <sniprintf+0x64>)
 8001266:	1e0c      	subs	r4, r1, #0
 8001268:	681d      	ldr	r5, [r3, #0]
 800126a:	b09d      	sub	sp, #116	; 0x74
 800126c:	da08      	bge.n	8001280 <sniprintf+0x20>
 800126e:	238b      	movs	r3, #139	; 0x8b
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	602b      	str	r3, [r5, #0]
 8001276:	b01d      	add	sp, #116	; 0x74
 8001278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800127c:	b002      	add	sp, #8
 800127e:	4770      	bx	lr
 8001280:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001284:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001288:	bf0c      	ite	eq
 800128a:	4623      	moveq	r3, r4
 800128c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001290:	9304      	str	r3, [sp, #16]
 8001292:	9307      	str	r3, [sp, #28]
 8001294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001298:	9002      	str	r0, [sp, #8]
 800129a:	9006      	str	r0, [sp, #24]
 800129c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80012a0:	4628      	mov	r0, r5
 80012a2:	ab21      	add	r3, sp, #132	; 0x84
 80012a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80012a6:	a902      	add	r1, sp, #8
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f000 f8c5 	bl	8001438 <_svfiprintf_r>
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	bfbc      	itt	lt
 80012b2:	238b      	movlt	r3, #139	; 0x8b
 80012b4:	602b      	strlt	r3, [r5, #0]
 80012b6:	2c00      	cmp	r4, #0
 80012b8:	d0dd      	beq.n	8001276 <sniprintf+0x16>
 80012ba:	2200      	movs	r2, #0
 80012bc:	9b02      	ldr	r3, [sp, #8]
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e7d9      	b.n	8001276 <sniprintf+0x16>
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008

080012c8 <__retarget_lock_acquire_recursive>:
 80012c8:	4770      	bx	lr

080012ca <__retarget_lock_release_recursive>:
 80012ca:	4770      	bx	lr

080012cc <_malloc_r>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	1ccd      	adds	r5, r1, #3
 80012d0:	f025 0503 	bic.w	r5, r5, #3
 80012d4:	3508      	adds	r5, #8
 80012d6:	2d0c      	cmp	r5, #12
 80012d8:	bf38      	it	cc
 80012da:	250c      	movcc	r5, #12
 80012dc:	2d00      	cmp	r5, #0
 80012de:	4606      	mov	r6, r0
 80012e0:	db01      	blt.n	80012e6 <_malloc_r+0x1a>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d903      	bls.n	80012ee <_malloc_r+0x22>
 80012e6:	230c      	movs	r3, #12
 80012e8:	6033      	str	r3, [r6, #0]
 80012ea:	2000      	movs	r0, #0
 80012ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ee:	f000 fb7f 	bl	80019f0 <__malloc_lock>
 80012f2:	4921      	ldr	r1, [pc, #132]	; (8001378 <_malloc_r+0xac>)
 80012f4:	680a      	ldr	r2, [r1, #0]
 80012f6:	4614      	mov	r4, r2
 80012f8:	b99c      	cbnz	r4, 8001322 <_malloc_r+0x56>
 80012fa:	4f20      	ldr	r7, [pc, #128]	; (800137c <_malloc_r+0xb0>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b923      	cbnz	r3, 800130a <_malloc_r+0x3e>
 8001300:	4621      	mov	r1, r4
 8001302:	4630      	mov	r0, r6
 8001304:	f000 fb2e 	bl	8001964 <_sbrk_r>
 8001308:	6038      	str	r0, [r7, #0]
 800130a:	4629      	mov	r1, r5
 800130c:	4630      	mov	r0, r6
 800130e:	f000 fb29 	bl	8001964 <_sbrk_r>
 8001312:	1c43      	adds	r3, r0, #1
 8001314:	d123      	bne.n	800135e <_malloc_r+0x92>
 8001316:	230c      	movs	r3, #12
 8001318:	4630      	mov	r0, r6
 800131a:	6033      	str	r3, [r6, #0]
 800131c:	f000 fb6e 	bl	80019fc <__malloc_unlock>
 8001320:	e7e3      	b.n	80012ea <_malloc_r+0x1e>
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	1b5b      	subs	r3, r3, r5
 8001326:	d417      	bmi.n	8001358 <_malloc_r+0x8c>
 8001328:	2b0b      	cmp	r3, #11
 800132a:	d903      	bls.n	8001334 <_malloc_r+0x68>
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	441c      	add	r4, r3
 8001330:	6025      	str	r5, [r4, #0]
 8001332:	e004      	b.n	800133e <_malloc_r+0x72>
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	42a2      	cmp	r2, r4
 8001338:	bf0c      	ite	eq
 800133a:	600b      	streq	r3, [r1, #0]
 800133c:	6053      	strne	r3, [r2, #4]
 800133e:	4630      	mov	r0, r6
 8001340:	f000 fb5c 	bl	80019fc <__malloc_unlock>
 8001344:	f104 000b 	add.w	r0, r4, #11
 8001348:	1d23      	adds	r3, r4, #4
 800134a:	f020 0007 	bic.w	r0, r0, #7
 800134e:	1ac2      	subs	r2, r0, r3
 8001350:	d0cc      	beq.n	80012ec <_malloc_r+0x20>
 8001352:	1a1b      	subs	r3, r3, r0
 8001354:	50a3      	str	r3, [r4, r2]
 8001356:	e7c9      	b.n	80012ec <_malloc_r+0x20>
 8001358:	4622      	mov	r2, r4
 800135a:	6864      	ldr	r4, [r4, #4]
 800135c:	e7cc      	b.n	80012f8 <_malloc_r+0x2c>
 800135e:	1cc4      	adds	r4, r0, #3
 8001360:	f024 0403 	bic.w	r4, r4, #3
 8001364:	42a0      	cmp	r0, r4
 8001366:	d0e3      	beq.n	8001330 <_malloc_r+0x64>
 8001368:	1a21      	subs	r1, r4, r0
 800136a:	4630      	mov	r0, r6
 800136c:	f000 fafa 	bl	8001964 <_sbrk_r>
 8001370:	3001      	adds	r0, #1
 8001372:	d1dd      	bne.n	8001330 <_malloc_r+0x64>
 8001374:	e7cf      	b.n	8001316 <_malloc_r+0x4a>
 8001376:	bf00      	nop
 8001378:	200000ac 	.word	0x200000ac
 800137c:	200000b0 	.word	0x200000b0

08001380 <__ssputs_r>:
 8001380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001384:	688e      	ldr	r6, [r1, #8]
 8001386:	4682      	mov	sl, r0
 8001388:	429e      	cmp	r6, r3
 800138a:	460c      	mov	r4, r1
 800138c:	4690      	mov	r8, r2
 800138e:	461f      	mov	r7, r3
 8001390:	d838      	bhi.n	8001404 <__ssputs_r+0x84>
 8001392:	898a      	ldrh	r2, [r1, #12]
 8001394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001398:	d032      	beq.n	8001400 <__ssputs_r+0x80>
 800139a:	6825      	ldr	r5, [r4, #0]
 800139c:	6909      	ldr	r1, [r1, #16]
 800139e:	3301      	adds	r3, #1
 80013a0:	eba5 0901 	sub.w	r9, r5, r1
 80013a4:	6965      	ldr	r5, [r4, #20]
 80013a6:	444b      	add	r3, r9
 80013a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80013b0:	106d      	asrs	r5, r5, #1
 80013b2:	429d      	cmp	r5, r3
 80013b4:	bf38      	it	cc
 80013b6:	461d      	movcc	r5, r3
 80013b8:	0553      	lsls	r3, r2, #21
 80013ba:	d531      	bpl.n	8001420 <__ssputs_r+0xa0>
 80013bc:	4629      	mov	r1, r5
 80013be:	f7ff ff85 	bl	80012cc <_malloc_r>
 80013c2:	4606      	mov	r6, r0
 80013c4:	b950      	cbnz	r0, 80013dc <__ssputs_r+0x5c>
 80013c6:	230c      	movs	r3, #12
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f8ca 3000 	str.w	r3, [sl]
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d6:	81a3      	strh	r3, [r4, #12]
 80013d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013dc:	464a      	mov	r2, r9
 80013de:	6921      	ldr	r1, [r4, #16]
 80013e0:	f000 fade 	bl	80019a0 <memcpy>
 80013e4:	89a3      	ldrh	r3, [r4, #12]
 80013e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80013ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ee:	81a3      	strh	r3, [r4, #12]
 80013f0:	6126      	str	r6, [r4, #16]
 80013f2:	444e      	add	r6, r9
 80013f4:	6026      	str	r6, [r4, #0]
 80013f6:	463e      	mov	r6, r7
 80013f8:	6165      	str	r5, [r4, #20]
 80013fa:	eba5 0509 	sub.w	r5, r5, r9
 80013fe:	60a5      	str	r5, [r4, #8]
 8001400:	42be      	cmp	r6, r7
 8001402:	d900      	bls.n	8001406 <__ssputs_r+0x86>
 8001404:	463e      	mov	r6, r7
 8001406:	4632      	mov	r2, r6
 8001408:	4641      	mov	r1, r8
 800140a:	6820      	ldr	r0, [r4, #0]
 800140c:	f000 fad6 	bl	80019bc <memmove>
 8001410:	68a3      	ldr	r3, [r4, #8]
 8001412:	2000      	movs	r0, #0
 8001414:	1b9b      	subs	r3, r3, r6
 8001416:	60a3      	str	r3, [r4, #8]
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	4433      	add	r3, r6
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	e7db      	b.n	80013d8 <__ssputs_r+0x58>
 8001420:	462a      	mov	r2, r5
 8001422:	f000 fb39 	bl	8001a98 <_realloc_r>
 8001426:	4606      	mov	r6, r0
 8001428:	2800      	cmp	r0, #0
 800142a:	d1e1      	bne.n	80013f0 <__ssputs_r+0x70>
 800142c:	4650      	mov	r0, sl
 800142e:	6921      	ldr	r1, [r4, #16]
 8001430:	f000 faea 	bl	8001a08 <_free_r>
 8001434:	e7c7      	b.n	80013c6 <__ssputs_r+0x46>
	...

08001438 <_svfiprintf_r>:
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143c:	4698      	mov	r8, r3
 800143e:	898b      	ldrh	r3, [r1, #12]
 8001440:	4607      	mov	r7, r0
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	460d      	mov	r5, r1
 8001446:	4614      	mov	r4, r2
 8001448:	b09d      	sub	sp, #116	; 0x74
 800144a:	d50e      	bpl.n	800146a <_svfiprintf_r+0x32>
 800144c:	690b      	ldr	r3, [r1, #16]
 800144e:	b963      	cbnz	r3, 800146a <_svfiprintf_r+0x32>
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	f7ff ff3b 	bl	80012cc <_malloc_r>
 8001456:	6028      	str	r0, [r5, #0]
 8001458:	6128      	str	r0, [r5, #16]
 800145a:	b920      	cbnz	r0, 8001466 <_svfiprintf_r+0x2e>
 800145c:	230c      	movs	r3, #12
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	e0d1      	b.n	800160a <_svfiprintf_r+0x1d2>
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	616b      	str	r3, [r5, #20]
 800146a:	2300      	movs	r3, #0
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	2320      	movs	r3, #32
 8001470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001474:	2330      	movs	r3, #48	; 0x30
 8001476:	f04f 0901 	mov.w	r9, #1
 800147a:	f8cd 800c 	str.w	r8, [sp, #12]
 800147e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001624 <_svfiprintf_r+0x1ec>
 8001482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001486:	4623      	mov	r3, r4
 8001488:	469a      	mov	sl, r3
 800148a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800148e:	b10a      	cbz	r2, 8001494 <_svfiprintf_r+0x5c>
 8001490:	2a25      	cmp	r2, #37	; 0x25
 8001492:	d1f9      	bne.n	8001488 <_svfiprintf_r+0x50>
 8001494:	ebba 0b04 	subs.w	fp, sl, r4
 8001498:	d00b      	beq.n	80014b2 <_svfiprintf_r+0x7a>
 800149a:	465b      	mov	r3, fp
 800149c:	4622      	mov	r2, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	4638      	mov	r0, r7
 80014a2:	f7ff ff6d 	bl	8001380 <__ssputs_r>
 80014a6:	3001      	adds	r0, #1
 80014a8:	f000 80aa 	beq.w	8001600 <_svfiprintf_r+0x1c8>
 80014ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014ae:	445a      	add	r2, fp
 80014b0:	9209      	str	r2, [sp, #36]	; 0x24
 80014b2:	f89a 3000 	ldrb.w	r3, [sl]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80a2 	beq.w	8001600 <_svfiprintf_r+0x1c8>
 80014bc:	2300      	movs	r3, #0
 80014be:	f04f 32ff 	mov.w	r2, #4294967295
 80014c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014c6:	f10a 0a01 	add.w	sl, sl, #1
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014d2:	931a      	str	r3, [sp, #104]	; 0x68
 80014d4:	4654      	mov	r4, sl
 80014d6:	2205      	movs	r2, #5
 80014d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014dc:	4851      	ldr	r0, [pc, #324]	; (8001624 <_svfiprintf_r+0x1ec>)
 80014de:	f000 fa51 	bl	8001984 <memchr>
 80014e2:	9a04      	ldr	r2, [sp, #16]
 80014e4:	b9d8      	cbnz	r0, 800151e <_svfiprintf_r+0xe6>
 80014e6:	06d0      	lsls	r0, r2, #27
 80014e8:	bf44      	itt	mi
 80014ea:	2320      	movmi	r3, #32
 80014ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014f0:	0711      	lsls	r1, r2, #28
 80014f2:	bf44      	itt	mi
 80014f4:	232b      	movmi	r3, #43	; 0x2b
 80014f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014fa:	f89a 3000 	ldrb.w	r3, [sl]
 80014fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001500:	d015      	beq.n	800152e <_svfiprintf_r+0xf6>
 8001502:	4654      	mov	r4, sl
 8001504:	2000      	movs	r0, #0
 8001506:	f04f 0c0a 	mov.w	ip, #10
 800150a:	9a07      	ldr	r2, [sp, #28]
 800150c:	4621      	mov	r1, r4
 800150e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001512:	3b30      	subs	r3, #48	; 0x30
 8001514:	2b09      	cmp	r3, #9
 8001516:	d94e      	bls.n	80015b6 <_svfiprintf_r+0x17e>
 8001518:	b1b0      	cbz	r0, 8001548 <_svfiprintf_r+0x110>
 800151a:	9207      	str	r2, [sp, #28]
 800151c:	e014      	b.n	8001548 <_svfiprintf_r+0x110>
 800151e:	eba0 0308 	sub.w	r3, r0, r8
 8001522:	fa09 f303 	lsl.w	r3, r9, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	46a2      	mov	sl, r4
 800152a:	9304      	str	r3, [sp, #16]
 800152c:	e7d2      	b.n	80014d4 <_svfiprintf_r+0x9c>
 800152e:	9b03      	ldr	r3, [sp, #12]
 8001530:	1d19      	adds	r1, r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	9103      	str	r1, [sp, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfbb      	ittet	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	f042 0202 	orrlt.w	r2, r2, #2
 8001540:	9307      	strge	r3, [sp, #28]
 8001542:	9307      	strlt	r3, [sp, #28]
 8001544:	bfb8      	it	lt
 8001546:	9204      	strlt	r2, [sp, #16]
 8001548:	7823      	ldrb	r3, [r4, #0]
 800154a:	2b2e      	cmp	r3, #46	; 0x2e
 800154c:	d10c      	bne.n	8001568 <_svfiprintf_r+0x130>
 800154e:	7863      	ldrb	r3, [r4, #1]
 8001550:	2b2a      	cmp	r3, #42	; 0x2a
 8001552:	d135      	bne.n	80015c0 <_svfiprintf_r+0x188>
 8001554:	9b03      	ldr	r3, [sp, #12]
 8001556:	3402      	adds	r4, #2
 8001558:	1d1a      	adds	r2, r3, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	9203      	str	r2, [sp, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bfb8      	it	lt
 8001562:	f04f 33ff 	movlt.w	r3, #4294967295
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001628 <_svfiprintf_r+0x1f0>
 800156c:	2203      	movs	r2, #3
 800156e:	4650      	mov	r0, sl
 8001570:	7821      	ldrb	r1, [r4, #0]
 8001572:	f000 fa07 	bl	8001984 <memchr>
 8001576:	b140      	cbz	r0, 800158a <_svfiprintf_r+0x152>
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	eba0 000a 	sub.w	r0, r0, sl
 800157e:	fa03 f000 	lsl.w	r0, r3, r0
 8001582:	9b04      	ldr	r3, [sp, #16]
 8001584:	3401      	adds	r4, #1
 8001586:	4303      	orrs	r3, r0
 8001588:	9304      	str	r3, [sp, #16]
 800158a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800158e:	2206      	movs	r2, #6
 8001590:	4826      	ldr	r0, [pc, #152]	; (800162c <_svfiprintf_r+0x1f4>)
 8001592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001596:	f000 f9f5 	bl	8001984 <memchr>
 800159a:	2800      	cmp	r0, #0
 800159c:	d038      	beq.n	8001610 <_svfiprintf_r+0x1d8>
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <_svfiprintf_r+0x1f8>)
 80015a0:	bb1b      	cbnz	r3, 80015ea <_svfiprintf_r+0x1b2>
 80015a2:	9b03      	ldr	r3, [sp, #12]
 80015a4:	3307      	adds	r3, #7
 80015a6:	f023 0307 	bic.w	r3, r3, #7
 80015aa:	3308      	adds	r3, #8
 80015ac:	9303      	str	r3, [sp, #12]
 80015ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015b0:	4433      	add	r3, r6
 80015b2:	9309      	str	r3, [sp, #36]	; 0x24
 80015b4:	e767      	b.n	8001486 <_svfiprintf_r+0x4e>
 80015b6:	460c      	mov	r4, r1
 80015b8:	2001      	movs	r0, #1
 80015ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80015be:	e7a5      	b.n	800150c <_svfiprintf_r+0xd4>
 80015c0:	2300      	movs	r3, #0
 80015c2:	f04f 0c0a 	mov.w	ip, #10
 80015c6:	4619      	mov	r1, r3
 80015c8:	3401      	adds	r4, #1
 80015ca:	9305      	str	r3, [sp, #20]
 80015cc:	4620      	mov	r0, r4
 80015ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015d2:	3a30      	subs	r2, #48	; 0x30
 80015d4:	2a09      	cmp	r2, #9
 80015d6:	d903      	bls.n	80015e0 <_svfiprintf_r+0x1a8>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0c5      	beq.n	8001568 <_svfiprintf_r+0x130>
 80015dc:	9105      	str	r1, [sp, #20]
 80015de:	e7c3      	b.n	8001568 <_svfiprintf_r+0x130>
 80015e0:	4604      	mov	r4, r0
 80015e2:	2301      	movs	r3, #1
 80015e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80015e8:	e7f0      	b.n	80015cc <_svfiprintf_r+0x194>
 80015ea:	ab03      	add	r3, sp, #12
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	462a      	mov	r2, r5
 80015f0:	4638      	mov	r0, r7
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_svfiprintf_r+0x1fc>)
 80015f4:	a904      	add	r1, sp, #16
 80015f6:	f3af 8000 	nop.w
 80015fa:	1c42      	adds	r2, r0, #1
 80015fc:	4606      	mov	r6, r0
 80015fe:	d1d6      	bne.n	80015ae <_svfiprintf_r+0x176>
 8001600:	89ab      	ldrh	r3, [r5, #12]
 8001602:	065b      	lsls	r3, r3, #25
 8001604:	f53f af2c 	bmi.w	8001460 <_svfiprintf_r+0x28>
 8001608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800160a:	b01d      	add	sp, #116	; 0x74
 800160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001610:	ab03      	add	r3, sp, #12
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	462a      	mov	r2, r5
 8001616:	4638      	mov	r0, r7
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <_svfiprintf_r+0x1fc>)
 800161a:	a904      	add	r1, sp, #16
 800161c:	f000 f87c 	bl	8001718 <_printf_i>
 8001620:	e7eb      	b.n	80015fa <_svfiprintf_r+0x1c2>
 8001622:	bf00      	nop
 8001624:	08001ba0 	.word	0x08001ba0
 8001628:	08001ba6 	.word	0x08001ba6
 800162c:	08001baa 	.word	0x08001baa
 8001630:	00000000 	.word	0x00000000
 8001634:	08001381 	.word	0x08001381

08001638 <_printf_common>:
 8001638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800163c:	4616      	mov	r6, r2
 800163e:	4699      	mov	r9, r3
 8001640:	688a      	ldr	r2, [r1, #8]
 8001642:	690b      	ldr	r3, [r1, #16]
 8001644:	4607      	mov	r7, r0
 8001646:	4293      	cmp	r3, r2
 8001648:	bfb8      	it	lt
 800164a:	4613      	movlt	r3, r2
 800164c:	6033      	str	r3, [r6, #0]
 800164e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001652:	460c      	mov	r4, r1
 8001654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001658:	b10a      	cbz	r2, 800165e <_printf_common+0x26>
 800165a:	3301      	adds	r3, #1
 800165c:	6033      	str	r3, [r6, #0]
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	0699      	lsls	r1, r3, #26
 8001662:	bf42      	ittt	mi
 8001664:	6833      	ldrmi	r3, [r6, #0]
 8001666:	3302      	addmi	r3, #2
 8001668:	6033      	strmi	r3, [r6, #0]
 800166a:	6825      	ldr	r5, [r4, #0]
 800166c:	f015 0506 	ands.w	r5, r5, #6
 8001670:	d106      	bne.n	8001680 <_printf_common+0x48>
 8001672:	f104 0a19 	add.w	sl, r4, #25
 8001676:	68e3      	ldr	r3, [r4, #12]
 8001678:	6832      	ldr	r2, [r6, #0]
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	42ab      	cmp	r3, r5
 800167e:	dc28      	bgt.n	80016d2 <_printf_common+0x9a>
 8001680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001684:	1e13      	subs	r3, r2, #0
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	bf18      	it	ne
 800168a:	2301      	movne	r3, #1
 800168c:	0692      	lsls	r2, r2, #26
 800168e:	d42d      	bmi.n	80016ec <_printf_common+0xb4>
 8001690:	4649      	mov	r1, r9
 8001692:	4638      	mov	r0, r7
 8001694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001698:	47c0      	blx	r8
 800169a:	3001      	adds	r0, #1
 800169c:	d020      	beq.n	80016e0 <_printf_common+0xa8>
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	68e5      	ldr	r5, [r4, #12]
 80016a2:	f003 0306 	and.w	r3, r3, #6
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf18      	it	ne
 80016aa:	2500      	movne	r5, #0
 80016ac:	6832      	ldr	r2, [r6, #0]
 80016ae:	f04f 0600 	mov.w	r6, #0
 80016b2:	68a3      	ldr	r3, [r4, #8]
 80016b4:	bf08      	it	eq
 80016b6:	1aad      	subeq	r5, r5, r2
 80016b8:	6922      	ldr	r2, [r4, #16]
 80016ba:	bf08      	it	eq
 80016bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bfc4      	itt	gt
 80016c4:	1a9b      	subgt	r3, r3, r2
 80016c6:	18ed      	addgt	r5, r5, r3
 80016c8:	341a      	adds	r4, #26
 80016ca:	42b5      	cmp	r5, r6
 80016cc:	d11a      	bne.n	8001704 <_printf_common+0xcc>
 80016ce:	2000      	movs	r0, #0
 80016d0:	e008      	b.n	80016e4 <_printf_common+0xac>
 80016d2:	2301      	movs	r3, #1
 80016d4:	4652      	mov	r2, sl
 80016d6:	4649      	mov	r1, r9
 80016d8:	4638      	mov	r0, r7
 80016da:	47c0      	blx	r8
 80016dc:	3001      	adds	r0, #1
 80016de:	d103      	bne.n	80016e8 <_printf_common+0xb0>
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016e8:	3501      	adds	r5, #1
 80016ea:	e7c4      	b.n	8001676 <_printf_common+0x3e>
 80016ec:	2030      	movs	r0, #48	; 0x30
 80016ee:	18e1      	adds	r1, r4, r3
 80016f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016fa:	4422      	add	r2, r4
 80016fc:	3302      	adds	r3, #2
 80016fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001702:	e7c5      	b.n	8001690 <_printf_common+0x58>
 8001704:	2301      	movs	r3, #1
 8001706:	4622      	mov	r2, r4
 8001708:	4649      	mov	r1, r9
 800170a:	4638      	mov	r0, r7
 800170c:	47c0      	blx	r8
 800170e:	3001      	adds	r0, #1
 8001710:	d0e6      	beq.n	80016e0 <_printf_common+0xa8>
 8001712:	3601      	adds	r6, #1
 8001714:	e7d9      	b.n	80016ca <_printf_common+0x92>
	...

08001718 <_printf_i>:
 8001718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800171c:	7e0f      	ldrb	r7, [r1, #24]
 800171e:	4691      	mov	r9, r2
 8001720:	2f78      	cmp	r7, #120	; 0x78
 8001722:	4680      	mov	r8, r0
 8001724:	460c      	mov	r4, r1
 8001726:	469a      	mov	sl, r3
 8001728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800172a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800172e:	d807      	bhi.n	8001740 <_printf_i+0x28>
 8001730:	2f62      	cmp	r7, #98	; 0x62
 8001732:	d80a      	bhi.n	800174a <_printf_i+0x32>
 8001734:	2f00      	cmp	r7, #0
 8001736:	f000 80d9 	beq.w	80018ec <_printf_i+0x1d4>
 800173a:	2f58      	cmp	r7, #88	; 0x58
 800173c:	f000 80a4 	beq.w	8001888 <_printf_i+0x170>
 8001740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001748:	e03a      	b.n	80017c0 <_printf_i+0xa8>
 800174a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800174e:	2b15      	cmp	r3, #21
 8001750:	d8f6      	bhi.n	8001740 <_printf_i+0x28>
 8001752:	a101      	add	r1, pc, #4	; (adr r1, 8001758 <_printf_i+0x40>)
 8001754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001758:	080017b1 	.word	0x080017b1
 800175c:	080017c5 	.word	0x080017c5
 8001760:	08001741 	.word	0x08001741
 8001764:	08001741 	.word	0x08001741
 8001768:	08001741 	.word	0x08001741
 800176c:	08001741 	.word	0x08001741
 8001770:	080017c5 	.word	0x080017c5
 8001774:	08001741 	.word	0x08001741
 8001778:	08001741 	.word	0x08001741
 800177c:	08001741 	.word	0x08001741
 8001780:	08001741 	.word	0x08001741
 8001784:	080018d3 	.word	0x080018d3
 8001788:	080017f5 	.word	0x080017f5
 800178c:	080018b5 	.word	0x080018b5
 8001790:	08001741 	.word	0x08001741
 8001794:	08001741 	.word	0x08001741
 8001798:	080018f5 	.word	0x080018f5
 800179c:	08001741 	.word	0x08001741
 80017a0:	080017f5 	.word	0x080017f5
 80017a4:	08001741 	.word	0x08001741
 80017a8:	08001741 	.word	0x08001741
 80017ac:	080018bd 	.word	0x080018bd
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	1d1a      	adds	r2, r3, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	602a      	str	r2, [r5, #0]
 80017b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0a4      	b.n	800190e <_printf_i+0x1f6>
 80017c4:	6820      	ldr	r0, [r4, #0]
 80017c6:	6829      	ldr	r1, [r5, #0]
 80017c8:	0606      	lsls	r6, r0, #24
 80017ca:	f101 0304 	add.w	r3, r1, #4
 80017ce:	d50a      	bpl.n	80017e6 <_printf_i+0xce>
 80017d0:	680e      	ldr	r6, [r1, #0]
 80017d2:	602b      	str	r3, [r5, #0]
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	da03      	bge.n	80017e0 <_printf_i+0xc8>
 80017d8:	232d      	movs	r3, #45	; 0x2d
 80017da:	4276      	negs	r6, r6
 80017dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017e0:	230a      	movs	r3, #10
 80017e2:	485e      	ldr	r0, [pc, #376]	; (800195c <_printf_i+0x244>)
 80017e4:	e019      	b.n	800181a <_printf_i+0x102>
 80017e6:	680e      	ldr	r6, [r1, #0]
 80017e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	bf18      	it	ne
 80017f0:	b236      	sxthne	r6, r6
 80017f2:	e7ef      	b.n	80017d4 <_printf_i+0xbc>
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	6820      	ldr	r0, [r4, #0]
 80017f8:	1d19      	adds	r1, r3, #4
 80017fa:	6029      	str	r1, [r5, #0]
 80017fc:	0601      	lsls	r1, r0, #24
 80017fe:	d501      	bpl.n	8001804 <_printf_i+0xec>
 8001800:	681e      	ldr	r6, [r3, #0]
 8001802:	e002      	b.n	800180a <_printf_i+0xf2>
 8001804:	0646      	lsls	r6, r0, #25
 8001806:	d5fb      	bpl.n	8001800 <_printf_i+0xe8>
 8001808:	881e      	ldrh	r6, [r3, #0]
 800180a:	2f6f      	cmp	r7, #111	; 0x6f
 800180c:	bf0c      	ite	eq
 800180e:	2308      	moveq	r3, #8
 8001810:	230a      	movne	r3, #10
 8001812:	4852      	ldr	r0, [pc, #328]	; (800195c <_printf_i+0x244>)
 8001814:	2100      	movs	r1, #0
 8001816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800181a:	6865      	ldr	r5, [r4, #4]
 800181c:	2d00      	cmp	r5, #0
 800181e:	bfa8      	it	ge
 8001820:	6821      	ldrge	r1, [r4, #0]
 8001822:	60a5      	str	r5, [r4, #8]
 8001824:	bfa4      	itt	ge
 8001826:	f021 0104 	bicge.w	r1, r1, #4
 800182a:	6021      	strge	r1, [r4, #0]
 800182c:	b90e      	cbnz	r6, 8001832 <_printf_i+0x11a>
 800182e:	2d00      	cmp	r5, #0
 8001830:	d04d      	beq.n	80018ce <_printf_i+0x1b6>
 8001832:	4615      	mov	r5, r2
 8001834:	fbb6 f1f3 	udiv	r1, r6, r3
 8001838:	fb03 6711 	mls	r7, r3, r1, r6
 800183c:	5dc7      	ldrb	r7, [r0, r7]
 800183e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001842:	4637      	mov	r7, r6
 8001844:	42bb      	cmp	r3, r7
 8001846:	460e      	mov	r6, r1
 8001848:	d9f4      	bls.n	8001834 <_printf_i+0x11c>
 800184a:	2b08      	cmp	r3, #8
 800184c:	d10b      	bne.n	8001866 <_printf_i+0x14e>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	07de      	lsls	r6, r3, #31
 8001852:	d508      	bpl.n	8001866 <_printf_i+0x14e>
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	6861      	ldr	r1, [r4, #4]
 8001858:	4299      	cmp	r1, r3
 800185a:	bfde      	ittt	le
 800185c:	2330      	movle	r3, #48	; 0x30
 800185e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001862:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001866:	1b52      	subs	r2, r2, r5
 8001868:	6122      	str	r2, [r4, #16]
 800186a:	464b      	mov	r3, r9
 800186c:	4621      	mov	r1, r4
 800186e:	4640      	mov	r0, r8
 8001870:	f8cd a000 	str.w	sl, [sp]
 8001874:	aa03      	add	r2, sp, #12
 8001876:	f7ff fedf 	bl	8001638 <_printf_common>
 800187a:	3001      	adds	r0, #1
 800187c:	d14c      	bne.n	8001918 <_printf_i+0x200>
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	b004      	add	sp, #16
 8001884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001888:	4834      	ldr	r0, [pc, #208]	; (800195c <_printf_i+0x244>)
 800188a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800188e:	6829      	ldr	r1, [r5, #0]
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	f851 6b04 	ldr.w	r6, [r1], #4
 8001896:	6029      	str	r1, [r5, #0]
 8001898:	061d      	lsls	r5, r3, #24
 800189a:	d514      	bpl.n	80018c6 <_printf_i+0x1ae>
 800189c:	07df      	lsls	r7, r3, #31
 800189e:	bf44      	itt	mi
 80018a0:	f043 0320 	orrmi.w	r3, r3, #32
 80018a4:	6023      	strmi	r3, [r4, #0]
 80018a6:	b91e      	cbnz	r6, 80018b0 <_printf_i+0x198>
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	f023 0320 	bic.w	r3, r3, #32
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	2310      	movs	r3, #16
 80018b2:	e7af      	b.n	8001814 <_printf_i+0xfc>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6023      	str	r3, [r4, #0]
 80018bc:	2378      	movs	r3, #120	; 0x78
 80018be:	4828      	ldr	r0, [pc, #160]	; (8001960 <_printf_i+0x248>)
 80018c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018c4:	e7e3      	b.n	800188e <_printf_i+0x176>
 80018c6:	0659      	lsls	r1, r3, #25
 80018c8:	bf48      	it	mi
 80018ca:	b2b6      	uxthmi	r6, r6
 80018cc:	e7e6      	b.n	800189c <_printf_i+0x184>
 80018ce:	4615      	mov	r5, r2
 80018d0:	e7bb      	b.n	800184a <_printf_i+0x132>
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	6826      	ldr	r6, [r4, #0]
 80018d6:	1d18      	adds	r0, r3, #4
 80018d8:	6961      	ldr	r1, [r4, #20]
 80018da:	6028      	str	r0, [r5, #0]
 80018dc:	0635      	lsls	r5, r6, #24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	d501      	bpl.n	80018e6 <_printf_i+0x1ce>
 80018e2:	6019      	str	r1, [r3, #0]
 80018e4:	e002      	b.n	80018ec <_printf_i+0x1d4>
 80018e6:	0670      	lsls	r0, r6, #25
 80018e8:	d5fb      	bpl.n	80018e2 <_printf_i+0x1ca>
 80018ea:	8019      	strh	r1, [r3, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	4615      	mov	r5, r2
 80018f0:	6123      	str	r3, [r4, #16]
 80018f2:	e7ba      	b.n	800186a <_printf_i+0x152>
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	2100      	movs	r1, #0
 80018f8:	1d1a      	adds	r2, r3, #4
 80018fa:	602a      	str	r2, [r5, #0]
 80018fc:	681d      	ldr	r5, [r3, #0]
 80018fe:	6862      	ldr	r2, [r4, #4]
 8001900:	4628      	mov	r0, r5
 8001902:	f000 f83f 	bl	8001984 <memchr>
 8001906:	b108      	cbz	r0, 800190c <_printf_i+0x1f4>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	6060      	str	r0, [r4, #4]
 800190c:	6863      	ldr	r3, [r4, #4]
 800190e:	6123      	str	r3, [r4, #16]
 8001910:	2300      	movs	r3, #0
 8001912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001916:	e7a8      	b.n	800186a <_printf_i+0x152>
 8001918:	462a      	mov	r2, r5
 800191a:	4649      	mov	r1, r9
 800191c:	4640      	mov	r0, r8
 800191e:	6923      	ldr	r3, [r4, #16]
 8001920:	47d0      	blx	sl
 8001922:	3001      	adds	r0, #1
 8001924:	d0ab      	beq.n	800187e <_printf_i+0x166>
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	079b      	lsls	r3, r3, #30
 800192a:	d413      	bmi.n	8001954 <_printf_i+0x23c>
 800192c:	68e0      	ldr	r0, [r4, #12]
 800192e:	9b03      	ldr	r3, [sp, #12]
 8001930:	4298      	cmp	r0, r3
 8001932:	bfb8      	it	lt
 8001934:	4618      	movlt	r0, r3
 8001936:	e7a4      	b.n	8001882 <_printf_i+0x16a>
 8001938:	2301      	movs	r3, #1
 800193a:	4632      	mov	r2, r6
 800193c:	4649      	mov	r1, r9
 800193e:	4640      	mov	r0, r8
 8001940:	47d0      	blx	sl
 8001942:	3001      	adds	r0, #1
 8001944:	d09b      	beq.n	800187e <_printf_i+0x166>
 8001946:	3501      	adds	r5, #1
 8001948:	68e3      	ldr	r3, [r4, #12]
 800194a:	9903      	ldr	r1, [sp, #12]
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	42ab      	cmp	r3, r5
 8001950:	dcf2      	bgt.n	8001938 <_printf_i+0x220>
 8001952:	e7eb      	b.n	800192c <_printf_i+0x214>
 8001954:	2500      	movs	r5, #0
 8001956:	f104 0619 	add.w	r6, r4, #25
 800195a:	e7f5      	b.n	8001948 <_printf_i+0x230>
 800195c:	08001bb1 	.word	0x08001bb1
 8001960:	08001bc2 	.word	0x08001bc2

08001964 <_sbrk_r>:
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	2300      	movs	r3, #0
 8001968:	4d05      	ldr	r5, [pc, #20]	; (8001980 <_sbrk_r+0x1c>)
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	f000 f8c0 	bl	8001af4 <_sbrk>
 8001974:	1c43      	adds	r3, r0, #1
 8001976:	d102      	bne.n	800197e <_sbrk_r+0x1a>
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	b103      	cbz	r3, 800197e <_sbrk_r+0x1a>
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	200000b4 	.word	0x200000b4

08001984 <memchr>:
 8001984:	4603      	mov	r3, r0
 8001986:	b510      	push	{r4, lr}
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	4402      	add	r2, r0
 800198c:	4293      	cmp	r3, r2
 800198e:	4618      	mov	r0, r3
 8001990:	d101      	bne.n	8001996 <memchr+0x12>
 8001992:	2000      	movs	r0, #0
 8001994:	e003      	b.n	800199e <memchr+0x1a>
 8001996:	7804      	ldrb	r4, [r0, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	428c      	cmp	r4, r1
 800199c:	d1f6      	bne.n	800198c <memchr+0x8>
 800199e:	bd10      	pop	{r4, pc}

080019a0 <memcpy>:
 80019a0:	440a      	add	r2, r1
 80019a2:	4291      	cmp	r1, r2
 80019a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80019a8:	d100      	bne.n	80019ac <memcpy+0xc>
 80019aa:	4770      	bx	lr
 80019ac:	b510      	push	{r4, lr}
 80019ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019b2:	4291      	cmp	r1, r2
 80019b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019b8:	d1f9      	bne.n	80019ae <memcpy+0xe>
 80019ba:	bd10      	pop	{r4, pc}

080019bc <memmove>:
 80019bc:	4288      	cmp	r0, r1
 80019be:	b510      	push	{r4, lr}
 80019c0:	eb01 0402 	add.w	r4, r1, r2
 80019c4:	d902      	bls.n	80019cc <memmove+0x10>
 80019c6:	4284      	cmp	r4, r0
 80019c8:	4623      	mov	r3, r4
 80019ca:	d807      	bhi.n	80019dc <memmove+0x20>
 80019cc:	1e43      	subs	r3, r0, #1
 80019ce:	42a1      	cmp	r1, r4
 80019d0:	d008      	beq.n	80019e4 <memmove+0x28>
 80019d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019da:	e7f8      	b.n	80019ce <memmove+0x12>
 80019dc:	4601      	mov	r1, r0
 80019de:	4402      	add	r2, r0
 80019e0:	428a      	cmp	r2, r1
 80019e2:	d100      	bne.n	80019e6 <memmove+0x2a>
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019ee:	e7f7      	b.n	80019e0 <memmove+0x24>

080019f0 <__malloc_lock>:
 80019f0:	4801      	ldr	r0, [pc, #4]	; (80019f8 <__malloc_lock+0x8>)
 80019f2:	f7ff bc69 	b.w	80012c8 <__retarget_lock_acquire_recursive>
 80019f6:	bf00      	nop
 80019f8:	200000a8 	.word	0x200000a8

080019fc <__malloc_unlock>:
 80019fc:	4801      	ldr	r0, [pc, #4]	; (8001a04 <__malloc_unlock+0x8>)
 80019fe:	f7ff bc64 	b.w	80012ca <__retarget_lock_release_recursive>
 8001a02:	bf00      	nop
 8001a04:	200000a8 	.word	0x200000a8

08001a08 <_free_r>:
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4605      	mov	r5, r0
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d040      	beq.n	8001a92 <_free_r+0x8a>
 8001a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a14:	1f0c      	subs	r4, r1, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bfb8      	it	lt
 8001a1a:	18e4      	addlt	r4, r4, r3
 8001a1c:	f7ff ffe8 	bl	80019f0 <__malloc_lock>
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <_free_r+0x8c>)
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	b933      	cbnz	r3, 8001a34 <_free_r+0x2c>
 8001a26:	6063      	str	r3, [r4, #4]
 8001a28:	6014      	str	r4, [r2, #0]
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a30:	f7ff bfe4 	b.w	80019fc <__malloc_unlock>
 8001a34:	42a3      	cmp	r3, r4
 8001a36:	d908      	bls.n	8001a4a <_free_r+0x42>
 8001a38:	6820      	ldr	r0, [r4, #0]
 8001a3a:	1821      	adds	r1, r4, r0
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	bf01      	itttt	eq
 8001a40:	6819      	ldreq	r1, [r3, #0]
 8001a42:	685b      	ldreq	r3, [r3, #4]
 8001a44:	1809      	addeq	r1, r1, r0
 8001a46:	6021      	streq	r1, [r4, #0]
 8001a48:	e7ed      	b.n	8001a26 <_free_r+0x1e>
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	b10b      	cbz	r3, 8001a54 <_free_r+0x4c>
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	d9fa      	bls.n	8001a4a <_free_r+0x42>
 8001a54:	6811      	ldr	r1, [r2, #0]
 8001a56:	1850      	adds	r0, r2, r1
 8001a58:	42a0      	cmp	r0, r4
 8001a5a:	d10b      	bne.n	8001a74 <_free_r+0x6c>
 8001a5c:	6820      	ldr	r0, [r4, #0]
 8001a5e:	4401      	add	r1, r0
 8001a60:	1850      	adds	r0, r2, r1
 8001a62:	4283      	cmp	r3, r0
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	d1e0      	bne.n	8001a2a <_free_r+0x22>
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4401      	add	r1, r0
 8001a6e:	6011      	str	r1, [r2, #0]
 8001a70:	6053      	str	r3, [r2, #4]
 8001a72:	e7da      	b.n	8001a2a <_free_r+0x22>
 8001a74:	d902      	bls.n	8001a7c <_free_r+0x74>
 8001a76:	230c      	movs	r3, #12
 8001a78:	602b      	str	r3, [r5, #0]
 8001a7a:	e7d6      	b.n	8001a2a <_free_r+0x22>
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	1821      	adds	r1, r4, r0
 8001a80:	428b      	cmp	r3, r1
 8001a82:	bf01      	itttt	eq
 8001a84:	6819      	ldreq	r1, [r3, #0]
 8001a86:	685b      	ldreq	r3, [r3, #4]
 8001a88:	1809      	addeq	r1, r1, r0
 8001a8a:	6021      	streq	r1, [r4, #0]
 8001a8c:	6063      	str	r3, [r4, #4]
 8001a8e:	6054      	str	r4, [r2, #4]
 8001a90:	e7cb      	b.n	8001a2a <_free_r+0x22>
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	200000ac 	.word	0x200000ac

08001a98 <_realloc_r>:
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	4607      	mov	r7, r0
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	460e      	mov	r6, r1
 8001aa0:	b921      	cbnz	r1, 8001aac <_realloc_r+0x14>
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001aa8:	f7ff bc10 	b.w	80012cc <_malloc_r>
 8001aac:	b922      	cbnz	r2, 8001ab8 <_realloc_r+0x20>
 8001aae:	f7ff ffab 	bl	8001a08 <_free_r>
 8001ab2:	4625      	mov	r5, r4
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab8:	f000 f814 	bl	8001ae4 <_malloc_usable_size_r>
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d20f      	bcs.n	8001ae0 <_realloc_r+0x48>
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f7ff fc02 	bl	80012cc <_malloc_r>
 8001ac8:	4605      	mov	r5, r0
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d0f2      	beq.n	8001ab4 <_realloc_r+0x1c>
 8001ace:	4631      	mov	r1, r6
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	f7ff ff65 	bl	80019a0 <memcpy>
 8001ad6:	4631      	mov	r1, r6
 8001ad8:	4638      	mov	r0, r7
 8001ada:	f7ff ff95 	bl	8001a08 <_free_r>
 8001ade:	e7e9      	b.n	8001ab4 <_realloc_r+0x1c>
 8001ae0:	4635      	mov	r5, r6
 8001ae2:	e7e7      	b.n	8001ab4 <_realloc_r+0x1c>

08001ae4 <_malloc_usable_size_r>:
 8001ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ae8:	1f18      	subs	r0, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bfbc      	itt	lt
 8001aee:	580b      	ldrlt	r3, [r1, r0]
 8001af0:	18c0      	addlt	r0, r0, r3
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <_sbrk+0x14>)
 8001af6:	4905      	ldr	r1, [pc, #20]	; (8001b0c <_sbrk+0x18>)
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf08      	it	eq
 8001afe:	460b      	moveq	r3, r1
 8001b00:	4418      	add	r0, r3
 8001b02:	6010      	str	r0, [r2, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	4770      	bx	lr
 8001b08:	200000b8 	.word	0x200000b8
 8001b0c:	200000c0 	.word	0x200000c0

08001b10 <_init>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr

08001b1c <_fini>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr
