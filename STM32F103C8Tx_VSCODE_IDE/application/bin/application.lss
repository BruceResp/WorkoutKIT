
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000eac 	.word	0x08000eac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000eac 	.word	0x08000eac

0800014c <main>:
// } 
 
// FILE __stdout;

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// uint8_t MID;
	// uint16_t DID;
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
	Bsp_Init();
 8000150:	f000 f929 	bl	80003a6 <Bsp_Init>
	// {
	// 	GUI_Test();
	// 	GUI_CLEAR_SCREEN();
	// }
	// u32 i =0,sum=0;
	while (1)
 8000154:	e7fe      	b.n	8000154 <main+0x8>

08000156 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000156:	b480      	push	{r7}
 8000158:	af00      	add	r7, sp, #0
}
 800015a:	bf00      	nop
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr

08000162 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000162:	b480      	push	{r7}
 8000164:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000166:	e7fe      	b.n	8000166 <HardFault_Handler+0x4>

08000168 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800016c:	e7fe      	b.n	800016c <MemManage_Handler+0x4>

0800016e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800016e:	b480      	push	{r7}
 8000170:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000172:	e7fe      	b.n	8000172 <BusFault_Handler+0x4>

08000174 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000178:	e7fe      	b.n	8000178 <UsageFault_Handler+0x4>

0800017a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800017a:	b480      	push	{r7}
 800017c:	af00      	add	r7, sp, #0
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr

08000186 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000186:	b480      	push	{r7}
 8000188:	af00      	add	r7, sp, #0
}
 800018a:	bf00      	nop
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000192:	b480      	push	{r7}
 8000194:	af00      	add	r7, sp, #0
}
 8000196:	bf00      	nop
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001b0:	4b15      	ldr	r3, [pc, #84]	; (8000208 <SystemInit+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a14      	ldr	r2, [pc, #80]	; (8000208 <SystemInit+0x5c>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001bc:	4b12      	ldr	r3, [pc, #72]	; (8000208 <SystemInit+0x5c>)
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	4911      	ldr	r1, [pc, #68]	; (8000208 <SystemInit+0x5c>)
 80001c2:	4b12      	ldr	r3, [pc, #72]	; (800020c <SystemInit+0x60>)
 80001c4:	4013      	ands	r3, r2
 80001c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <SystemInit+0x5c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a0e      	ldr	r2, [pc, #56]	; (8000208 <SystemInit+0x5c>)
 80001ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <SystemInit+0x5c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <SystemInit+0x5c>)
 80001de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <SystemInit+0x5c>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	4a07      	ldr	r2, [pc, #28]	; (8000208 <SystemInit+0x5c>)
 80001ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <SystemInit+0x5c>)
 80001f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001f6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80001f8:	f000 f80c 	bl	8000214 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <SystemInit+0x64>)
 80001fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000202:	609a      	str	r2, [r3, #8]
#endif 
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40021000 	.word	0x40021000
 800020c:	f8ff0000 	.word	0xf8ff0000
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000218:	f000 f802 	bl	8000220 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}

08000220 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800022e:	4b3a      	ldr	r3, [pc, #232]	; (8000318 <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a39      	ldr	r2, [pc, #228]	; (8000318 <SetSysClockTo72+0xf8>)
 8000234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000238:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800023a:	4b37      	ldr	r3, [pc, #220]	; (8000318 <SetSysClockTo72+0xf8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <SetSysClockTo72+0x38>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000256:	d1f0      	bne.n	800023a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000258:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <SetSysClockTo72+0xf8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000264:	2301      	movs	r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	e001      	b.n	800026e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d14b      	bne.n	800030c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000274:	4b29      	ldr	r3, [pc, #164]	; (800031c <SetSysClockTo72+0xfc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a28      	ldr	r2, [pc, #160]	; (800031c <SetSysClockTo72+0xfc>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000280:	4b26      	ldr	r3, [pc, #152]	; (800031c <SetSysClockTo72+0xfc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a25      	ldr	r2, [pc, #148]	; (800031c <SetSysClockTo72+0xfc>)
 8000286:	f023 0303 	bic.w	r3, r3, #3
 800028a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <SetSysClockTo72+0xfc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a22      	ldr	r2, [pc, #136]	; (800031c <SetSysClockTo72+0xfc>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <SetSysClockTo72+0xf8>)
 800029a:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <SetSysClockTo72+0xf8>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <SetSysClockTo72+0xf8>)
 80002a2:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <SetSysClockTo72+0xf8>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <SetSysClockTo72+0xf8>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <SetSysClockTo72+0xf8>)
 80002ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <SetSysClockTo72+0xf8>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <SetSysClockTo72+0xf8>)
 80002ba:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80002be:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <SetSysClockTo72+0xf8>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <SetSysClockTo72+0xf8>)
 80002c6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80002ca:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <SetSysClockTo72+0xf8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <SetSysClockTo72+0xf8>)
 80002d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002d8:	bf00      	nop
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <SetSysClockTo72+0xf8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <SetSysClockTo72+0xf8>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <SetSysClockTo72+0xf8>)
 80002ec:	f023 0303 	bic.w	r3, r3, #3
 80002f0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <SetSysClockTo72+0xf8>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <SetSysClockTo72+0xf8>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002fe:	bf00      	nop
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <SetSysClockTo72+0xf8>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	f003 030c 	and.w	r3, r3, #12
 8000308:	2b08      	cmp	r3, #8
 800030a:	d1f9      	bne.n	8000300 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	40022000 	.word	0x40022000

08000320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000320:	f7ff ff44 	bl	80001ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480b      	ldr	r0, [pc, #44]	; (8000354 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000326:	490c      	ldr	r1, [pc, #48]	; (8000358 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000328:	4a0c      	ldr	r2, [pc, #48]	; (800035c <LoopFillZerobss+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800033c:	4c09      	ldr	r4, [pc, #36]	; (8000364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800034a:	f000 fd8b 	bl	8000e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff fefd 	bl	800014c <main>
  bx lr
 8000352:	4770      	bx	lr
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800035c:	08000ecc 	.word	0x08000ecc
  ldr r2, =_sbss
 8000360:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000364:	20000074 	.word	0x20000074

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>

0800036a <__NOP>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '采用阻塞方式的延时' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	// SysTick->LOAD = 72 * xus;				//设置定时器重装值
	// SysTick->VAL = 0x00;					//清空当前计数值
	// SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
	// while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
	// SysTick->CTRL = 0x00000004;				//关闭定时器
    __IO uint32_t us= xus * 2;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
    while (us > 0)
 8000386:	e006      	b.n	8000396 <Bsp_DelayUS+0x1e>
    {
        us--;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b01      	subs	r3, #1
 800038c:	60fb      	str	r3, [r7, #12]
        __NOP();
 800038e:	f7ff ffec 	bl	800036a <__NOP>
        __NOP();
 8000392:	f7ff ffea 	bl	800036a <__NOP>
    while (us > 0)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1f5      	bne.n	8000388 <Bsp_DelayUS+0x10>
    }
    
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 80003aa:	f000 f827 	bl	80003fc <Bsp_GPIO_Init>
	//Bsp_SPI_Init();	
    //Bsp_Flash_Init();
	Bsp_USART_Init();
 80003ae:	f000 f881 	bl	80004b4 <Bsp_USART_Init>
	//Bsp_I2C_Init();
    
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 80003bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003c0:	f000 f98a 	bl	80006d8 <DMA_GetFlagStatus>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d012      	beq.n	80003f0 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 80003ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003ce:	f000 f9ab 	bl	8000728 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f7ff ffd0 	bl	8000378 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 80003d8:	2101      	movs	r1, #1
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <DMA1_Channel6_IRQHandler+0x3c>)
 80003dc:	f000 fa7a 	bl	80008d4 <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 80003e0:	2101      	movs	r1, #1
 80003e2:	4804      	ldr	r0, [pc, #16]	; (80003f4 <DMA1_Channel6_IRQHandler+0x3c>)
 80003e4:	f000 fa95 	bl	8000912 <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 80003e8:	2100      	movs	r1, #0
 80003ea:	4803      	ldr	r0, [pc, #12]	; (80003f8 <DMA1_Channel6_IRQHandler+0x40>)
 80003ec:	f000 f958 	bl	80006a0 <DMA_Cmd>
	}
}	
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40005400 	.word	0x40005400
 80003f8:	4002006c 	.word	0x4002006c

080003fc <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉
GPIO_InitTypeDef GPIO_InitStructure;

void Bsp_GPIO_Init(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	f244 0004 	movw	r0, #16388	; 0x4004
 8000406:	f000 fb59 	bl	8000abc <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 800040a:	2101      	movs	r1, #1
 800040c:	2009      	movs	r0, #9
 800040e:	f000 fb55 	bl	8000abc <RCC_APB2PeriphClockCmd>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <Bsp_GPIO_Init+0xa0>)
 8000414:	2218      	movs	r2, #24
 8000416:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <Bsp_GPIO_Init+0xa0>)
 800041a:	2203      	movs	r2, #3
 800041c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <Bsp_GPIO_Init+0xa0>)
 8000420:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000424:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <Bsp_GPIO_Init+0xa4>)
 8000428:	2248      	movs	r2, #72	; 0x48
 800042a:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <Bsp_GPIO_Init+0xa4>)
 800042e:	2203      	movs	r2, #3
 8000430:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <Bsp_GPIO_Init+0xa4>)
 8000434:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000438:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <Bsp_GPIO_Init+0xa8>)
 800043c:	2210      	movs	r2, #16
 800043e:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <Bsp_GPIO_Init+0xa8>)
 8000442:	2203      	movs	r2, #3
 8000444:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <Bsp_GPIO_Init+0xa8>)
 8000448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800044c:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 800044e:	4915      	ldr	r1, [pc, #84]	; (80004a4 <Bsp_GPIO_Init+0xa8>)
 8000450:	4815      	ldr	r0, [pc, #84]	; (80004a8 <Bsp_GPIO_Init+0xac>)
 8000452:	f000 f983 	bl	800075c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8000456:	4911      	ldr	r1, [pc, #68]	; (800049c <Bsp_GPIO_Init+0xa0>)
 8000458:	4813      	ldr	r0, [pc, #76]	; (80004a8 <Bsp_GPIO_Init+0xac>)
 800045a:	f000 f97f 	bl	800075c <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 800045e:	4910      	ldr	r1, [pc, #64]	; (80004a0 <Bsp_GPIO_Init+0xa4>)
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <Bsp_GPIO_Init+0xac>)
 8000462:	f000 f97b 	bl	800075c <GPIO_Init>
    #endif

    #ifdef BSP_USART_SUPPORT

        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 8000468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046c:	801a      	strh	r2, [r3, #0]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 8000470:	2203      	movs	r2, #3
 8000472:	709a      	strb	r2, [r3, #2]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 8000476:	2218      	movs	r2, #24
 8000478:	70da      	strb	r2, [r3, #3]
        GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.9
 800047a:	490c      	ldr	r1, [pc, #48]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <Bsp_GPIO_Init+0xb4>)
 800047e:	f000 f96d 	bl	800075c <GPIO_Init>
        
        //USART1_RX	  GPIOA.10初始化
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 8000484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000488:	801a      	strh	r2, [r3, #0]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 800048c:	2204      	movs	r2, #4
 800048e:	70da      	strb	r2, [r3, #3]
        GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.10 
 8000490:	4906      	ldr	r1, [pc, #24]	; (80004ac <Bsp_GPIO_Init+0xb0>)
 8000492:	4807      	ldr	r0, [pc, #28]	; (80004b0 <Bsp_GPIO_Init+0xb4>)
 8000494:	f000 f962 	bl	800075c <GPIO_Init>
        

    #endif

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000030 	.word	0x20000030
 80004a0:	20000038 	.word	0x20000038
 80004a4:	20000034 	.word	0x20000034
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	2000003c 	.word	0x2000003c
 80004b0:	40010800 	.word	0x40010800

080004b4 <Bsp_USART_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_USART_Init(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = 115200;
 80004ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004be:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80004c0:	2300      	movs	r3, #0
 80004c2:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1; 
 80004c4:	2300      	movs	r3, #0
 80004c6:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No; 
 80004c8:	2300      	movs	r3, #0
 80004ca:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
 80004cc:	2300      	movs	r3, #0
 80004ce:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; 
 80004d0:	230c      	movs	r3, #12
 80004d2:	827b      	strh	r3, [r7, #18]
    USART_Init(BSP_USART, &USART_InitStructure);
 80004d4:	f107 0308 	add.w	r3, r7, #8
 80004d8:	4619      	mov	r1, r3
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <Bsp_USART_Init+0x68>)
 80004dc:	f000 fb0c 	bl	8000af8 <USART_Init>

    //USART_DeInit(BSP_USART);
    USART_ITConfig(BSP_USART, USART_IT_RXNE, ENABLE);//开启串口接受中断
 80004e0:	2201      	movs	r2, #1
 80004e2:	f240 5125 	movw	r1, #1317	; 0x525
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <Bsp_USART_Init+0x68>)
 80004e8:	f000 fbdf 	bl	8000caa <USART_ITConfig>

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80004ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80004f0:	f000 f862 	bl	80005b8 <NVIC_PriorityGroupConfig>

    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80004f4:	2325      	movs	r3, #37	; 0x25
 80004f6:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1 ;//抢占优先级3
 80004f8:	2301      	movs	r3, #1
 80004fa:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;		//子优先级3
 80004fc:	2301      	movs	r3, #1
 80004fe:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f868 	bl	80005dc <NVIC_Init>
    
    USART_Cmd(BSP_USART, ENABLE); 
 800050c:	2101      	movs	r1, #1
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <Bsp_USART_Init+0x68>)
 8000510:	f000 fbac 	bl	8000c6c <USART_Cmd>
}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013800 	.word	0x40013800

08000520 <Bsp_USART_Send_Byte>:

void Bsp_USART_Send_Byte(uint8_t Byte){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART1, Byte);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <Bsp_USART_Send_Byte+0x30>)
 8000532:	f000 fc01 	bl	8000d38 <USART_SendData>
	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8000536:	bf00      	nop
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <Bsp_USART_Send_Byte+0x30>)
 800053c:	f000 fc1c 	bl	8000d78 <USART_GetFlagStatus>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <Bsp_USART_Send_Byte+0x18>
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013800 	.word	0x40013800

08000554 <USART1_IRQHandler>:
	{
		Bsp_USART_Send_Byte(String[i]);
	}
}

void USART1_IRQHandler(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	u8 Res;

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
 800055a:	f240 5125 	movw	r1, #1317	; 0x525
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <USART1_IRQHandler+0x58>)
 8000560:	f000 fc25 	bl	8000dae <USART_GetITStatus>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d01b      	beq.n	80005a2 <USART1_IRQHandler+0x4e>
    {
        
        Res =USART_ReceiveData(USART1);	//读取接收到的数据
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <USART1_IRQHandler+0x58>)
 800056c:	f000 fbf5 	bl	8000d5a <USART_ReceiveData>
 8000570:	4603      	mov	r3, r0
 8000572:	71fb      	strb	r3, [r7, #7]
        TestPort[i] = Res;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <USART1_IRQHandler+0x5c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <USART1_IRQHandler+0x60>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	5453      	strb	r3, [r2, r1]
        i++;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <USART1_IRQHandler+0x5c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <USART1_IRQHandler+0x5c>)
 800058a:	701a      	strb	r2, [r3, #0]
        if (i == 49)
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <USART1_IRQHandler+0x5c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b31      	cmp	r3, #49	; 0x31
 8000592:	d102      	bne.n	800059a <USART1_IRQHandler+0x46>
        {
            i = 0;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <USART1_IRQHandler+0x5c>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
        }
        
        //USART_ClearITPendingBit(USART1, USART_IT_RXNE);
        Bsp_USART_Send_Byte(Res);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffbf 	bl	8000520 <Bsp_USART_Send_Byte>
        //printf("Res");
    } 
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40013800 	.word	0x40013800
 80005b0:	20000072 	.word	0x20000072
 80005b4:	20000040 	.word	0x20000040

080005b8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80005c0:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <NVIC_PriorityGroupConfig+0x20>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	60d3      	str	r3, [r2, #12]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	78db      	ldrb	r3, [r3, #3]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d03a      	beq.n	800066e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <NVIC_Init+0xbc>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	43db      	mvns	r3, r3
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	f003 0307 	and.w	r3, r3, #7
 8000604:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	f1c3 0304 	rsb	r3, r3, #4
 800060c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa22 f303 	lsr.w	r3, r2, r3
 8000616:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	461a      	mov	r2, r3
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4013      	ands	r3, r2
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4313      	orrs	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <NVIC_Init+0xc0>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	6979      	ldr	r1, [r7, #20]
 8000644:	b2c9      	uxtb	r1, r1
 8000646:	4413      	add	r3, r2
 8000648:	460a      	mov	r2, r1
 800064a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000656:	4911      	ldr	r1, [pc, #68]	; (800069c <NVIC_Init+0xc0>)
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	0952      	lsrs	r2, r2, #5
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000662:	2201      	movs	r2, #1
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000668:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800066c:	e00f      	b.n	800068e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <NVIC_Init+0xc0>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	0952      	lsrs	r2, r2, #5
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000682:	2201      	movs	r2, #1
 8000684:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000686:	f100 0320 	add.w	r3, r0, #32
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	e000e100 	.word	0xe000e100

080006a0 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f043 0201 	orr.w	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 80006be:	e006      	b.n	80006ce <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80006c8:	4013      	ands	r3, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <DMA_GetFlagStatus+0x48>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e002      	b.n	8000700 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <DMA_GetFlagStatus+0x4c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4013      	ands	r3, r2
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e001      	b.n	8000714 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40020400 	.word	0x40020400
 8000724:	40020000 	.word	0x40020000

08000728 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <DMA_ClearFlag+0x2c>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000740:	e002      	b.n	8000748 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <DMA_ClearFlag+0x30>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6053      	str	r3, [r2, #4]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40020400 	.word	0x40020400
 8000758:	40020000 	.word	0x40020000

0800075c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	78db      	ldrb	r3, [r3, #3]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	f003 0310 	and.w	r3, r3, #16
 8000790:	2b00      	cmp	r3, #0
 8000792:	d005      	beq.n	80007a0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	461a      	mov	r2, r3
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	4313      	orrs	r3, r2
 800079e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d044      	beq.n	8000834 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	e038      	b.n	8000828 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80007b6:	2201      	movs	r2, #1
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d126      	bne.n	8000822 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007da:	220f      	movs	r2, #15
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	4013      	ands	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	2b28      	cmp	r3, #40	; 0x28
 8000802:	d105      	bne.n	8000810 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000804:	2201      	movs	r2, #1
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	409a      	lsls	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	e008      	b.n	8000822 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	78db      	ldrb	r3, [r3, #3]
 8000814:	2b48      	cmp	r3, #72	; 0x48
 8000816:	d104      	bne.n	8000822 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000818:	2201      	movs	r2, #1
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	409a      	lsls	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	3301      	adds	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2b07      	cmp	r3, #7
 800082c:	d9c3      	bls.n	80007b6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d946      	bls.n	80008ca <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	e03a      	b.n	80008be <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	3308      	adds	r3, #8
 800084c:	2201      	movs	r2, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d127      	bne.n	80008b8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800086e:	220f      	movs	r2, #15
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	43db      	mvns	r3, r3
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	4013      	ands	r3, r2
 8000880:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4313      	orrs	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	78db      	ldrb	r3, [r3, #3]
 8000894:	2b28      	cmp	r3, #40	; 0x28
 8000896:	d105      	bne.n	80008a4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	3308      	adds	r3, #8
 800089c:	2201      	movs	r2, #1
 800089e:	409a      	lsls	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	2b48      	cmp	r3, #72	; 0x48
 80008aa:	d105      	bne.n	80008b8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	3308      	adds	r3, #8
 80008b0:	2201      	movs	r2, #1
 80008b2:	409a      	lsls	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	3301      	adds	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	d9c1      	bls.n	8000848 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	605a      	str	r2, [r3, #4]
  }
}
 80008ca:	bf00      	nop
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80008f6:	e007      	b.n	8000908 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000902:	b29a      	uxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	801a      	strh	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000934:	e007      	b.n	8000946 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	801a      	strh	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 030c 	and.w	r3, r3, #12
 8000970:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b08      	cmp	r3, #8
 8000976:	d011      	beq.n	800099c <RCC_GetClocksFreq+0x4c>
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d83a      	bhi.n	80009f4 <RCC_GetClocksFreq+0xa4>
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <RCC_GetClocksFreq+0x3c>
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d004      	beq.n	8000994 <RCC_GetClocksFreq+0x44>
 800098a:	e033      	b.n	80009f4 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a47      	ldr	r2, [pc, #284]	; (8000aac <RCC_GetClocksFreq+0x15c>)
 8000990:	601a      	str	r2, [r3, #0]
      break;
 8000992:	e033      	b.n	80009fc <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a45      	ldr	r2, [pc, #276]	; (8000aac <RCC_GetClocksFreq+0x15c>)
 8000998:	601a      	str	r2, [r3, #0]
      break;
 800099a:	e02f      	b.n	80009fc <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800099c:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80009a4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ae:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3302      	adds	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d106      	bne.n	80009cc <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4a3b      	ldr	r2, [pc, #236]	; (8000ab0 <RCC_GetClocksFreq+0x160>)
 80009c2:	fb03 f202 	mul.w	r2, r3, r2
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80009ca:	e017      	b.n	80009fc <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80009cc:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4a35      	ldr	r2, [pc, #212]	; (8000ab0 <RCC_GetClocksFreq+0x160>)
 80009dc:	fb03 f202 	mul.w	r2, r3, r2
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
      break;
 80009e4:	e00a      	b.n	80009fc <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4a30      	ldr	r2, [pc, #192]	; (8000aac <RCC_GetClocksFreq+0x15c>)
 80009ea:	fb03 f202 	mul.w	r2, r3, r2
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
      break;
 80009f2:	e003      	b.n	80009fc <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <RCC_GetClocksFreq+0x15c>)
 80009f8:	601a      	str	r2, [r3, #0]
      break;
 80009fa:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a04:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000a0c:	4a29      	ldr	r2, [pc, #164]	; (8000ab4 <RCC_GetClocksFreq+0x164>)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	40da      	lsrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a2c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <RCC_GetClocksFreq+0x164>)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	40da      	lsrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a54:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	0adb      	lsrs	r3, r3, #11
 8000a5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000a5c:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <RCC_GetClocksFreq+0x164>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	40da      	lsrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <RCC_GetClocksFreq+0x158>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	0b9b      	lsrs	r3, r3, #14
 8000a82:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <RCC_GetClocksFreq+0x168>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	611a      	str	r2, [r3, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	007a1200 	.word	0x007a1200
 8000ab0:	003d0900 	.word	0x003d0900
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000010 	.word	0x20000010

08000abc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ada:	e006      	b.n	8000aea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ade:	699a      	ldr	r2, [r3, #24]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4903      	ldr	r1, [pc, #12]	; (8000af4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	618b      	str	r3, [r1, #24]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000

08000af8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8a1b      	ldrh	r3, [r3, #16]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b24:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	88db      	ldrh	r3, [r3, #6]
 8000b30:	461a      	mov	r2, r3
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	4313      	orrs	r3, r2
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	899b      	ldrh	r3, [r3, #12]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b4a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	889a      	ldrh	r2, [r3, #4]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	891b      	ldrh	r3, [r3, #8]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	8a9b      	ldrh	r3, [r3, #20]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b80:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000b84:	4013      	ands	r3, r2
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	899b      	ldrh	r3, [r3, #12]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4313      	orrs	r3, r2
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fed5 	bl	8000950 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <USART_Init+0x16c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d102      	bne.n	8000bb4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb2:	e001      	b.n	8000bb8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	899b      	ldrh	r3, [r3, #12]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da0c      	bge.n	8000bde <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009a      	lsls	r2, r3, #2
 8000bce:	441a      	add	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
 8000bdc:	e00b      	b.n	8000bf6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	009a      	lsls	r2, r3, #2
 8000be8:	441a      	add	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <USART_Init+0x170>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	899b      	ldrh	r3, [r3, #12]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da0c      	bge.n	8000c3a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	3332      	adds	r3, #50	; 0x32
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <USART_Init+0x170>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	095b      	lsrs	r3, r3, #5
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c34:	4313      	orrs	r3, r2
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c38:	e00b      	b.n	8000c52 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	3332      	adds	r3, #50	; 0x32
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <USART_Init+0x170>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	811a      	strh	r2, [r3, #8]
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013800 	.word	0x40013800
 8000c68:	51eb851f 	.word	0x51eb851f

08000c6c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	899b      	ldrh	r3, [r3, #12]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000c8e:	e007      	b.n	8000ca0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	899b      	ldrh	r3, [r3, #12]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	819a      	strh	r2, [r3, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b087      	sub	sp, #28
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d103      	bne.n	8000cf8 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d103      	bne.n	8000d06 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3310      	adds	r3, #16
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e002      	b.n	8000d0c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3314      	adds	r3, #20
 8000d0a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000d0c:	787b      	ldrb	r3, [r7, #1]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d1e:	e006      	b.n	8000d2e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	43da      	mvns	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	809a      	strh	r2, [r3, #4]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d6c:	b29b      	uxth	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4013      	ands	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b087      	sub	sp, #28
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	899b      	ldrh	r3, [r3, #12]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	461a      	mov	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	4013      	ands	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e011      	b.n	8000e20 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d107      	bne.n	8000e12 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	8a1b      	ldrh	r3, [r3, #16]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e006      	b.n	8000e20 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	8a9b      	ldrh	r3, [r3, #20]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <USART_GetITStatus+0xa4>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	74fb      	strb	r3, [r7, #19]
 8000e50:	e001      	b.n	8000e56 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <__libc_init_array>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	2600      	movs	r6, #0
 8000e68:	4d0c      	ldr	r5, [pc, #48]	; (8000e9c <__libc_init_array+0x38>)
 8000e6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ea0 <__libc_init_array+0x3c>)
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	10a4      	asrs	r4, r4, #2
 8000e70:	42a6      	cmp	r6, r4
 8000e72:	d109      	bne.n	8000e88 <__libc_init_array+0x24>
 8000e74:	f000 f81a 	bl	8000eac <_init>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	4d0a      	ldr	r5, [pc, #40]	; (8000ea4 <__libc_init_array+0x40>)
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <__libc_init_array+0x44>)
 8000e7e:	1b64      	subs	r4, r4, r5
 8000e80:	10a4      	asrs	r4, r4, #2
 8000e82:	42a6      	cmp	r6, r4
 8000e84:	d105      	bne.n	8000e92 <__libc_init_array+0x2e>
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8c:	4798      	blx	r3
 8000e8e:	3601      	adds	r6, #1
 8000e90:	e7ee      	b.n	8000e70 <__libc_init_array+0xc>
 8000e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e96:	4798      	blx	r3
 8000e98:	3601      	adds	r6, #1
 8000e9a:	e7f2      	b.n	8000e82 <__libc_init_array+0x1e>
 8000e9c:	08000ec4 	.word	0x08000ec4
 8000ea0:	08000ec4 	.word	0x08000ec4
 8000ea4:	08000ec4 	.word	0x08000ec4
 8000ea8:	08000ec8 	.word	0x08000ec8

08000eac <_init>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr

08000eb8 <_fini>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr
