
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080013e8 	.word	0x080013e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080013e8 	.word	0x080013e8

0800014c <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
	Bsp_Init();
 8000152:	f000 fbde 	bl	8000912 <Bsp_Init>
 	GUI_SPI_Init(); //初始化测试下来要4s钟有点长
 8000156:	f000 f89b 	bl	8000290 <GUI_SPI_Init>
	System_Init();
 800015a:	f000 fab5 	bl	80006c8 <System_Init>
	// for (int64_t i = 0; i < 10000; i++)
	// {
	// 	GUI_Test();
	// 	GUI_CLEAR_SCREEN();
	// }
	u32 i =0,sum=0;
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
 8000162:	2300      	movs	r3, #0
 8000164:	60bb      	str	r3, [r7, #8]
	while (1)
	{	
		GUI_Test();
 8000166:	f000 fa3d 	bl	80005e4 <GUI_Test>
		i++;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3301      	adds	r3, #1
 800016e:	60fb      	str	r3, [r7, #12]
		u32 j = 10;
 8000170:	230a      	movs	r3, #10
 8000172:	607b      	str	r3, [r7, #4]
		u8 a = 1;
 8000174:	2301      	movs	r3, #1
 8000176:	70fb      	strb	r3, [r7, #3]
		while (i%j != i)//先确定最大值
 8000178:	e005      	b.n	8000186 <main+0x3a>
		{
			j *= 10;
 800017a:	687a      	ldr	r2, [r7, #4]
 800017c:	4613      	mov	r3, r2
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	607b      	str	r3, [r7, #4]
		while (i%j != i)//先确定最大值
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	687a      	ldr	r2, [r7, #4]
 800018a:	fbb3 f2f2 	udiv	r2, r3, r2
 800018e:	6879      	ldr	r1, [r7, #4]
 8000190:	fb01 f202 	mul.w	r2, r1, r2
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	429a      	cmp	r2, r3
 800019a:	d1ee      	bne.n	800017a <main+0x2e>
		}
		sum = i;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	60bb      	str	r3, [r7, #8]
		while (j >=10)
 80001a0:	e01f      	b.n	80001e2 <main+0x96>
		{
			a += 8;
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	3308      	adds	r3, #8
 80001a6:	70fb      	strb	r3, [r7, #3]
			j /= 10;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a10      	ldr	r2, [pc, #64]	; (80001ec <main+0xa0>)
 80001ac:	fba2 2303 	umull	r2, r3, r2, r3
 80001b0:	08db      	lsrs	r3, r3, #3
 80001b2:	607b      	str	r3, [r7, #4]
			GUI_SPI_Display_Char_ASCII(0,80+a,sum/j+48,0);
 80001b4:	78fb      	ldrb	r3, [r7, #3]
 80001b6:	3350      	adds	r3, #80	; 0x50
 80001b8:	b2d9      	uxtb	r1, r3
 80001ba:	68ba      	ldr	r2, [r7, #8]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	fbb2 f3f3 	udiv	r3, r2, r3
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	3330      	adds	r3, #48	; 0x30
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	2300      	movs	r3, #0
 80001ca:	2000      	movs	r0, #0
 80001cc:	f000 f8ba 	bl	8000344 <GUI_SPI_Display_Char_ASCII>
			sum = sum%j;//去掉最高位
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80001d8:	6879      	ldr	r1, [r7, #4]
 80001da:	fb01 f202 	mul.w	r2, r1, r2
 80001de:	1a9b      	subs	r3, r3, r2
 80001e0:	60bb      	str	r3, [r7, #8]
		while (j >=10)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b09      	cmp	r3, #9
 80001e6:	d8dc      	bhi.n	80001a2 <main+0x56>
	{	
 80001e8:	e7bd      	b.n	8000166 <main+0x1a>
 80001ea:	bf00      	nop
 80001ec:	cccccccd 	.word	0xcccccccd

080001f0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000200:	e7fe      	b.n	8000200 <HardFault_Handler+0x4>

08000202 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000202:	b480      	push	{r7}
 8000204:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000206:	e7fe      	b.n	8000206 <MemManage_Handler+0x4>

08000208 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800020c:	e7fe      	b.n	800020c <BusFault_Handler+0x4>

0800020e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000212:	e7fe      	b.n	8000212 <UsageFault_Handler+0x4>

08000214 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 800024a:	2300      	movs	r3, #0
 800024c:	71bb      	strb	r3, [r7, #6]
 800024e:	e013      	b.n	8000278 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 8000250:	2300      	movs	r3, #0
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	e00a      	b.n	800026c <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 8000256:	79ba      	ldrb	r2, [r7, #6]
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	490c      	ldr	r1, [pc, #48]	; (800028c <GUI_CLEAR_SCREEN+0x48>)
 800025c:	01d2      	lsls	r2, r2, #7
 800025e:	440a      	add	r2, r1
 8000260:	4413      	add	r3, r2
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	3301      	adds	r3, #1
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b80      	cmp	r3, #128	; 0x80
 8000270:	d9f1      	bls.n	8000256 <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	3301      	adds	r3, #1
 8000276:	71bb      	strb	r3, [r7, #6]
 8000278:	79bb      	ldrb	r3, [r7, #6]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d9e8      	bls.n	8000250 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	20000080 	.word	0x20000080

08000290 <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	Bsp_DelayMS(1000); //1000
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 fb28 	bl	80008ec <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 800029c:	f000 fca2 	bl	8000be4 <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(100);  //100
 80002a0:	2064      	movs	r0, #100	; 0x64
 80002a2:	f000 fb23 	bl	80008ec <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 80002a6:	f000 fca7 	bl	8000bf8 <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 80002aa:	20ae      	movs	r0, #174	; 0xae
 80002ac:	f000 fc68 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 80002b0:	20d5      	movs	r0, #213	; 0xd5
 80002b2:	f000 fc65 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xf0);//[3:0],分频因子;[7:4],震荡频率
 80002b6:	20f0      	movs	r0, #240	; 0xf0
 80002b8:	f000 fc62 	bl	8000b80 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xd9);//设置时钟分频因子,震荡频率
 80002bc:	20d9      	movs	r0, #217	; 0xd9
 80002be:	f000 fc5f 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x11);//[3:0],分频因子;[7:4],震荡频率
 80002c2:	2011      	movs	r0, #17
 80002c4:	f000 fc5c 	bl	8000b80 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x81);//设置对比度
 80002c8:	2081      	movs	r0, #129	; 0x81
 80002ca:	f000 fc59 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 80002ce:	207f      	movs	r0, #127	; 0x7f
 80002d0:	f000 fc56 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 80002d4:	208d      	movs	r0, #141	; 0x8d
 80002d6:	f000 fc53 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 80002da:	2014      	movs	r0, #20
 80002dc:	f000 fc50 	bl	8000b80 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 80002e0:	2020      	movs	r0, #32
 80002e2:	f000 fc4d 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 fc4a 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 80002ec:	2021      	movs	r0, #33	; 0x21
 80002ee:	f000 fc47 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 fc44 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 80002f8:	207f      	movs	r0, #127	; 0x7f
 80002fa:	f000 fc41 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 80002fe:	2022      	movs	r0, #34	; 0x22
 8000300:	f000 fc3e 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fc3b 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 800030a:	2007      	movs	r0, #7
 800030c:	f000 fc38 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 8000310:	20c9      	movs	r0, #201	; 0xc9
 8000312:	f000 fc35 	bl	8000b80 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 8000316:	20a1      	movs	r0, #161	; 0xa1
 8000318:	f000 fc32 	bl	8000b80 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 800031c:	20a4      	movs	r0, #164	; 0xa4
 800031e:	f000 fc2f 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 8000322:	20a6      	movs	r0, #166	; 0xa6
 8000324:	f000 fc2c 	bl	8000b80 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 8000328:	20af      	movs	r0, #175	; 0xaf
 800032a:	f000 fc29 	bl	8000b80 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 800032e:	2056      	movs	r0, #86	; 0x56
 8000330:	f000 fc26 	bl	8000b80 <Bsp_SPI_Send_CMD>
   Bsp_DelayMS(100);
 8000334:	2064      	movs	r0, #100	; 0x64
 8000336:	f000 fad9 	bl	80008ec <Bsp_DelayMS>
   Bsp_SPI_DMA_Init();//DMA初始化
 800033a:	f000 faf5 	bl	8000928 <Bsp_SPI_DMA_Init>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <GUI_SPI_Display_Char_ASCII>:
*函数功能:'GUI 显示 字符 ASCII格式' 
*参    数:''  
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Display_Char_ASCII(u8 Y,u8 X,char ascii,u8 size)
{
 8000344:	b490      	push	{r4, r7}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4604      	mov	r4, r0
 800034c:	4608      	mov	r0, r1
 800034e:	4611      	mov	r1, r2
 8000350:	461a      	mov	r2, r3
 8000352:	4623      	mov	r3, r4
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	4603      	mov	r3, r0
 8000358:	71bb      	strb	r3, [r7, #6]
 800035a:	460b      	mov	r3, r1
 800035c:	717b      	strb	r3, [r7, #5]
 800035e:	4613      	mov	r3, r2
 8000360:	713b      	strb	r3, [r7, #4]
	u8 i=0,j=0,c=ascii;
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	2300      	movs	r3, #0
 8000368:	73bb      	strb	r3, [r7, #14]
 800036a:	797b      	ldrb	r3, [r7, #5]
 800036c:	737b      	strb	r3, [r7, #13]
	if (size==S6X8)
 800036e:	793b      	ldrb	r3, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d11f      	bne.n	80003b4 <GUI_SPI_Display_Char_ASCII+0x70>
	{
		for (i=0;i<6;i++)
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]
 8000378:	e018      	b.n	80003ac <GUI_SPI_Display_Char_ASCII+0x68>
		{
			GUI_DISPLAY_BUF[Y][X+i]=F6X8[(c-32)*6+1+i];
 800037a:	7b7b      	ldrb	r3, [r7, #13]
 800037c:	f1a3 0220 	sub.w	r2, r3, #32
 8000380:	4613      	mov	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4413      	add	r3, r2
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	18d1      	adds	r1, r2, r3
 800038e:	79fa      	ldrb	r2, [r7, #7]
 8000390:	79b8      	ldrb	r0, [r7, #6]
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	4403      	add	r3, r0
 8000396:	4821      	ldr	r0, [pc, #132]	; (800041c <GUI_SPI_Display_Char_ASCII+0xd8>)
 8000398:	5c40      	ldrb	r0, [r0, r1]
 800039a:	4921      	ldr	r1, [pc, #132]	; (8000420 <GUI_SPI_Display_Char_ASCII+0xdc>)
 800039c:	01d2      	lsls	r2, r2, #7
 800039e:	440a      	add	r2, r1
 80003a0:	4413      	add	r3, r2
 80003a2:	4602      	mov	r2, r0
 80003a4:	701a      	strb	r2, [r3, #0]
		for (i=0;i<6;i++)
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	3301      	adds	r3, #1
 80003aa:	73fb      	strb	r3, [r7, #15]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	2b05      	cmp	r3, #5
 80003b0:	d9e3      	bls.n	800037a <GUI_SPI_Display_Char_ASCII+0x36>
			}
		}
	}


}
 80003b2:	e02d      	b.n	8000410 <GUI_SPI_Display_Char_ASCII+0xcc>
	else if(size==S8X16)
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d12a      	bne.n	8000410 <GUI_SPI_Display_Char_ASCII+0xcc>
		for (j=0;j<2;j++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	73bb      	strb	r3, [r7, #14]
 80003be:	e024      	b.n	800040a <GUI_SPI_Display_Char_ASCII+0xc6>
			for (i=0;i<8;i++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
 80003c4:	e01b      	b.n	80003fe <GUI_SPI_Display_Char_ASCII+0xba>
				GUI_DISPLAY_BUF[Y+j][X+i]=OLED_F8x16[(c-32)*8+1+i][j*8];
 80003c6:	7b7b      	ldrb	r3, [r7, #13]
 80003c8:	3b20      	subs	r3, #32
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	18d0      	adds	r0, r2, r3
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	00d9      	lsls	r1, r3, #3
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	441a      	add	r2, r3
 80003dc:	79bc      	ldrb	r4, [r7, #6]
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	4423      	add	r3, r4
 80003e2:	4c10      	ldr	r4, [pc, #64]	; (8000424 <GUI_SPI_Display_Char_ASCII+0xe0>)
 80003e4:	0100      	lsls	r0, r0, #4
 80003e6:	4420      	add	r0, r4
 80003e8:	4401      	add	r1, r0
 80003ea:	7808      	ldrb	r0, [r1, #0]
 80003ec:	490c      	ldr	r1, [pc, #48]	; (8000420 <GUI_SPI_Display_Char_ASCII+0xdc>)
 80003ee:	01d2      	lsls	r2, r2, #7
 80003f0:	440a      	add	r2, r1
 80003f2:	4413      	add	r3, r2
 80003f4:	4602      	mov	r2, r0
 80003f6:	701a      	strb	r2, [r3, #0]
			for (i=0;i<8;i++)
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	3301      	adds	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	2b07      	cmp	r3, #7
 8000402:	d9e0      	bls.n	80003c6 <GUI_SPI_Display_Char_ASCII+0x82>
		for (j=0;j<2;j++)
 8000404:	7bbb      	ldrb	r3, [r7, #14]
 8000406:	3301      	adds	r3, #1
 8000408:	73bb      	strb	r3, [r7, #14]
 800040a:	7bbb      	ldrb	r3, [r7, #14]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d9d7      	bls.n	80003c0 <GUI_SPI_Display_Char_ASCII+0x7c>
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bc90      	pop	{r4, r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	08001400 	.word	0x08001400
 8000420:	20000080 	.word	0x20000080
 8000424:	08001628 	.word	0x08001628

08000428 <GUI_SPI_Display_Graph>:
			Graph: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Display_Graph(int16_t X,int16_t Y,u8 height,u8 width,const u8 *Graph){
 8000428:	b490      	push	{r4, r7}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4604      	mov	r4, r0
 8000430:	4608      	mov	r0, r1
 8000432:	4611      	mov	r1, r2
 8000434:	461a      	mov	r2, r3
 8000436:	4623      	mov	r3, r4
 8000438:	80fb      	strh	r3, [r7, #6]
 800043a:	4603      	mov	r3, r0
 800043c:	80bb      	strh	r3, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	70bb      	strb	r3, [r7, #2]
	// 			GUI_DISPLAY_BUF[page+j+1][X+i] |= Graph[i+width*j] >>(8 - shift) ;
	// 		}
	// 	}
	// }

	uint8_t i = 0, j = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	2300      	movs	r3, #0
 800044c:	73bb      	strb	r3, [r7, #14]
	/*将图像所在区域清空*/
	//OLED_ClearArea(X, Y, Width, Height);
	
	/*遍历指定图像涉及的相关页*/
	/*(Height - 1) / 8 + 1的目的是Height / 8并向上取整*/
	for (j = 0; j < (height - 1) / 8 + 1; j ++)
 800044e:	2300      	movs	r3, #0
 8000450:	73bb      	strb	r3, [r7, #14]
 8000452:	e0b3      	b.n	80005bc <GUI_SPI_Display_Graph+0x194>
	{
		/*遍历指定图像涉及的相关列*/
		for (i = 0; i < width; i ++)
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	e0a8      	b.n	80005ac <GUI_SPI_Display_Graph+0x184>
		{
			if (X + i >= 0 && X + i <= 127)		//超出屏幕的内容不显示
 800045a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	4413      	add	r3, r2
 8000462:	2b00      	cmp	r3, #0
 8000464:	f2c0 809f 	blt.w	80005a6 <GUI_SPI_Display_Graph+0x17e>
 8000468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	4413      	add	r3, r2
 8000470:	2b7f      	cmp	r3, #127	; 0x7f
 8000472:	f300 8098 	bgt.w	80005a6 <GUI_SPI_Display_Graph+0x17e>
			{
				/*负数坐标在计算页地址和移位时需要加一个偏移*/
				Page = Y / 8;
 8000476:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	da00      	bge.n	8000480 <GUI_SPI_Display_Graph+0x58>
 800047e:	3307      	adds	r3, #7
 8000480:	10db      	asrs	r3, r3, #3
 8000482:	81bb      	strh	r3, [r7, #12]
				Shift = Y % 8;
 8000484:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000488:	425a      	negs	r2, r3
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	f002 0207 	and.w	r2, r2, #7
 8000492:	bf58      	it	pl
 8000494:	4253      	negpl	r3, r2
 8000496:	817b      	strh	r3, [r7, #10]
				if (Y < 0)
 8000498:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	da07      	bge.n	80004b0 <GUI_SPI_Display_Graph+0x88>
				{
					Page -= 1;
 80004a0:	89bb      	ldrh	r3, [r7, #12]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	81bb      	strh	r3, [r7, #12]
					Shift += 8;
 80004a8:	897b      	ldrh	r3, [r7, #10]
 80004aa:	3308      	adds	r3, #8
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	817b      	strh	r3, [r7, #10]
				}
				
				if (Page + j >= 0 && Page + j <= 7)		//超出屏幕的内容不显示
 80004b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80004b4:	7bbb      	ldrb	r3, [r7, #14]
 80004b6:	4413      	add	r3, r2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	db34      	blt.n	8000526 <GUI_SPI_Display_Graph+0xfe>
 80004bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80004c0:	7bbb      	ldrb	r3, [r7, #14]
 80004c2:	4413      	add	r3, r2
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	dc2e      	bgt.n	8000526 <GUI_SPI_Display_Graph+0xfe>
				{
					/*显示图像在当前页的内容*/
					GUI_DISPLAY_BUF[Page + j][X + i] |= Graph[j * width + i] << (Shift);
 80004c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	441a      	add	r2, r3
 80004d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	440b      	add	r3, r1
 80004d8:	4941      	ldr	r1, [pc, #260]	; (80005e0 <GUI_SPI_Display_Graph+0x1b8>)
 80004da:	01d2      	lsls	r2, r2, #7
 80004dc:	440a      	add	r2, r1
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	78b9      	ldrb	r1, [r7, #2]
 80004e8:	fb03 f101 	mul.w	r1, r3, r1
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	440b      	add	r3, r1
 80004f0:	4619      	mov	r1, r3
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	440b      	add	r3, r1
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	b25b      	sxtb	r3, r3
 8000504:	4313      	orrs	r3, r2
 8000506:	b258      	sxtb	r0, r3
 8000508:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800050c:	7bbb      	ldrb	r3, [r7, #14]
 800050e:	441a      	add	r2, r3
 8000510:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	440b      	add	r3, r1
 8000518:	b2c0      	uxtb	r0, r0
 800051a:	4931      	ldr	r1, [pc, #196]	; (80005e0 <GUI_SPI_Display_Graph+0x1b8>)
 800051c:	01d2      	lsls	r2, r2, #7
 800051e:	440a      	add	r2, r1
 8000520:	4413      	add	r3, r2
 8000522:	4602      	mov	r2, r0
 8000524:	701a      	strb	r2, [r3, #0]
				}
				
				if (Page + j + 1 >= 0 && Page + j + 1 <= 7)		//超出屏幕的内容不显示
 8000526:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	4413      	add	r3, r2
 800052e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000532:	db38      	blt.n	80005a6 <GUI_SPI_Display_Graph+0x17e>
 8000534:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	4413      	add	r3, r2
 800053c:	2b06      	cmp	r3, #6
 800053e:	dc32      	bgt.n	80005a6 <GUI_SPI_Display_Graph+0x17e>
				{					
					/*显示图像在下一页的内容*/
					GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Graph[j * width + i] >> (8 - Shift);
 8000540:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000544:	7bbb      	ldrb	r3, [r7, #14]
 8000546:	4413      	add	r3, r2
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	440b      	add	r3, r1
 8000552:	4923      	ldr	r1, [pc, #140]	; (80005e0 <GUI_SPI_Display_Graph+0x1b8>)
 8000554:	01d2      	lsls	r2, r2, #7
 8000556:	440a      	add	r2, r1
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25a      	sxtb	r2, r3
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	78b9      	ldrb	r1, [r7, #2]
 8000562:	fb03 f101 	mul.w	r1, r3, r1
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	440b      	add	r3, r1
 800056a:	4619      	mov	r1, r3
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	440b      	add	r3, r1
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000578:	f1c3 0308 	rsb	r3, r3, #8
 800057c:	fa41 f303 	asr.w	r3, r1, r3
 8000580:	b25b      	sxtb	r3, r3
 8000582:	4313      	orrs	r3, r2
 8000584:	b258      	sxtb	r0, r3
 8000586:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	4413      	add	r3, r2
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	440b      	add	r3, r1
 8000598:	b2c0      	uxtb	r0, r0
 800059a:	4911      	ldr	r1, [pc, #68]	; (80005e0 <GUI_SPI_Display_Graph+0x1b8>)
 800059c:	01d2      	lsls	r2, r2, #7
 800059e:	440a      	add	r2, r1
 80005a0:	4413      	add	r3, r2
 80005a2:	4602      	mov	r2, r0
 80005a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < width; i ++)
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	3301      	adds	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	7bfa      	ldrb	r2, [r7, #15]
 80005ae:	78bb      	ldrb	r3, [r7, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f4ff af52 	bcc.w	800045a <GUI_SPI_Display_Graph+0x32>
	for (j = 0; j < (height - 1) / 8 + 1; j ++)
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	3301      	adds	r3, #1
 80005ba:	73bb      	strb	r3, [r7, #14]
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da00      	bge.n	80005c6 <GUI_SPI_Display_Graph+0x19e>
 80005c4:	3307      	adds	r3, #7
 80005c6:	10db      	asrs	r3, r3, #3
 80005c8:	461a      	mov	r2, r3
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	f6bf af41 	bge.w	8000454 <GUI_SPI_Display_Graph+0x2c>
				}
			}
		}
	}
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc90      	pop	{r4, r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000080 	.word	0x20000080

080005e4 <GUI_Test>:
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
		}
	}
}

void GUI_Test(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af02      	add	r7, sp, #8
	
	//Bsp_DelayS(5);
	//GUI_Show_Image(0,10,44,44,train_Icon);
	GUI_SPI_Display_Graph(44,10,44,44,config_Icon);
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <GUI_Test+0x1c>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	232c      	movs	r3, #44	; 0x2c
 80005f0:	222c      	movs	r2, #44	; 0x2c
 80005f2:	210a      	movs	r1, #10
 80005f4:	202c      	movs	r0, #44	; 0x2c
 80005f6:	f7ff ff17 	bl	8000428 <GUI_SPI_Display_Graph>

	//GUI_SPI_Display_Graph(5,5,16,16,OLED_Test[0].CellMatrix);
	//GUI_Display_OFF();
	//Bsp_DelayS(5);
	//GUI_Display_ON();
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08001c18 	.word	0x08001c18

08000604 <GUI_Shift_Menu>:
*参    数:'' 
*返 回 值:'' 
*说    明: '每次按键按完才能调用一次，不能频繁调用' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Shift_Menu(uint8_t pageIndex){
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	u8 base_x = 42,	Delta_x = 44;
 800060e:	232a      	movs	r3, #42	; 0x2a
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	232c      	movs	r3, #44	; 0x2c
 8000614:	73bb      	strb	r3, [r7, #14]
	u8 base_y = 18;
 8000616:	2312      	movs	r3, #18
 8000618:	737b      	strb	r3, [r7, #13]

	if (pageIndex == SYSTEM_MAIN_PAGE_START_TRAIN_READY)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d115      	bne.n	800064c <GUI_Shift_Menu+0x48>
	{
		Sys_MainPage.mid_icon.target_x =  base_x;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	4a28      	ldr	r2, [pc, #160]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000624:	6193      	str	r3, [r2, #24]
        Sys_MainPage.left_icon.target_x = base_x - Delta_x ;
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800062e:	6093      	str	r3, [r2, #8]
        Sys_MainPage.right_icon.target_x = base_x + Delta_x ;
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	4413      	add	r3, r2
 8000636:	4a23      	ldr	r2, [pc, #140]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000638:	6293      	str	r3, [r2, #40]	; 0x28

        Sys_MainPage.mid_icon.target_y = base_y; 
 800063a:	7b7b      	ldrb	r3, [r7, #13]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800063e:	61d3      	str	r3, [r2, #28]
        Sys_MainPage.left_icon.target_y = base_y ;
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000644:	60d3      	str	r3, [r2, #12]
        Sys_MainPage.right_icon.target_y = base_y ;
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800064a:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	if (pageIndex == SYSTEM_MAIN_PAGE_EDIT_TRAIN_MENU_READY) //->
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d117      	bne.n	8000682 <GUI_Shift_Menu+0x7e>
	{
		Sys_MainPage.mid_icon.target_x =  base_x + Delta_x;
 8000652:	7bfa      	ldrb	r2, [r7, #15]
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	4413      	add	r3, r2
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800065a:	6193      	str	r3, [r2, #24]
        Sys_MainPage.left_icon.target_x = base_x - Delta_x + Delta_x;
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000660:	6093      	str	r3, [r2, #8]
        Sys_MainPage.right_icon.target_x = base_x + Delta_x + Delta_x;
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	441a      	add	r2, r3
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	4413      	add	r3, r2
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800066e:	6293      	str	r3, [r2, #40]	; 0x28

        Sys_MainPage.mid_icon.target_y = base_y; 
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000674:	61d3      	str	r3, [r2, #28]
        Sys_MainPage.left_icon.target_y = base_y ;
 8000676:	7b7b      	ldrb	r3, [r7, #13]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800067a:	60d3      	str	r3, [r2, #12]
        Sys_MainPage.right_icon.target_y = base_y ;
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000680:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	if (pageIndex == SYSTEM_MAIN_PAGE_CONFIG_READY) //<-
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b04      	cmp	r3, #4
 8000686:	d117      	bne.n	80006b8 <GUI_Shift_Menu+0xb4>
	{
		Sys_MainPage.mid_icon.target_x =  base_x - Delta_x;
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 8000690:	6193      	str	r3, [r2, #24]
        Sys_MainPage.left_icon.target_x = base_x - Delta_x - Delta_x ;
 8000692:	7bfa      	ldrb	r2, [r7, #15]
 8000694:	7bbb      	ldrb	r3, [r7, #14]
 8000696:	1ad2      	subs	r2, r2, r3
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 800069e:	6093      	str	r3, [r2, #8]
        Sys_MainPage.right_icon.target_x = base_x + Delta_x - Delta_x;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 80006a4:	6293      	str	r3, [r2, #40]	; 0x28

        Sys_MainPage.mid_icon.target_y = base_y; 
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 80006aa:	61d3      	str	r3, [r2, #28]
        Sys_MainPage.left_icon.target_y = base_y ;
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 80006b0:	60d3      	str	r3, [r2, #12]
        Sys_MainPage.right_icon.target_y = base_y ;
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <GUI_Shift_Menu+0xc0>)
 80006b6:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	
	
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000020 	.word	0x20000020

080006c8 <System_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '页面初始化 设置默认页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Init(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    SystemCtrl.page_index = SYSTEM_MAIN_PAGE_START_TRAIN_READY;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <System_Init+0x1c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	705a      	strb	r2, [r3, #1]

    GUI_CLEAR_SCREEN();
 80006d2:	f7ff fdb7 	bl	8000244 <GUI_CLEAR_SCREEN>
    GUI_Shift_Menu(SystemCtrl.page_index);
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <System_Init+0x1c>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff92 	bl	8000604 <GUI_Shift_Menu>
};
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000001c 	.word	0x2000001c

080006e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <SystemInit+0x5c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <SystemInit+0x5c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <SystemInit+0x5c>)
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	4911      	ldr	r1, [pc, #68]	; (8000744 <SystemInit+0x5c>)
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <SystemInit+0x60>)
 8000700:	4013      	ands	r3, r2
 8000702:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <SystemInit+0x5c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <SystemInit+0x5c>)
 800070a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800070e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000712:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <SystemInit+0x5c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SystemInit+0x5c>)
 800071a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SystemInit+0x5c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <SystemInit+0x5c>)
 8000726:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800072a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SystemInit+0x5c>)
 800072e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000732:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000734:	f000 f80c 	bl	8000750 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <SystemInit+0x64>)
 800073a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800073e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	f8ff0000 	.word	0xf8ff0000
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000754:	f000 f802 	bl	800075c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800076a:	4b3a      	ldr	r3, [pc, #232]	; (8000854 <SetSysClockTo72+0xf8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <SetSysClockTo72+0xf8>)
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <SetSysClockTo72+0xf8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <SetSysClockTo72+0x38>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000792:	d1f0      	bne.n	8000776 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <SetSysClockTo72+0xf8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	e001      	b.n	80007aa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d14b      	bne.n	8000848 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SetSysClockTo72+0xfc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <SetSysClockTo72+0xfc>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SetSysClockTo72+0xfc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <SetSysClockTo72+0xfc>)
 80007c2:	f023 0303 	bic.w	r3, r3, #3
 80007c6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <SetSysClockTo72+0xfc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <SetSysClockTo72+0xfc>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SetSysClockTo72+0xf8>)
 80007d6:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <SetSysClockTo72+0xf8>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <SetSysClockTo72+0xf8>)
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <SetSysClockTo72+0xf8>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <SetSysClockTo72+0xf8>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <SetSysClockTo72+0xf8>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <SetSysClockTo72+0xf8>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <SetSysClockTo72+0xf8>)
 80007f6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80007fa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <SetSysClockTo72+0xf8>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <SetSysClockTo72+0xf8>)
 8000802:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000806:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <SetSysClockTo72+0xf8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <SetSysClockTo72+0xf8>)
 800080e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000812:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000814:	bf00      	nop
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <SetSysClockTo72+0xf8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f9      	beq.n	8000816 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <SetSysClockTo72+0xf8>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <SetSysClockTo72+0xf8>)
 8000828:	f023 0303 	bic.w	r3, r3, #3
 800082c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <SetSysClockTo72+0xf8>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <SetSysClockTo72+0xf8>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800083a:	bf00      	nop
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SetSysClockTo72+0xf8>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b08      	cmp	r3, #8
 8000846:	d1f9      	bne.n	800083c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40022000 	.word	0x40022000

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ff44 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000862:	490c      	ldr	r1, [pc, #48]	; (8000894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000878:	4c09      	ldr	r4, [pc, #36]	; (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 fd8b 	bl	80013a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fc5f 	bl	800014c <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000898:	08001d28 	.word	0x08001d28
  ldr r2, =_sbss
 800089c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008a0:	2000048c 	.word	0x2000048c

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
 80008b0:	490d      	ldr	r1, [pc, #52]	; (80008e8 <Bsp_DelayUS+0x40>)
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;					//清空当前计数值
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <Bsp_DelayUS+0x40>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <Bsp_DelayUS+0x40>)
 80008c6:	2205      	movs	r2, #5
 80008c8:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
 80008ca:	bf00      	nop
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <Bsp_DelayUS+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0f9      	beq.n	80008cc <Bsp_DelayUS+0x24>
	SysTick->CTRL = 0x00000004;				//关闭定时器
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <Bsp_DelayUS+0x40>)
 80008da:	2204      	movs	r2, #4
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e010 	.word	0xe000e010

080008ec <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	while(xms--)
 80008f4:	e003      	b.n	80008fe <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 80008f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fa:	f7ff ffd5 	bl	80008a8 <Bsp_DelayUS>
	while(xms--)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f6      	bne.n	80008f6 <Bsp_DelayMS+0xa>
	}
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 8000916:	f000 f88d 	bl	8000a34 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 800091a:	f000 f8fb 	bl	8000b14 <Bsp_SPI_Init>
    Bsp_Flash_Init();
 800091e:	f000 f85b 	bl	80009d8 <Bsp_Flash_Init>
	//Bsp_I2C_Init();
    
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 800092e:	2101      	movs	r1, #1
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fbd9 	bl	80010e8 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <Bsp_SPI_DMA_Init+0x60>)
 8000938:	f000 f968 	bl	8000c0c <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <Bsp_SPI_DMA_Init+0x64>)
 800093e:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <Bsp_SPI_DMA_Init+0x68>)
 8000942:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 8000944:	2310      	movs	r3, #16
 8000946:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 8000948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094c:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 800095e:	2320      	movs	r3, #32
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <Bsp_SPI_DMA_Init+0x60>)
 8000972:	f000 fa07 	bl	8000d84 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8000976:	2101      	movs	r1, #1
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <Bsp_SPI_DMA_Init+0x60>)
 800097a:	f000 fa41 	bl	8000e00 <DMA_Cmd>
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020030 	.word	0x40020030
 800098c:	4001300c 	.word	0x4001300c
 8000990:	20000080 	.word	0x20000080

08000994 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8000998:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800099c:	f000 fa4c 	bl	8000e38 <DMA_GetFlagStatus>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d012      	beq.n	80009cc <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 80009a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009aa:	f000 fa6d 	bl	8000e88 <DMA_ClearFlag>
		Bsp_DelayUS(10);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f7ff ff7a 	bl	80008a8 <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 80009b4:	2101      	movs	r1, #1
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <DMA1_Channel6_IRQHandler+0x3c>)
 80009b8:	f000 fb58 	bl	800106c <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 80009bc:	2101      	movs	r1, #1
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <DMA1_Channel6_IRQHandler+0x3c>)
 80009c0:	f000 fb73 	bl	80010aa <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 80009c4:	2100      	movs	r1, #0
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <DMA1_Channel6_IRQHandler+0x40>)
 80009c8:	f000 fa1a 	bl	8000e00 <DMA_Cmd>
	}
}	
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005400 	.word	0x40005400
 80009d4:	4002006c 	.word	0x4002006c

080009d8 <Bsp_Flash_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '初始化flash' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Flash_Init(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef FLASH_SPI_InitStruct;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 , ENABLE);
 80009de:	2101      	movs	r1, #1
 80009e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009e4:	f000 fbbc 	bl	8001160 <RCC_APB1PeriphClockCmd>
    
    SPI_I2S_DeInit(FLASH_SPI);
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <Bsp_Flash_Init+0x58>)
 80009ea:	f000 fc13 	bl	8001214 <SPI_I2S_DeInit>
    FLASH_SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80009ee:	2300      	movs	r3, #0
 80009f0:	80bb      	strh	r3, [r7, #4]
    FLASH_SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80009f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009f6:	80fb      	strh	r3, [r7, #6]
    FLASH_SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80009f8:	2300      	movs	r3, #0
 80009fa:	813b      	strh	r3, [r7, #8]
    FLASH_SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 80009fc:	2300      	movs	r3, #0
 80009fe:	817b      	strh	r3, [r7, #10]
    FLASH_SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                  //奇数边沿
 8000a00:	2300      	movs	r3, #0
 8000a02:	81bb      	strh	r3, [r7, #12]
    FLASH_SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	81fb      	strh	r3, [r7, #14]
    FLASH_SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000a0a:	2330      	movs	r3, #48	; 0x30
 8000a0c:	823b      	strh	r3, [r7, #16]
    FLASH_SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000a0e:	2300      	movs	r3, #0
 8000a10:	827b      	strh	r3, [r7, #18]
    FLASH_SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000a12:	2307      	movs	r3, #7
 8000a14:	82bb      	strh	r3, [r7, #20]

    SPI_Init(FLASH_SPI,&FLASH_SPI_InitStruct);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <Bsp_Flash_Init+0x58>)
 8000a1c:	f000 fc34 	bl	8001288 <SPI_Init>
    
    SPI_Cmd(FLASH_SPI,ENABLE);
 8000a20:	2101      	movs	r1, #1
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <Bsp_Flash_Init+0x58>)
 8000a24:	f000 fc73 	bl	800130e <SPI_Cmd>
    
}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40003800 	.word	0x40003800

08000a34 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2004      	movs	r0, #4
 8000a3c:	f000 fb72 	bl	8001124 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2009      	movs	r0, #9
 8000a44:	f000 fb6e 	bl	8001124 <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000a4a:	2218      	movs	r2, #24
 8000a4c:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000a50:	2203      	movs	r2, #3
 8000a52:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000a56:	22a0      	movs	r2, #160	; 0xa0
 8000a58:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000a68:	2250      	movs	r2, #80	; 0x50
 8000a6a:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8000a6c:	4924      	ldr	r1, [pc, #144]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000a6e:	4826      	ldr	r0, [pc, #152]	; (8000b08 <Bsp_GPIO_Init+0xd4>)
 8000a70:	f000 fa24 	bl	8000ebc <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8000a74:	4923      	ldr	r1, [pc, #140]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000a76:	4824      	ldr	r0, [pc, #144]	; (8000b08 <Bsp_GPIO_Init+0xd4>)
 8000a78:	f000 fa20 	bl	8000ebc <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000a7e:	2248      	movs	r2, #72	; 0x48
 8000a80:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000a84:	2203      	movs	r2, #3
 8000a86:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000a8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a8e:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 8000a90:	491e      	ldr	r1, [pc, #120]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000a92:	481d      	ldr	r0, [pc, #116]	; (8000b08 <Bsp_GPIO_Init+0xd4>)
 8000a94:	f000 fa12 	bl	8000ebc <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 8000a9e:	491b      	ldr	r1, [pc, #108]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000aa0:	481b      	ldr	r0, [pc, #108]	; (8000b10 <Bsp_GPIO_Init+0xdc>)
 8000aa2:	f000 fa0b 	bl	8000ebc <GPIO_Init>
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000aa8:	2218      	movs	r2, #24
 8000aaa:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000ab4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000ab8:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000abc:	2248      	movs	r2, #72	; 0x48
 8000abe:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000acc:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae0:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <Bsp_GPIO_Init+0xd0>)
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <Bsp_GPIO_Init+0xdc>)
 8000ae6:	f000 f9e9 	bl	8000ebc <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8000aea:	4905      	ldr	r1, [pc, #20]	; (8000b00 <Bsp_GPIO_Init+0xcc>)
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <Bsp_GPIO_Init+0xdc>)
 8000aee:	f000 f9e5 	bl	8000ebc <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 8000af2:	4906      	ldr	r1, [pc, #24]	; (8000b0c <Bsp_GPIO_Init+0xd8>)
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <Bsp_GPIO_Init+0xdc>)
 8000af6:	f000 f9e1 	bl	8000ebc <GPIO_Init>
    #endif

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000480 	.word	0x20000480
 8000b04:	20000484 	.word	0x20000484
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	20000488 	.word	0x20000488
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b20:	f000 fb00 	bl	8001124 <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8000b24:	4815      	ldr	r0, [pc, #84]	; (8000b7c <Bsp_SPI_Init+0x68>)
 8000b26:	f000 fb75 	bl	8001214 <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8000b2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b2e:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000b30:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b34:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000b36:	2300      	movs	r3, #0
 8000b38:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <Bsp_SPI_Init+0x68>)
 8000b5a:	f000 fb95 	bl	8001288 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <Bsp_SPI_Init+0x68>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8000b64:	2101      	movs	r1, #1
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <Bsp_SPI_Init+0x68>)
 8000b68:	f000 fbd1 	bl	800130e <SPI_Cmd>
    Bsp_DelayMS(100);
 8000b6c:	2064      	movs	r0, #100	; 0x64
 8000b6e:	f7ff febd 	bl	80008ec <Bsp_DelayMS>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40013000 	.word	0x40013000

08000b80 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(u8 TxData)                                   //发送命令
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	u8 retry=0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <Bsp_SPI_Send_CMD+0x5c>)
 8000b92:	f000 fa5d 	bl	8001050 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000b96:	e005      	b.n	8000ba4 <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2bc8      	cmp	r3, #200	; 0xc8
 8000ba2:	d816      	bhi.n	8000bd2 <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <Bsp_SPI_Send_CMD+0x60>)
 8000ba8:	f000 fbde 	bl	8001368 <SPI_I2S_GetFlagStatus>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f2      	beq.n	8000b98 <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 8000bb2:	2064      	movs	r0, #100	; 0x64
 8000bb4:	f7ff fe9a 	bl	80008ec <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <Bsp_SPI_Send_CMD+0x60>)
 8000bc0:	f000 fbc4 	bl	800134c <SPI_I2S_SendData>
	retry=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <Bsp_SPI_Send_CMD+0x5c>)
 8000bcc:	f000 fa32 	bl	8001034 <GPIO_SetBits>
 8000bd0:	e000      	b.n	8000bd4 <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 8000bd2:	bf00      	nop
}
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40013000 	.word	0x40013000

08000be4 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 8000be8:	2110      	movs	r1, #16
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <Bsp_SPI_RES_LOW+0x10>)
 8000bec:	f000 fa30 	bl	8001050 <GPIO_ResetBits>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <Bsp_SPI_RES_HIGH+0x10>)
 8000c00:	f000 fa18 	bl	8001034 <GPIO_SetBits>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40010800 	.word	0x40010800

08000c0c <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <DMA_DeInit+0x140>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <DMA_DeInit+0x144>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <DMA_DeInit+0x144>)
 8000c48:	f043 030f 	orr.w	r3, r3, #15
 8000c4c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000c4e:	e077      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a40      	ldr	r2, [pc, #256]	; (8000d54 <DMA_DeInit+0x148>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <DMA_DeInit+0x144>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a3c      	ldr	r2, [pc, #240]	; (8000d50 <DMA_DeInit+0x144>)
 8000c5e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c62:	6053      	str	r3, [r2, #4]
}
 8000c64:	e06c      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <DMA_DeInit+0x14c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <DMA_DeInit+0x144>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <DMA_DeInit+0x144>)
 8000c74:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c78:	6053      	str	r3, [r2, #4]
}
 8000c7a:	e061      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <DMA_DeInit+0x150>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d106      	bne.n	8000c92 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <DMA_DeInit+0x144>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <DMA_DeInit+0x144>)
 8000c8a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c8e:	6053      	str	r3, [r2, #4]
}
 8000c90:	e056      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <DMA_DeInit+0x154>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <DMA_DeInit+0x144>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <DMA_DeInit+0x144>)
 8000ca0:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ca4:	6053      	str	r3, [r2, #4]
}
 8000ca6:	e04b      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <DMA_DeInit+0x158>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d106      	bne.n	8000cbe <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <DMA_DeInit+0x144>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <DMA_DeInit+0x144>)
 8000cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cba:	6053      	str	r3, [r2, #4]
}
 8000cbc:	e040      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <DMA_DeInit+0x15c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d106      	bne.n	8000cd4 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <DMA_DeInit+0x144>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <DMA_DeInit+0x144>)
 8000ccc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000cd0:	6053      	str	r3, [r2, #4]
}
 8000cd2:	e035      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <DMA_DeInit+0x160>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <DMA_DeInit+0x164>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <DMA_DeInit+0x164>)
 8000ce2:	f043 030f 	orr.w	r3, r3, #15
 8000ce6:	6053      	str	r3, [r2, #4]
}
 8000ce8:	e02a      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <DMA_DeInit+0x168>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d106      	bne.n	8000d00 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <DMA_DeInit+0x164>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <DMA_DeInit+0x164>)
 8000cf8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000cfc:	6053      	str	r3, [r2, #4]
}
 8000cfe:	e01f      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <DMA_DeInit+0x16c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d106      	bne.n	8000d16 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <DMA_DeInit+0x164>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <DMA_DeInit+0x164>)
 8000d0e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000d12:	6053      	str	r3, [r2, #4]
}
 8000d14:	e014      	b.n	8000d40 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <DMA_DeInit+0x170>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d106      	bne.n	8000d2c <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <DMA_DeInit+0x164>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <DMA_DeInit+0x164>)
 8000d24:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000d28:	6053      	str	r3, [r2, #4]
}
 8000d2a:	e009      	b.n	8000d40 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <DMA_DeInit+0x174>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d105      	bne.n	8000d40 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <DMA_DeInit+0x164>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <DMA_DeInit+0x164>)
 8000d3a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000d3e:	6053      	str	r3, [r2, #4]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40020008 	.word	0x40020008
 8000d50:	40020000 	.word	0x40020000
 8000d54:	4002001c 	.word	0x4002001c
 8000d58:	40020030 	.word	0x40020030
 8000d5c:	40020044 	.word	0x40020044
 8000d60:	40020058 	.word	0x40020058
 8000d64:	4002006c 	.word	0x4002006c
 8000d68:	40020080 	.word	0x40020080
 8000d6c:	40020408 	.word	0x40020408
 8000d70:	40020400 	.word	0x40020400
 8000d74:	4002041c 	.word	0x4002041c
 8000d78:	40020430 	.word	0x40020430
 8000d7c:	40020444 	.word	0x40020444
 8000d80:	40020458 	.word	0x40020458

08000d84 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000db2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dbe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000e1e:	e006      	b.n	8000e2e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e28:	4013      	ands	r3, r2
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <DMA_GetFlagStatus+0x48>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e002      	b.n	8000e60 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <DMA_GetFlagStatus+0x4c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020000 	.word	0x40020000

08000e88 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <DMA_ClearFlag+0x2c>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000ea0:	e002      	b.n	8000ea8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <DMA_ClearFlag+0x30>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6053      	str	r3, [r2, #4]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020000 	.word	0x40020000

08000ebc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	78db      	ldrb	r3, [r3, #3]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d044      	beq.n	8000f94 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e038      	b.n	8000f88 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000f16:	2201      	movs	r2, #1
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d126      	bne.n	8000f82 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	78db      	ldrb	r3, [r3, #3]
 8000f60:	2b28      	cmp	r3, #40	; 0x28
 8000f62:	d105      	bne.n	8000f70 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000f64:	2201      	movs	r2, #1
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	e008      	b.n	8000f82 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b48      	cmp	r3, #72	; 0x48
 8000f76:	d104      	bne.n	8000f82 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d9c3      	bls.n	8000f16 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d946      	bls.n	800102a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	e03a      	b.n	800101e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	3308      	adds	r3, #8
 8000fac:	2201      	movs	r2, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d127      	bne.n	8001018 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000fce:	220f      	movs	r2, #15
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	2b28      	cmp	r3, #40	; 0x28
 8000ff6:	d105      	bne.n	8001004 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	2b48      	cmp	r3, #72	; 0x48
 800100a:	d105      	bne.n	8001018 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	3308      	adds	r3, #8
 8001010:	2201      	movs	r2, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	3301      	adds	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d9c1      	bls.n	8000fa8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	605a      	str	r2, [r3, #4]
  }
}
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	615a      	str	r2, [r3, #20]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800108e:	e007      	b.n	80010a0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	801a      	strh	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 80010cc:	e007      	b.n	80010de <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	801a      	strh	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <RCC_AHBPeriphClockCmd+0x38>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <RCC_AHBPeriphClockCmd+0x38>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001106:	e006      	b.n	8001116 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <RCC_AHBPeriphClockCmd+0x38>)
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	43db      	mvns	r3, r3
 8001110:	4903      	ldr	r1, [pc, #12]	; (8001120 <RCC_AHBPeriphClockCmd+0x38>)
 8001112:	4013      	ands	r3, r2
 8001114:	614b      	str	r3, [r1, #20]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000

08001124 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <RCC_APB2PeriphClockCmd+0x38>)
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <RCC_APB2PeriphClockCmd+0x38>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001142:	e006      	b.n	8001152 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <RCC_APB2PeriphClockCmd+0x38>)
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	43db      	mvns	r3, r3
 800114c:	4903      	ldr	r1, [pc, #12]	; (800115c <RCC_APB2PeriphClockCmd+0x38>)
 800114e:	4013      	ands	r3, r2
 8001150:	618b      	str	r3, [r1, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000

08001160 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <RCC_APB1PeriphClockCmd+0x38>)
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <RCC_APB1PeriphClockCmd+0x38>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800117e:	e006      	b.n	800118e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <RCC_APB1PeriphClockCmd+0x38>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	43db      	mvns	r3, r3
 8001188:	4903      	ldr	r1, [pc, #12]	; (8001198 <RCC_APB1PeriphClockCmd+0x38>)
 800118a:	4013      	ands	r3, r2
 800118c:	61cb      	str	r3, [r1, #28]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <RCC_APB2PeriphResetCmd+0x38>)
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <RCC_APB2PeriphResetCmd+0x38>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80011ba:	e006      	b.n	80011ca <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <RCC_APB2PeriphResetCmd+0x38>)
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4903      	ldr	r1, [pc, #12]	; (80011d4 <RCC_APB2PeriphResetCmd+0x38>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	60cb      	str	r3, [r1, #12]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000

080011d8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <RCC_APB1PeriphResetCmd+0x38>)
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <RCC_APB1PeriphResetCmd+0x38>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80011f6:	e006      	b.n	8001206 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <RCC_APB1PeriphResetCmd+0x38>)
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	43db      	mvns	r3, r3
 8001200:	4903      	ldr	r1, [pc, #12]	; (8001210 <RCC_APB1PeriphResetCmd+0x38>)
 8001202:	4013      	ands	r3, r2
 8001204:	610b      	str	r3, [r1, #16]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <SPI_I2S_DeInit+0x68>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10a      	bne.n	800123a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001224:	2101      	movs	r1, #1
 8001226:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800122a:	f7ff ffb7 	bl	800119c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800122e:	2100      	movs	r1, #0
 8001230:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001234:	f7ff ffb2 	bl	800119c <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001238:	e01c      	b.n	8001274 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <SPI_I2S_DeInit+0x6c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10a      	bne.n	8001258 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001242:	2101      	movs	r1, #1
 8001244:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001248:	f7ff ffc6 	bl	80011d8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800124c:	2100      	movs	r1, #0
 800124e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001252:	f7ff ffc1 	bl	80011d8 <RCC_APB1PeriphResetCmd>
}
 8001256:	e00d      	b.n	8001274 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SPI_I2S_DeInit+0x70>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d109      	bne.n	8001274 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001260:	2101      	movs	r1, #1
 8001262:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001266:	f7ff ffb7 	bl	80011d8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800126a:	2100      	movs	r1, #0
 800126c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001270:	f7ff ffb2 	bl	80011d8 <RCC_APB1PeriphResetCmd>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013000 	.word	0x40013000
 8001280:	40003800 	.word	0x40003800
 8001284:	40003c00 	.word	0x40003c00

08001288 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80012a2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	885b      	ldrh	r3, [r3, #2]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012bc:	4313      	orrs	r3, r2
 80012be:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80012dc:	4313      	orrs	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	89fa      	ldrh	r2, [r7, #14]
 80012ea:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	8b9b      	ldrh	r3, [r3, #28]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	8a1a      	ldrh	r2, [r3, #16]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	821a      	strh	r2, [r3, #16]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001330:	e007      	b.n	8001342 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	801a      	strh	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	819a      	strh	r2, [r3, #12]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	891b      	ldrh	r3, [r3, #8]
 800137c:	b29a      	uxth	r2, r3
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	4013      	ands	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <__libc_init_array>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	2600      	movs	r6, #0
 80013a4:	4d0c      	ldr	r5, [pc, #48]	; (80013d8 <__libc_init_array+0x38>)
 80013a6:	4c0d      	ldr	r4, [pc, #52]	; (80013dc <__libc_init_array+0x3c>)
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d109      	bne.n	80013c4 <__libc_init_array+0x24>
 80013b0:	f000 f81a 	bl	80013e8 <_init>
 80013b4:	2600      	movs	r6, #0
 80013b6:	4d0a      	ldr	r5, [pc, #40]	; (80013e0 <__libc_init_array+0x40>)
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <__libc_init_array+0x44>)
 80013ba:	1b64      	subs	r4, r4, r5
 80013bc:	10a4      	asrs	r4, r4, #2
 80013be:	42a6      	cmp	r6, r4
 80013c0:	d105      	bne.n	80013ce <__libc_init_array+0x2e>
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c8:	4798      	blx	r3
 80013ca:	3601      	adds	r6, #1
 80013cc:	e7ee      	b.n	80013ac <__libc_init_array+0xc>
 80013ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d2:	4798      	blx	r3
 80013d4:	3601      	adds	r6, #1
 80013d6:	e7f2      	b.n	80013be <__libc_init_array+0x1e>
 80013d8:	08001d20 	.word	0x08001d20
 80013dc:	08001d20 	.word	0x08001d20
 80013e0:	08001d20 	.word	0x08001d20
 80013e4:	08001d24 	.word	0x08001d24

080013e8 <_init>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr

080013f4 <_fini>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr
