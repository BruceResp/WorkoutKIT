
D:/Git_Repository/STM32F103C8Tx_VSCODE_IDE/application/bin/application.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d50 	.word	0x08001d50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001d50 	.word	0x08001d50

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <main>:
// 	temp = add(1,1);
// 	TEST_ASSERT_EQUAL(2,temp);
// }

int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	// uint8_t MID;
	// uint16_t DID;
	// UNITY_BEGIN();
	// RUN_TEST(testZeroAdd);
	// UNITY_END();  //在方法里才需要加 return
	Bsp_Init();
 8000658:	f000 fdaa 	bl	80011b0 <Bsp_Init>
 	GUI_SPI_Init(); //初始化测试下来要4s钟有点长
 800065c:	f000 f936 	bl	80008cc <GUI_SPI_Init>
	System_Init();
 8000660:	f000 fc04 	bl	8000e6c <System_Init>
		// FLASH_Write_Data(0x000000,data,4);
		// FLASH_Read_Data(0x000000,Rxdata,250);
		
		//GUI_Test();
		
		Key_Process();
 8000664:	f000 fb36 	bl	8000cd4 <Key_Process>
		System_Poll();
 8000668:	f000 fc6a 	bl	8000f40 <System_Poll>
		Key_Process();
 800066c:	e7fa      	b.n	8000664 <main+0x10>

0800066e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
	...

080006c4 <GUI_CLEAR_SCREEN>:
*参    数:'' 
*返 回 值:'' 
*说    明: '缓存所有像素点值设为0，达到清屏的效果，' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_CLEAR_SCREEN(){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0;j<8;j++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	e013      	b.n	80006f8 <GUI_CLEAR_SCREEN+0x34>
		//GUI_Set_Cursor(j,0);
		for(i = 0;i<=128;i++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	e00a      	b.n	80006ec <GUI_CLEAR_SCREEN+0x28>
			GUI_DISPLAY_BUF[j][i] = 0x00;	//将显存数组数据全部清零
 80006d6:	79ba      	ldrb	r2, [r7, #6]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	490c      	ldr	r1, [pc, #48]	; (800070c <GUI_CLEAR_SCREEN+0x48>)
 80006dc:	01d2      	lsls	r2, r2, #7
 80006de:	440a      	add	r2, r1
 80006e0:	4413      	add	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		for(i = 0;i<=128;i++){
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b80      	cmp	r3, #128	; 0x80
 80006f0:	d9f1      	bls.n	80006d6 <GUI_CLEAR_SCREEN+0x12>
	for(j=0;j<8;j++){
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	3301      	adds	r3, #1
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d9e8      	bls.n	80006d0 <GUI_CLEAR_SCREEN+0xc>
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000098 	.word	0x20000098

08000710 <GUI_Show_Image>:
			Image: 图像单位列的值集合的最开始部分 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Show_Image(int16_t X, int16_t Y,uint8_t Height,uint8_t Width, const uint8_t *Image){
 8000710:	b490      	push	{r4, r7}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4604      	mov	r4, r0
 8000718:	4608      	mov	r0, r1
 800071a:	4611      	mov	r1, r2
 800071c:	461a      	mov	r2, r3
 800071e:	4623      	mov	r3, r4
 8000720:	80fb      	strh	r3, [r7, #6]
 8000722:	4603      	mov	r3, r0
 8000724:	80bb      	strh	r3, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]
 800072a:	4613      	mov	r3, r2
 800072c:	70bb      	strb	r3, [r7, #2]
	uint8_t	across_line = (Height-1) / 8 + 1 ; 			//先看占几行
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	3b01      	subs	r3, #1
 8000732:	2b00      	cmp	r3, #0
 8000734:	da00      	bge.n	8000738 <GUI_Show_Image+0x28>
 8000736:	3307      	adds	r3, #7
 8000738:	10db      	asrs	r3, r3, #3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3301      	adds	r3, #1
 800073e:	727b      	strb	r3, [r7, #9]
	int16_t Page, shift;
	for (uint8_t j = 0; j < across_line; j++)
 8000740:	2300      	movs	r3, #0
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	e0b5      	b.n	80008b2 <GUI_Show_Image+0x1a2>
	{	
		for (uint8_t i = 0; i < Width ; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	72bb      	strb	r3, [r7, #10]
 800074a:	e0aa      	b.n	80008a2 <GUI_Show_Image+0x192>
		{	
			if ((X + i) > 127 || (X + i) < 0)
 800074c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000750:	7abb      	ldrb	r3, [r7, #10]
 8000752:	4413      	add	r3, r2
 8000754:	2b7f      	cmp	r3, #127	; 0x7f
 8000756:	f300 80a0 	bgt.w	800089a <GUI_Show_Image+0x18a>
 800075a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800075e:	7abb      	ldrb	r3, [r7, #10]
 8000760:	4413      	add	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	f2c0 8099 	blt.w	800089a <GUI_Show_Image+0x18a>
			{
				continue;
			}
			shift = Y % 8;
 8000768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076c:	425a      	negs	r2, r3
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	f002 0207 	and.w	r2, r2, #7
 8000776:	bf58      	it	pl
 8000778:	4253      	negpl	r3, r2
 800077a:	81bb      	strh	r3, [r7, #12]
			Page = Y / 8;
 800077c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <GUI_Show_Image+0x76>
 8000784:	3307      	adds	r3, #7
 8000786:	10db      	asrs	r3, r3, #3
 8000788:	81fb      	strh	r3, [r7, #14]

			if (Y < 0)   // Y<-8 的情况可以保证 Page+j<0(j ==0 ) 但是 -8<Y<0的情况会进去像素赋值，而j<0导致i+width出现不准确的情况，我们只需要需要的部分就好了
 800078a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da07      	bge.n	80007a2 <GUI_Show_Image+0x92>
			{
				Page -= 1;
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	3b01      	subs	r3, #1
 8000796:	b29b      	uxth	r3, r3
 8000798:	81fb      	strh	r3, [r7, #14]
				shift += 8;
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	3308      	adds	r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	81bb      	strh	r3, [r7, #12]
			}
			if ((Page + j) >= 0 && (Page + j) < 8)
 80007a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	4413      	add	r3, r2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db34      	blt.n	8000818 <GUI_Show_Image+0x108>
 80007ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007b2:	7afb      	ldrb	r3, [r7, #11]
 80007b4:	4413      	add	r3, r2
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	dc2e      	bgt.n	8000818 <GUI_Show_Image+0x108>
			{
				GUI_DISPLAY_BUF[Page + j][X + i] |= Image[i + Width*j] << (shift);
 80007ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	441a      	add	r2, r3
 80007c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007c6:	7abb      	ldrb	r3, [r7, #10]
 80007c8:	440b      	add	r3, r1
 80007ca:	493f      	ldr	r1, [pc, #252]	; (80008c8 <GUI_Show_Image+0x1b8>)
 80007cc:	01d2      	lsls	r2, r2, #7
 80007ce:	440a      	add	r2, r1
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	7ab9      	ldrb	r1, [r7, #10]
 80007d8:	78bb      	ldrb	r3, [r7, #2]
 80007da:	7af8      	ldrb	r0, [r7, #11]
 80007dc:	fb00 f303 	mul.w	r3, r0, r3
 80007e0:	440b      	add	r3, r1
 80007e2:	4619      	mov	r1, r3
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b258      	sxtb	r0, r3
 80007fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007fe:	7afb      	ldrb	r3, [r7, #11]
 8000800:	441a      	add	r2, r3
 8000802:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000806:	7abb      	ldrb	r3, [r7, #10]
 8000808:	440b      	add	r3, r1
 800080a:	b2c0      	uxtb	r0, r0
 800080c:	492e      	ldr	r1, [pc, #184]	; (80008c8 <GUI_Show_Image+0x1b8>)
 800080e:	01d2      	lsls	r2, r2, #7
 8000810:	440a      	add	r2, r1
 8000812:	4413      	add	r3, r2
 8000814:	4602      	mov	r2, r0
 8000816:	701a      	strb	r2, [r3, #0]
			}
			if ((Page + j + 1) >= 0 && (Page + j + 1) < 8)
 8000818:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	4413      	add	r3, r2
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	db3a      	blt.n	800089c <GUI_Show_Image+0x18c>
 8000826:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	4413      	add	r3, r2
 800082e:	2b06      	cmp	r3, #6
 8000830:	dc34      	bgt.n	800089c <GUI_Show_Image+0x18c>
			{
				GUI_DISPLAY_BUF[Page + j + 1][X + i] |= Image[i + Width*j] >> (8-(shift));
 8000832:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	4413      	add	r3, r2
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	440b      	add	r3, r1
 8000844:	4920      	ldr	r1, [pc, #128]	; (80008c8 <GUI_Show_Image+0x1b8>)
 8000846:	01d2      	lsls	r2, r2, #7
 8000848:	440a      	add	r2, r1
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25a      	sxtb	r2, r3
 8000850:	7ab9      	ldrb	r1, [r7, #10]
 8000852:	78bb      	ldrb	r3, [r7, #2]
 8000854:	7af8      	ldrb	r0, [r7, #11]
 8000856:	fb00 f303 	mul.w	r3, r0, r3
 800085a:	440b      	add	r3, r1
 800085c:	4619      	mov	r1, r3
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	440b      	add	r3, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800086a:	f1c3 0308 	rsb	r3, r3, #8
 800086e:	fa41 f303 	asr.w	r3, r1, r3
 8000872:	b25b      	sxtb	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b258      	sxtb	r0, r3
 8000878:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	4413      	add	r3, r2
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000886:	7abb      	ldrb	r3, [r7, #10]
 8000888:	440b      	add	r3, r1
 800088a:	b2c0      	uxtb	r0, r0
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <GUI_Show_Image+0x1b8>)
 800088e:	01d2      	lsls	r2, r2, #7
 8000890:	440a      	add	r2, r1
 8000892:	4413      	add	r3, r2
 8000894:	4602      	mov	r2, r0
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e000      	b.n	800089c <GUI_Show_Image+0x18c>
				continue;
 800089a:	bf00      	nop
		for (uint8_t i = 0; i < Width ; i++)
 800089c:	7abb      	ldrb	r3, [r7, #10]
 800089e:	3301      	adds	r3, #1
 80008a0:	72bb      	strb	r3, [r7, #10]
 80008a2:	7aba      	ldrb	r2, [r7, #10]
 80008a4:	78bb      	ldrb	r3, [r7, #2]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	f4ff af50 	bcc.w	800074c <GUI_Show_Image+0x3c>
	for (uint8_t j = 0; j < across_line; j++)
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	3301      	adds	r3, #1
 80008b0:	72fb      	strb	r3, [r7, #11]
 80008b2:	7afa      	ldrb	r2, [r7, #11]
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	f4ff af45 	bcc.w	8000746 <GUI_Show_Image+0x36>
			}
		}
	}

}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc90      	pop	{r4, r7}
 80008c6:	4770      	bx	lr
 80008c8:	20000098 	.word	0x20000098

080008cc <GUI_SPI_Init>:
*函数功能:'GUI SPI 初始化' 
*说    明: '发送指令初始化ssd1306' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_SPI_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	Bsp_DelayMS(1000); //1000
 80008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d4:	f000 fc59 	bl	800118a <Bsp_DelayMS>

	Bsp_SPI_RES_LOW();
 80008d8:	f000 fe1e 	bl	8001518 <Bsp_SPI_RES_LOW>
	Bsp_DelayMS(100);  //100
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f000 fc54 	bl	800118a <Bsp_DelayMS>
	Bsp_SPI_RES_HIGH();
 80008e2:	f000 fe23 	bl	800152c <Bsp_SPI_RES_HIGH>
	Bsp_SPI_Send_CMD(0xae);//关闭显示
 80008e6:	20ae      	movs	r0, #174	; 0xae
 80008e8:	f000 fde4 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xd5);//设置时钟分频因子,震荡频率
 80008ec:	20d5      	movs	r0, #213	; 0xd5
 80008ee:	f000 fde1 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xf0);//[3:0],分频因子;[7:4],震荡频率
 80008f2:	20f0      	movs	r0, #240	; 0xf0
 80008f4:	f000 fdde 	bl	80014b4 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xd9);//设置时钟分频因子,震荡频率
 80008f8:	20d9      	movs	r0, #217	; 0xd9
 80008fa:	f000 fddb 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x11);//[3:0],分频因子;[7:4],震荡频率
 80008fe:	2011      	movs	r0, #17
 8000900:	f000 fdd8 	bl	80014b4 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x81);//设置对比度
 8000904:	2081      	movs	r0, #129	; 0x81
 8000906:	f000 fdd5 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x7f);//128
 800090a:	207f      	movs	r0, #127	; 0x7f
 800090c:	f000 fdd2 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x8d);//设置电荷泵开关
 8000910:	208d      	movs	r0, #141	; 0x8d
 8000912:	f000 fdcf 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x14);//开
 8000916:	2014      	movs	r0, #20
 8000918:	f000 fdcc 	bl	80014b4 <Bsp_SPI_Send_CMD>

	Bsp_SPI_Send_CMD(0x20);//设置模式
 800091c:	2020      	movs	r0, #32
 800091e:	f000 fdc9 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0x00);//设置为水平地址模式
 8000922:	2000      	movs	r0, #0
 8000924:	f000 fdc6 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x21);//设置列地址的起始和结束的位置
 8000928:	2021      	movs	r0, #33	; 0x21
 800092a:	f000 fdc3 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fdc0 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x7f);//127   
 8000934:	207f      	movs	r0, #127	; 0x7f
 8000936:	f000 fdbd 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x22);//设置页地址的起始和结束的位置
 800093a:	2022      	movs	r0, #34	; 0x22
 800093c:	f000 fdba 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x00);//0
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fdb7 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0x07);//7
 8000946:	2007      	movs	r0, #7
 8000948:	f000 fdb4 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xc9);//0xc9上下反置 0xc8正常
 800094c:	20c9      	movs	r0, #201	; 0xc9
 800094e:	f000 fdb1 	bl	80014b4 <Bsp_SPI_Send_CMD>
    Bsp_SPI_Send_CMD(0xa1);//0xa0左右反置 0xa1正常
 8000952:	20a1      	movs	r0, #161	; 0xa1
 8000954:	f000 fdae 	bl	80014b4 <Bsp_SPI_Send_CMD>
	
	Bsp_SPI_Send_CMD(0xa4);//全局显示开启;0xa4正常,0xa5无视命令点亮全屏
 8000958:	20a4      	movs	r0, #164	; 0xa4
 800095a:	f000 fdab 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xa6);//设置显示方式;bit0:1,反相显示;0,正常显示	
 800095e:	20a6      	movs	r0, #166	; 0xa6
 8000960:	f000 fda8 	bl	80014b4 <Bsp_SPI_Send_CMD>
	Bsp_SPI_Send_CMD(0xaf);//开启显示
 8000964:	20af      	movs	r0, #175	; 0xaf
 8000966:	f000 fda5 	bl	80014b4 <Bsp_SPI_Send_CMD>

   Bsp_SPI_Send_CMD(0x56);
 800096a:	2056      	movs	r0, #86	; 0x56
 800096c:	f000 fda2 	bl	80014b4 <Bsp_SPI_Send_CMD>
   Bsp_DelayMS(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 fc0a 	bl	800118a <Bsp_DelayMS>
   Bsp_SPI_DMA_Init();//DMA初始化
 8000976:	f000 fc25 	bl	80011c4 <Bsp_SPI_DMA_Init>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <GUI_Animation_move>:
	GUI_Show_Image(Sys_MainPage.left_icon.current_x,Sys_MainPage.left_icon.current_y,44,44,config_Icon);
	

}

void GUI_Animation_move(void){
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af02      	add	r7, sp, #8
	
		Sys_MainPage.mid_icon.current_x = kp*Sys_MainPage.mid_icon.current_x + (1-kp)*(Sys_MainPage.mid_icon.target_x);
 8000986:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <GUI_Animation_move+0x190>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc98 	bl	80002c0 <__aeabi_i2f>
 8000990:	4602      	mov	r2, r0
 8000992:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <GUI_Animation_move+0x194>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	4610      	mov	r0, r2
 800099a:	f7ff fce5 	bl	8000368 <__aeabi_fmul>
 800099e:	4603      	mov	r3, r0
 80009a0:	461c      	mov	r4, r3
 80009a2:	4b5c      	ldr	r3, [pc, #368]	; (8000b14 <GUI_Animation_move+0x194>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80009ac:	f7ff fbd2 	bl	8000154 <__aeabi_fsub>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461d      	mov	r5, r3
 80009b4:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <GUI_Animation_move+0x190>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc81 	bl	80002c0 <__aeabi_i2f>
 80009be:	4603      	mov	r3, r0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4628      	mov	r0, r5
 80009c4:	f7ff fcd0 	bl	8000368 <__aeabi_fmul>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	4620      	mov	r0, r4
 80009ce:	f7ff fbc3 	bl	8000158 <__addsf3>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe17 	bl	8000608 <__aeabi_f2iz>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <GUI_Animation_move+0x190>)
 80009de:	6113      	str	r3, [r2, #16]
		Sys_MainPage.left_icon.current_x = kp*Sys_MainPage.left_icon.current_x + (1-kp)*(Sys_MainPage.left_icon.target_x);
 80009e0:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <GUI_Animation_move+0x190>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc6b 	bl	80002c0 <__aeabi_i2f>
 80009ea:	4602      	mov	r2, r0
 80009ec:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <GUI_Animation_move+0x194>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f7ff fcb8 	bl	8000368 <__aeabi_fmul>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461c      	mov	r4, r3
 80009fc:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <GUI_Animation_move+0x194>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000a06:	f7ff fba5 	bl	8000154 <__aeabi_fsub>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fc54 	bl	80002c0 <__aeabi_i2f>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f7ff fca3 	bl	8000368 <__aeabi_fmul>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff fb96 	bl	8000158 <__addsf3>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fdea 	bl	8000608 <__aeabi_f2iz>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a38:	6013      	str	r3, [r2, #0]
		Sys_MainPage.right_icon.current_x = kp*Sys_MainPage.right_icon.current_x + (1-kp)*(Sys_MainPage.right_icon.target_x);
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fc3e 	bl	80002c0 <__aeabi_i2f>
 8000a44:	4602      	mov	r2, r0
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <GUI_Animation_move+0x194>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f7ff fc8b 	bl	8000368 <__aeabi_fmul>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461c      	mov	r4, r3
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <GUI_Animation_move+0x194>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000a60:	f7ff fb78 	bl	8000154 <__aeabi_fsub>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461d      	mov	r5, r3
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc27 	bl	80002c0 <__aeabi_i2f>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4628      	mov	r0, r5
 8000a78:	f7ff fc76 	bl	8000368 <__aeabi_fmul>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4620      	mov	r0, r4
 8000a82:	f7ff fb69 	bl	8000158 <__addsf3>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdbd 	bl	8000608 <__aeabi_f2iz>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a92:	6213      	str	r3, [r2, #32]

		// Sys_MainPage.mid_icon.current_y = kp*Sys_MainPage.mid_font.current_y + (1-kp)*Sys_MainPage.mid_icon.target_y;
		// Sys_MainPage.left_icon.current_y = kp*Sys_MainPage.left_icon.current_y + (1-kp)*Sys_MainPage.left_icon.target_y;
		// Sys_MainPage.right_icon.current_y = kp*Sys_MainPage.right_icon.current_y + (1-kp)*Sys_MainPage.right_icon.target_y;

		Sys_MainPage.mid_icon.current_y = Sys_MainPage.mid_icon.target_y;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a9a:	6153      	str	r3, [r2, #20]
		Sys_MainPage.left_icon.current_y = Sys_MainPage.left_icon.target_y;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <GUI_Animation_move+0x190>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <GUI_Animation_move+0x190>)
 8000aa2:	6053      	str	r3, [r2, #4]
		Sys_MainPage.right_icon.current_y = Sys_MainPage.right_icon.target_y;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <GUI_Animation_move+0x190>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <GUI_Animation_move+0x190>)
 8000aaa:	6253      	str	r3, [r2, #36]	; 0x24
		// GUI_Show_Frame();
		if (Sys_MainPage.right_icon.current_x != Sys_MainPage.right_icon.target_x )
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <GUI_Animation_move+0x190>)
 8000aae:	6a1a      	ldr	r2, [r3, #32]
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <GUI_Animation_move+0x190>)
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d001      	beq.n	8000abc <GUI_Animation_move+0x13c>
		{
			GUI_CLEAR_SCREEN();
 8000ab8:	f7ff fe04 	bl	80006c4 <GUI_CLEAR_SCREEN>
		}

		GUI_Show_Image(Sys_MainPage.right_icon.current_x,Sys_MainPage.right_icon.current_y,44,44,Set_Icon);
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <GUI_Animation_move+0x190>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <GUI_Animation_move+0x190>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	b219      	sxth	r1, r3
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <GUI_Animation_move+0x198>)
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	232c      	movs	r3, #44	; 0x2c
 8000ace:	222c      	movs	r2, #44	; 0x2c
 8000ad0:	f7ff fe1e 	bl	8000710 <GUI_Show_Image>
		GUI_Show_Image(Sys_MainPage.mid_icon.current_x,Sys_MainPage.mid_icon.current_y,44,44,train_Icon);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <GUI_Animation_move+0x190>)
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	b218      	sxth	r0, r3
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <GUI_Animation_move+0x190>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	b219      	sxth	r1, r3
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <GUI_Animation_move+0x19c>)
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	232c      	movs	r3, #44	; 0x2c
 8000ae6:	222c      	movs	r2, #44	; 0x2c
 8000ae8:	f7ff fe12 	bl	8000710 <GUI_Show_Image>
		GUI_Show_Image(Sys_MainPage.left_icon.current_x,Sys_MainPage.left_icon.current_y,44,44,config_Icon);
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <GUI_Animation_move+0x190>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	b218      	sxth	r0, r3
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <GUI_Animation_move+0x190>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	b219      	sxth	r1, r3
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <GUI_Animation_move+0x1a0>)
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	232c      	movs	r3, #44	; 0x2c
 8000afe:	222c      	movs	r2, #44	; 0x2c
 8000b00:	f7ff fe06 	bl	8000710 <GUI_Show_Image>
		
		Bsp_DelayMS(2);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fb40 	bl	800118a <Bsp_DelayMS>
		return;
 8000b0a:	bf00      	nop
	// 	return;
	// }
	
	
	
}
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b10:	20000038 	.word	0x20000038
 8000b14:	20000000 	.word	0x20000000
 8000b18:	08001d68 	.word	0x08001d68
 8000b1c:	08001f78 	.word	0x08001f78
 8000b20:	08001e70 	.word	0x08001e70

08000b24 <GUI_Shift_Menu>:
*参    数:'' 
*返 回 值:'' 
*说    明: '每次按键按完才能调用一次，不能频繁调用' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void GUI_Shift_Menu(uint8_t currentPage,uint8_t targetPage){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71bb      	strb	r3, [r7, #6]
	u8 base_x = 42,	Delta_x = 44;
 8000b34:	232a      	movs	r3, #42	; 0x2a
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	232c      	movs	r3, #44	; 0x2c
 8000b3a:	73bb      	strb	r3, [r7, #14]
	u8 base_y = 18; //Delta_y = 7
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	737b      	strb	r3, [r7, #13]
	if (currentPage == SYSTEM_MAIN_PAGE)//处于ready状态
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d163      	bne.n	8000c0e <GUI_Shift_Menu+0xea>
	{
		switch (targetPage)
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	d862      	bhi.n	8000c12 <GUI_Shift_Menu+0xee>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <GUI_Shift_Menu+0x30>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b7d 	.word	0x08000b7d
 8000b58:	08000c13 	.word	0x08000c13
 8000b5c:	08000c13 	.word	0x08000c13
 8000b60:	08000b7d 	.word	0x08000b7d
 8000b64:	08000c13 	.word	0x08000c13
 8000b68:	08000c13 	.word	0x08000c13
 8000b6c:	08000bab 	.word	0x08000bab
 8000b70:	08000c13 	.word	0x08000c13
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000bdd 	.word	0x08000bdd
		{
			case SYSTEM_MAIN_PAGE:;
			case SYSTEM_TRAIN_MENU_SELECET_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000b80:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x ;
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000b8a:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x ;
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000b94:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 8000b96:	7b7b      	ldrb	r3, [r7, #13]
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000b9a:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 8000b9c:	7b7b      	ldrb	r3, [r7, #13]
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000ba0:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;
 8000ba2:	7b7b      	ldrb	r3, [r7, #13]
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8000ba8:	e034      	b.n	8000c14 <GUI_Shift_Menu+0xf0>
			case SYSTEM_EDIT_MENU_SELECT_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x + Delta_x;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bb2:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x + Delta_x;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bb8:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x + Delta_x;
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	441a      	add	r2, r3
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bc6:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bcc:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 8000bce:	7b7b      	ldrb	r3, [r7, #13]
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bd2:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;break;
 8000bd4:	7b7b      	ldrb	r3, [r7, #13]
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bda:	e01b      	b.n	8000c14 <GUI_Shift_Menu+0xf0>
			case SYSTEM_CONFIG_PAGE:
				Sys_MainPage.mid_icon.target_x =  base_x - Delta_x;
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000be4:	6193      	str	r3, [r2, #24]
				Sys_MainPage.left_icon.target_x = base_x - Delta_x - Delta_x ;
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bf2:	6093      	str	r3, [r2, #8]
				Sys_MainPage.right_icon.target_x = base_x + Delta_x - Delta_x;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bf8:	6293      	str	r3, [r2, #40]	; 0x28

				Sys_MainPage.mid_icon.target_y = base_y; 
 8000bfa:	7b7b      	ldrb	r3, [r7, #13]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000bfe:	61d3      	str	r3, [r2, #28]
				Sys_MainPage.left_icon.target_y = base_y ;
 8000c00:	7b7b      	ldrb	r3, [r7, #13]
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000c04:	60d3      	str	r3, [r2, #12]
				Sys_MainPage.right_icon.target_y = base_y ;break;
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <GUI_Shift_Menu+0xfc>)
 8000c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c0c:	e002      	b.n	8000c14 <GUI_Shift_Menu+0xf0>
		
	
	
	
	
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <GUI_Shift_Menu+0xf0>
				break;
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000038 	.word	0x20000038

08000c24 <Key_Trig_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Trig_Handler(void){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

    if (KEY_IS_CONFIRM_PRESS()){
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <Key_Trig_Handler+0x2c>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <Key_Trig_Handler+0x24>
        KeyCtrl.confirm_holding_timeout = HOLDING_3_SECOND;   //
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Key_Trig_Handler+0x2c>)
 8000c3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c40:	811a      	strh	r2, [r3, #8]
        KeyCtrl.confirm_hold_status = HOLD_START_3SEC;
 8000c42:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <Key_Trig_Handler+0x2c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	735a      	strb	r2, [r3, #13]
    }
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000024 	.word	0x20000024

08000c54 <Key_release_Handler>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_release_Handler(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    if (KEY_IS_UP_RELEASE()){
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <Key_release_Handler+0x64>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <Key_release_Handler+0x1a>
        System_GUIPagepointer_Add();
 8000c6a:	f000 f927 	bl	8000ebc <System_GUIPagepointer_Add>
    }
    if (KEY_IS_DOWN_RELEASE()){
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <Key_release_Handler+0x64>)
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <Key_release_Handler+0x30>
        System_GUIPagepointer_Sub();
 8000c80:	f000 f90e 	bl	8000ea0 <System_GUIPagepointer_Sub>
    }
    if (KEY_IS_SET_RELEASE())
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <Key_release_Handler+0x64>)
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <Key_release_Handler+0x48>
    {
        KeyCtrl.set_hold_status = HOLD_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <Key_release_Handler+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	731a      	strb	r2, [r3, #12]
    }
    if (KEY_IS_CONFIRM_RELEASE())
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <Key_release_Handler+0x64>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <Key_release_Handler+0x60>
    {
        KeyCtrl.set_hold_status = HOLD_NONE;
 8000cae:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <Key_release_Handler+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	731a      	strb	r2, [r3, #12]
    }
    

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000024 	.word	0x20000024

08000cbc <Key_Hold_Handler>:

Key_status_t Key_Read_SetStatus(){
    return KeyCtrl.set_hold_status;
}

void Key_Hold_Handler(void){
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
    switch (KeyCtrl.confirm_hold_status)
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <Key_Hold_Handler+0x14>)
 8000cc2:	7b5b      	ldrb	r3, [r3, #13]
 8000cc4:	2b02      	cmp	r3, #2
        case HOLD_ALREADY_3SEC:
            //做额外操作
            break;
    
        default:
            break;
 8000cc6:	bf00      	nop
    }
    

}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000024 	.word	0x20000024

08000cd4 <Key_Process>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Key_Process(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
    u8 i = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	71fb      	strb	r3, [r7, #7]
    u8 key_mask = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71bb      	strb	r3, [r7, #6]
    
    for ( i = 0; i < KEYS_NUM; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	e052      	b.n	8000d8e <Key_Process+0xba>
    {
        /***              去抖           ***/
        if(Bsp_KEY_Probe(i))
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fb60 	bl	80013b0 <Bsp_KEY_Probe>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d021      	beq.n	8000d3a <Key_Process+0x66>
        {
            if (Key[i].Tmr1ms <= KEY_DEBOUNCE_TIME)          //这种方式可以避免阻塞系统
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a5a      	ldr	r2, [pc, #360]	; (8000e64 <Key_Process+0x190>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	2b14      	cmp	r3, #20
 8000cfe:	d840      	bhi.n	8000d82 <Key_Process+0xae>
            {
                if ( ++Key[i].Tmr1ms > KEY_DEBOUNCE_TIME)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a58      	ldr	r2, [pc, #352]	; (8000e64 <Key_Process+0x190>)
 8000d04:	5cd2      	ldrb	r2, [r2, r3]
 8000d06:	3201      	adds	r2, #1
 8000d08:	b2d1      	uxtb	r1, r2
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <Key_Process+0x190>)
 8000d0c:	54d1      	strb	r1, [r2, r3]
 8000d0e:	4a55      	ldr	r2, [pc, #340]	; (8000e64 <Key_Process+0x190>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	2b14      	cmp	r3, #20
 8000d14:	d935      	bls.n	8000d82 <Key_Process+0xae>
                {
                    KeyCtrl.cache |= key_mask ;
 8000d16:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <Key_Process+0x194>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <Key_Process+0x194>)
 8000d30:	7813      	ldrb	r3, [r2, #0]
 8000d32:	f361 0303 	bfi	r3, r1, #0, #4
 8000d36:	7013      	strb	r3, [r2, #0]
 8000d38:	e023      	b.n	8000d82 <Key_Process+0xae>
                }
            }
        }else{
            if (Key[i].Tmr1ms)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <Key_Process+0x190>)
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01e      	beq.n	8000d82 <Key_Process+0xae>
            {
                if (--Key[i].Tmr1ms == 0)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <Key_Process+0x190>)
 8000d48:	5cd2      	ldrb	r2, [r2, r3]
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	b2d1      	uxtb	r1, r2
 8000d4e:	4a45      	ldr	r2, [pc, #276]	; (8000e64 <Key_Process+0x190>)
 8000d50:	54d1      	strb	r1, [r2, r3]
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <Key_Process+0x190>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d113      	bne.n	8000d82 <Key_Process+0xae>
                {
                    KeyCtrl.cache &= ~key_mask ;
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <Key_Process+0x194>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	b2d9      	uxtb	r1, r3
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <Key_Process+0x194>)
 8000d7a:	7813      	ldrb	r3, [r2, #0]
 8000d7c:	f361 0303 	bfi	r3, r1, #0, #4
 8000d80:	7013      	strb	r3, [r2, #0]
                }
            }
        }
        key_mask <<= 1;
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	71bb      	strb	r3, [r7, #6]
    for ( i = 0; i < KEYS_NUM; i++)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d9a9      	bls.n	8000ce8 <Key_Process+0x14>
    }

    if (KeyCtrl.cache != KeyCtrl.value)
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <Key_Process+0x194>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <Key_Process+0x194>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d039      	beq.n	8000e20 <Key_Process+0x14c>
    {
        KeyCtrl.trg = KeyCtrl.cache & (~KeyCtrl.value);      //只能检测新按下的  存储被按下的按键
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <Key_Process+0x194>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <Key_Process+0x194>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <Key_Process+0x194>)
 8000dd4:	7853      	ldrb	r3, [r2, #1]
 8000dd6:	f361 0303 	bfi	r3, r1, #0, #4
 8000dda:	7053      	strb	r3, [r2, #1]
        KeyCtrl.release = (~KeyCtrl.cache) & KeyCtrl.value;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <Key_Process+0x194>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <Key_Process+0x194>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <Key_Process+0x194>)
 8000e04:	7853      	ldrb	r3, [r2, #1]
 8000e06:	f361 1307 	bfi	r3, r1, #4, #4
 8000e0a:	7053      	strb	r3, [r2, #1]
        KeyCtrl.value = KeyCtrl.cache;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <Key_Process+0x194>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e14:	b2d9      	uxtb	r1, r3
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <Key_Process+0x194>)
 8000e18:	7813      	ldrb	r3, [r2, #0]
 8000e1a:	f361 1307 	bfi	r3, r1, #4, #4
 8000e1e:	7013      	strb	r3, [r2, #0]
    }
    
    if (KeyCtrl.trg)
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <Key_Process+0x194>)
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <Key_Process+0x168>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(1,6,"C",0);break;
        //     case 0x01: GUI_CLEAR_SCREEN();break;
        //     default:
        //     break;
        // }
        Key_Trig_Handler();
 8000e2e:	f7ff fef9 	bl	8000c24 <Key_Trig_Handler>
        KeyCtrl.trg = 0;
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <Key_Process+0x194>)
 8000e34:	7853      	ldrb	r3, [r2, #1]
 8000e36:	f36f 0303 	bfc	r3, #0, #4
 8000e3a:	7053      	strb	r3, [r2, #1]
    }

    if (KeyCtrl.release)
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <Key_Process+0x194>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <Key_Process+0x184>
        //     case 0x02: GUI_SPI_Display_Char_ASCII(5,4,"G",0);break;
        //     case 0x01: GUI_SPI_Display_Char_ASCII(5,5,"H",0);break;
        //     default:
        //     break;
        // }
        Key_release_Handler();
 8000e4a:	f7ff ff03 	bl	8000c54 <Key_release_Handler>
        KeyCtrl.release = 0;
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <Key_Process+0x194>)
 8000e50:	7853      	ldrb	r3, [r2, #1]
 8000e52:	f36f 1307 	bfc	r3, #4, #4
 8000e56:	7053      	strb	r3, [r2, #1]
    }

    Key_Hold_Handler();
 8000e58:	f7ff ff30 	bl	8000cbc <Key_Hold_Handler>
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000020 	.word	0x20000020
 8000e68:	20000024 	.word	0x20000024

08000e6c <System_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '页面初始化 设置默认页面' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Init(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    SystemCtrl.currentPage = SYSTEM_MAIN_PAGE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <System_Init+0x30>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
    SystemCtrl.targetPage = SYSTEM_MAIN_PAGE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <System_Init+0x30>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
    SystemCtrl.GUIpagePoint = 1; 
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <System_Init+0x30>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	709a      	strb	r2, [r3, #2]
    GUI_CLEAR_SCREEN();
 8000e82:	f7ff fc1f 	bl	80006c4 <GUI_CLEAR_SCREEN>
    GUI_Shift_Menu( SystemCtrl.currentPage,SystemCtrl.targetPage);
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <System_Init+0x30>)
 8000e88:	785b      	ldrb	r3, [r3, #1]
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <System_Init+0x30>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe47 	bl	8000b24 <GUI_Shift_Menu>
};
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000034 	.word	0x20000034

08000ea0 <System_GUIPagepointer_Sub>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_GUIPagepointer_Sub(void){
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
    SystemCtrl.GUIpagePoint--;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <System_GUIPagepointer_Sub+0x18>)
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <System_GUIPagepointer_Sub+0x18>)
 8000eae:	709a      	strb	r2, [r3, #2]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000034 	.word	0x20000034

08000ebc <System_GUIPagepointer_Add>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_GUIPagepointer_Add(void){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    SystemCtrl.GUIpagePoint++;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <System_GUIPagepointer_Add+0x18>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <System_GUIPagepointer_Add+0x18>)
 8000eca:	709a      	strb	r2, [r3, #2]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000034 	.word	0x20000034

08000ed8 <System_MainPage_Operation>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_MainPage_Operation(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

    if (SystemCtrl.GUIpagePoint > MainPage_EndIndex)
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d902      	bls.n	8000eea <System_MainPage_Operation+0x12>
    {
        SystemCtrl.GUIpagePoint = MainPage_BeginIndex;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	709a      	strb	r2, [r3, #2]
    }
    if (SystemCtrl.GUIpagePoint < MainPage_BeginIndex)
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <System_MainPage_Operation+0x20>
    {
        SystemCtrl.GUIpagePoint = MainPage_EndIndex;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	709a      	strb	r2, [r3, #2]
    }
    
    SystemCtrl.targetPage = SystemCtrl.GUIpagePoint * MainPage_MultiPower;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	461a      	mov	r2, r3
 8000efe:	0052      	lsls	r2, r2, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000f06:	701a      	strb	r2, [r3, #0]
    
    if (KEY_IS_SET_RELEASE()){
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <System_MainPage_Operation+0x64>)
 8000f0a:	785b      	ldrb	r3, [r3, #1]
 8000f0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <System_MainPage_Operation+0x4a>
        SystemCtrl.currentPage = SystemCtrl.targetPage;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000f20:	705a      	strb	r2, [r3, #1]
    }

    GUI_Shift_Menu(SystemCtrl.currentPage,SystemCtrl.targetPage);
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <System_MainPage_Operation+0x60>)
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fdf9 	bl	8000b24 <GUI_Shift_Menu>
    
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000034 	.word	0x20000034
 8000f3c:	20000024 	.word	0x20000024

08000f40 <System_Poll>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void System_Poll(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

    switch (SystemCtrl.currentPage)
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <System_Poll+0x4c>)
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	d81a      	bhi.n	8000f82 <System_Poll+0x42>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <System_Poll+0x14>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f7d 	.word	0x08000f7d
 8000f58:	08000f83 	.word	0x08000f83
 8000f5c:	08000f83 	.word	0x08000f83
 8000f60:	08000f83 	.word	0x08000f83
 8000f64:	08000f83 	.word	0x08000f83
 8000f68:	08000f83 	.word	0x08000f83
 8000f6c:	08000f83 	.word	0x08000f83
 8000f70:	08000f83 	.word	0x08000f83
 8000f74:	08000f83 	.word	0x08000f83
 8000f78:	08000f83 	.word	0x08000f83
    {
        case SYSTEM_MAIN_PAGE:
            System_MainPage_Operation();break;
 8000f7c:	f7ff ffac 	bl	8000ed8 <System_MainPage_Operation>
 8000f80:	e000      	b.n	8000f84 <System_Poll+0x44>
            break;
        case SYSTEM_CONFIG_PAGE:
            
            break;
        default:
            break;
 8000f82:	bf00      	nop
    }
    
    GUI_Animation_move();
 8000f84:	f7ff fcfc 	bl	8000980 <GUI_Animation_move>

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000034 	.word	0x20000034

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <SystemInit+0x5c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <SystemInit+0x5c>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <SystemInit+0x5c>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4911      	ldr	r1, [pc, #68]	; (8000fec <SystemInit+0x5c>)
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <SystemInit+0x60>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <SystemInit+0x5c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <SystemInit+0x5c>)
 8000fb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <SystemInit+0x5c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SystemInit+0x5c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <SystemInit+0x5c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <SystemInit+0x5c>)
 8000fce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SystemInit+0x5c>)
 8000fd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000fda:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000fdc:	f000 f80c 	bl	8000ff8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SystemInit+0x64>)
 8000fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	f8ff0000 	.word	0xf8ff0000
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000ffc:	f000 f802 	bl	8001004 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <SetSysClockTo72+0xf8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a39      	ldr	r2, [pc, #228]	; (80010fc <SetSysClockTo72+0xf8>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <SetSysClockTo72+0xf8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <SetSysClockTo72+0x38>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800103a:	d1f0      	bne.n	800101e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <SetSysClockTo72+0xf8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001048:	2301      	movs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	e001      	b.n	8001052 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d14b      	bne.n	80010f0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <SetSysClockTo72+0xfc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <SetSysClockTo72+0xfc>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <SetSysClockTo72+0xfc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <SetSysClockTo72+0xfc>)
 800106a:	f023 0303 	bic.w	r3, r3, #3
 800106e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <SetSysClockTo72+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <SetSysClockTo72+0xfc>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <SetSysClockTo72+0xf8>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <SetSysClockTo72+0xf8>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <SetSysClockTo72+0xf8>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <SetSysClockTo72+0xf8>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <SetSysClockTo72+0xf8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <SetSysClockTo72+0xf8>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <SetSysClockTo72+0xf8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <SetSysClockTo72+0xf8>)
 800109e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010a2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <SetSysClockTo72+0xf8>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <SetSysClockTo72+0xf8>)
 80010aa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80010ae:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <SetSysClockTo72+0xf8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <SetSysClockTo72+0xf8>)
 80010b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ba:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010bc:	bf00      	nop
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <SetSysClockTo72+0xf8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f9      	beq.n	80010be <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <SetSysClockTo72+0xf8>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <SetSysClockTo72+0xf8>)
 80010d0:	f023 0303 	bic.w	r3, r3, #3
 80010d4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <SetSysClockTo72+0xf8>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <SetSysClockTo72+0xf8>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80010e2:	bf00      	nop
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SetSysClockTo72+0xf8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d1f9      	bne.n	80010e4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	40022000 	.word	0x40022000

08001104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff ff44 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <LoopFillZerobss+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001120:	4c09      	ldr	r4, [pc, #36]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f000 fdeb 	bl	8001d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff fa8f 	bl	8000654 <main>
  bx lr
 8001136:	4770      	bx	lr
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001140:	08002088 	.word	0x08002088
  ldr r2, =_sbss
 8001144:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001148:	200004a4 	.word	0x200004a4

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>

0800114e <__NOP>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <Bsp_DelayUS>:
*返 回 值:'' 
*说    明: '采用阻塞方式的延时' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayUS(uint32_t xus)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	// SysTick->LOAD = 72 * xus;				//设置定时器重装值
	// SysTick->VAL = 0x00;					//清空当前计数值
	// SysTick->CTRL = 0x00000005;				//设置时钟源为HCLK，启动定时器
	// while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
	// SysTick->CTRL = 0x00000004;				//关闭定时器
    __IO uint32_t us= xus * 2;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
    while (us > 0)
 800116a:	e006      	b.n	800117a <Bsp_DelayUS+0x1e>
    {
        us--;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3b01      	subs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
        __NOP();
 8001172:	f7ff ffec 	bl	800114e <__NOP>
        __NOP();
 8001176:	f7ff ffea 	bl	800114e <__NOP>
    while (us > 0)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f5      	bne.n	800116c <Bsp_DelayUS+0x10>
    }
    
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <Bsp_DelayMS>:
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_DelayMS(uint32_t xms)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	while(xms--)
 8001192:	e003      	b.n	800119c <Bsp_DelayMS+0x12>
	{
		Bsp_DelayUS(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f7ff ffe0 	bl	800115c <Bsp_DelayUS>
	while(xms--)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f6      	bne.n	8001194 <Bsp_DelayMS+0xa>
	}
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <Bsp_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Init(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	Bsp_GPIO_Init();
 80011b4:	f000 f88c 	bl	80012d0 <Bsp_GPIO_Init>
	Bsp_SPI_Init();	
 80011b8:	f000 f946 	bl	8001448 <Bsp_SPI_Init>
    Bsp_Flash_Init();
 80011bc:	f000 f85a 	bl	8001274 <Bsp_Flash_Init>
	//Bsp_I2C_Init();
    
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <Bsp_SPI_DMA_Init>:
#include "bsp.h"

uint8_t GUI_DISPLAY_BUF[8][128];

void Bsp_SPI_DMA_Init(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
    
    DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 					//使能 DMA 时钟
 80011ca:	2101      	movs	r1, #1
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 fc3f 	bl	8001a50 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel3);
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <Bsp_SPI_DMA_Init+0x60>)
 80011d4:	f000 f9b4 	bl	8001540 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI1->DR; 			//DMA 外设 ADC 基地址
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <Bsp_SPI_DMA_Init+0x64>)
 80011da:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&GUI_DISPLAY_BUF; 		//DMA 内存基地址
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <Bsp_SPI_DMA_Init+0x68>)
 80011de:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; 					//从储存器读取发送到外设
 80011e0:	2310      	movs	r3, #16
 80011e2:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = 1024; 							//DMA 通道的 DMA 缓存的大小
 80011e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e8:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不变
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 			//内存地址递增
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; //8 位
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; 	// 8 位
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 					//工作在循环传输模式
 80011fa:	2320      	movs	r3, #32
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; 				//DMA 通道 x 拥有中优先级
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 						//非内存到内存传输
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel3, &DMA_InitStructure); //根据指定的参数初始化
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <Bsp_SPI_DMA_Init+0x60>)
 800120e:	f000 fa53 	bl	80016b8 <DMA_Init>

	DMA_Cmd(DMA1_Channel3, ENABLE); //使能DMA1 CH3所指示的通道
 8001212:	2101      	movs	r1, #1
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <Bsp_SPI_DMA_Init+0x60>)
 8001216:	f000 fa8d 	bl	8001734 <DMA_Cmd>
}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020030 	.word	0x40020030
 8001228:	4001300c 	.word	0x4001300c
 800122c:	20000098 	.word	0x20000098

08001230 <DMA1_Channel6_IRQHandler>:
	DMA_Cmd(DMA1_Channel6, ENABLE); //使能DMA1 CH3所指示的通道
	DMA_Cmd(DMA1_Channel6, DISABLE); 
	DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);
}

void DMA1_Channel6_IRQHandler(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC6))
 8001234:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001238:	f000 fa98 	bl	800176c <DMA_GetFlagStatus>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <DMA1_Channel6_IRQHandler+0x38>
	{
		DMA_ClearFlag(DMA1_FLAG_TC6);
 8001242:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001246:	f000 fab9 	bl	80017bc <DMA_ClearFlag>
		Bsp_DelayUS(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f7ff ff86 	bl	800115c <Bsp_DelayUS>
		I2C_GenerateSTOP(GUI_I2C,ENABLE);
 8001250:	2101      	movs	r1, #1
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <DMA1_Channel6_IRQHandler+0x3c>)
 8001254:	f000 fbbd 	bl	80019d2 <I2C_GenerateSTOP>
		I2C_AcknowledgeConfig(GUI_I2C,ENABLE);
 8001258:	2101      	movs	r1, #1
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <DMA1_Channel6_IRQHandler+0x3c>)
 800125c:	f000 fbd8 	bl	8001a10 <I2C_AcknowledgeConfig>
		DMA_Cmd(DMA1_Channel6, DISABLE);
 8001260:	2100      	movs	r1, #0
 8001262:	4803      	ldr	r0, [pc, #12]	; (8001270 <DMA1_Channel6_IRQHandler+0x40>)
 8001264:	f000 fa66 	bl	8001734 <DMA_Cmd>
	}
}	
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40005400 	.word	0x40005400
 8001270:	4002006c 	.word	0x4002006c

08001274 <Bsp_Flash_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '初始化flash' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_Flash_Init(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef FLASH_SPI_InitStruct;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 , ENABLE);
 800127a:	2101      	movs	r1, #1
 800127c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001280:	f000 fc22 	bl	8001ac8 <RCC_APB1PeriphClockCmd>
    
    SPI_I2S_DeInit(FLASH_SPI);
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <Bsp_Flash_Init+0x58>)
 8001286:	f000 fc79 	bl	8001b7c <SPI_I2S_DeInit>
    FLASH_SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800128a:	2300      	movs	r3, #0
 800128c:	80bb      	strh	r3, [r7, #4]
    FLASH_SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800128e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001292:	80fb      	strh	r3, [r7, #6]
    FLASH_SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8001294:	2300      	movs	r3, #0
 8001296:	813b      	strh	r3, [r7, #8]
    FLASH_SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 8001298:	2300      	movs	r3, #0
 800129a:	817b      	strh	r3, [r7, #10]
    FLASH_SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                  //奇数边沿
 800129c:	2300      	movs	r3, #0
 800129e:	81bb      	strh	r3, [r7, #12]
    FLASH_SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	81fb      	strh	r3, [r7, #14]
    FLASH_SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 80012a6:	2330      	movs	r3, #48	; 0x30
 80012a8:	823b      	strh	r3, [r7, #16]
    FLASH_SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 80012aa:	2300      	movs	r3, #0
 80012ac:	827b      	strh	r3, [r7, #18]
    FLASH_SPI_InitStruct.SPI_CRCPolynomial = 7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	82bb      	strh	r3, [r7, #20]

    SPI_Init(FLASH_SPI,&FLASH_SPI_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <Bsp_Flash_Init+0x58>)
 80012b8:	f000 fc9a 	bl	8001bf0 <SPI_Init>
    
    SPI_Cmd(FLASH_SPI,ENABLE);
 80012bc:	2101      	movs	r1, #1
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <Bsp_Flash_Init+0x58>)
 80012c0:	f000 fcd9 	bl	8001c76 <SPI_Cmd>
    
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <Bsp_GPIO_Init>:
GPIO_InitTypeDef GPIO_InitStruct_OUT_PP;
GPIO_InitTypeDef GPIO_InitStruct_AF_OD;
GPIO_InitTypeDef GPIO_InitStruct_IN_UP;  //输入下拉


void Bsp_GPIO_Init(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    /*------------中断优先级--------------*/
    
    /*------------*/


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 80012d4:	2101      	movs	r1, #1
 80012d6:	2004      	movs	r0, #4
 80012d8:	f000 fbd8 	bl	8001a8c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB , ENABLE);
 80012dc:	2101      	movs	r1, #1
 80012de:	2009      	movs	r0, #9
 80012e0:	f000 fbd4 	bl	8001a8c <RCC_APB2PeriphClockCmd>
    
    #if defined(GUI_SPI_MODE_SUPPORT)
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <Bsp_GPIO_Init+0xcc>)
 80012e6:	2218      	movs	r2, #24
 80012e8:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <Bsp_GPIO_Init+0xcc>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = GUI_MOSI_PIN | GUI_SCK_PIN;
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <Bsp_GPIO_Init+0xcc>)
 80012f2:	22a0      	movs	r2, #160	; 0xa0
 80012f4:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 80012f8:	2210      	movs	r2, #16
 80012fa:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 80012fe:	2203      	movs	r2, #3
 8001300:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = GUI_RST_PIN | GUI_DC_PIN;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 8001304:	2250      	movs	r2, #80	; 0x50
 8001306:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA, &GPIO_InitStruct_AF_PP);
 8001308:	4924      	ldr	r1, [pc, #144]	; (800139c <Bsp_GPIO_Init+0xcc>)
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <Bsp_GPIO_Init+0xd4>)
 800130c:	f000 fa70 	bl	80017f0 <GPIO_Init>
        GPIO_Init(GPIOA, &GPIO_InitStruct_OUT_PP);
 8001310:	4923      	ldr	r1, [pc, #140]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 8001312:	4824      	ldr	r0, [pc, #144]	; (80013a4 <Bsp_GPIO_Init+0xd4>)
 8001314:	f000 fa6c 	bl	80017f0 <GPIO_Init>
        GPIO_Init(GPIOB,&GPIO_InitStruct_AF_OD);

    #endif

    #ifdef KEY_Marix
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 800131a:	2248      	movs	r2, #72	; 0x48
 800131c:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001320:	2203      	movs	r2, #3
 8001322:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_UP_PIN | KEY_DOWN_PIN | KEY_SET_PIN;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001326:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800132a:	801a      	strh	r2, [r3, #0]

        GPIO_Init(GPIOA,&GPIO_InitStruct_IN_UP);
 800132c:	491e      	ldr	r1, [pc, #120]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 800132e:	481d      	ldr	r0, [pc, #116]	; (80013a4 <Bsp_GPIO_Init+0xd4>)
 8001330:	f000 fa5e 	bl	80017f0 <GPIO_Init>
        GPIO_InitStruct_IN_UP.GPIO_Pin = KEY_COMFIRM_PIN;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001336:	2220      	movs	r2, #32
 8001338:	801a      	strh	r2, [r3, #0]
        GPIO_Init(GPIOB,&GPIO_InitStruct_IN_UP);
 800133a:	491b      	ldr	r1, [pc, #108]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 800133c:	481b      	ldr	r0, [pc, #108]	; (80013ac <Bsp_GPIO_Init+0xdc>)
 800133e:	f000 fa57 	bl	80017f0 <GPIO_Init>
    #endif

    #ifdef FLASH_SPI_SUPPORT
        GPIO_InitStruct_AF_PP.GPIO_Mode = GPIO_Mode_AF_PP;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <Bsp_GPIO_Init+0xcc>)
 8001344:	2218      	movs	r2, #24
 8001346:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_AF_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <Bsp_GPIO_Init+0xcc>)
 800134a:	2203      	movs	r2, #3
 800134c:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_AF_PP.GPIO_Pin = FLASH_SPI_DI_PIN | FLASH_SPI_CLK_PIN ;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <Bsp_GPIO_Init+0xcc>)
 8001350:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001354:	801a      	strh	r2, [r3, #0]
        
        GPIO_InitStruct_IN_UP.GPIO_Mode = GPIO_Mode_IPU;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001358:	2248      	movs	r2, #72	; 0x48
 800135a:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_IN_UP.GPIO_Speed = GPIO_Speed_50MHz;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 800135e:	2203      	movs	r2, #3
 8001360:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_IN_UP.GPIO_Pin = FLASH_SPI_DO_PIN;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001364:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001368:	801a      	strh	r2, [r3, #0]

        GPIO_InitStruct_OUT_PP.GPIO_Mode = GPIO_Mode_Out_PP;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 800136c:	2210      	movs	r2, #16
 800136e:	70da      	strb	r2, [r3, #3]
        GPIO_InitStruct_OUT_PP.GPIO_Speed = GPIO_Speed_50MHz;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 8001372:	2203      	movs	r2, #3
 8001374:	709a      	strb	r2, [r3, #2]
        GPIO_InitStruct_OUT_PP.GPIO_Pin = FLASH_SPI_CS_PIN;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 8001378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137c:	801a      	strh	r2, [r3, #0]
        
        GPIO_Init(GPIOB, &GPIO_InitStruct_OUT_PP);
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <Bsp_GPIO_Init+0xd0>)
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <Bsp_GPIO_Init+0xdc>)
 8001382:	f000 fa35 	bl	80017f0 <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_AF_PP);
 8001386:	4905      	ldr	r1, [pc, #20]	; (800139c <Bsp_GPIO_Init+0xcc>)
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <Bsp_GPIO_Init+0xdc>)
 800138a:	f000 fa31 	bl	80017f0 <GPIO_Init>
        GPIO_Init(GPIOB, &GPIO_InitStruct_IN_UP);
 800138e:	4906      	ldr	r1, [pc, #24]	; (80013a8 <Bsp_GPIO_Init+0xd8>)
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <Bsp_GPIO_Init+0xdc>)
 8001392:	f000 fa2d 	bl	80017f0 <GPIO_Init>
    #endif

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000498 	.word	0x20000498
 80013a0:	2000049c 	.word	0x2000049c
 80013a4:	40010800 	.word	0x40010800
 80013a8:	200004a0 	.word	0x200004a0
 80013ac:	40010c00 	.word	0x40010c00

080013b0 <Bsp_KEY_Probe>:
*参    数:'void' 
*返 回 值:'none' 
*说    明: '返回 0 表示按键按下 返回 1 表示按键释放' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
uint8_t Bsp_KEY_Probe(uint8_t key){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    switch (key)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d83a      	bhi.n	8001436 <Bsp_KEY_Probe+0x86>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <Bsp_KEY_Probe+0x18>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	080013f1 	.word	0x080013f1
 80013d0:	08001409 	.word	0x08001409
 80013d4:	08001421 	.word	0x08001421
    {
        case KEY_UP: return (GPIO_ReadInputDataBit(KEY_UP_PORT,KEY_UP_PIN) == 0); break;   //这里用 == 0 而不直接读取值，有两个好处 向上层屏蔽了按下和没按下的底层逻辑，上层只需要知道 按下为1 未按下0，如果后续出现改动比如 电平0为释放 1为按下 不用对上层做对应的变化，符合分层 对上层屏蔽细节的作用，便于维护 与阅读 （告诉读者 当前针对 0）
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <Bsp_KEY_Probe+0x90>)
 80013de:	f000 fac3 	bl	8001968 <GPIO_ReadInputDataBit>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e023      	b.n	8001438 <Bsp_KEY_Probe+0x88>
        case KEY_DOWN:return (GPIO_ReadInputDataBit(KEY_DOWN_PORT,KEY_DOWN_PIN) == 0); break;
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <Bsp_KEY_Probe+0x90>)
 80013f6:	f000 fab7 	bl	8001968 <GPIO_ReadInputDataBit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e017      	b.n	8001438 <Bsp_KEY_Probe+0x88>
        case KEY_SET:return (GPIO_ReadInputDataBit(KEY_SET_PORT,KEY_SET_PIN) == 0);  break;
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <Bsp_KEY_Probe+0x90>)
 800140e:	f000 faab 	bl	8001968 <GPIO_ReadInputDataBit>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	e00b      	b.n	8001438 <Bsp_KEY_Probe+0x88>
        case KEY_CONFIRM: return (GPIO_ReadInputDataBit(KEY_COMFIRM_PORT,KEY_COMFIRM_PIN) == 0); break;
 8001420:	2120      	movs	r1, #32
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <Bsp_KEY_Probe+0x94>)
 8001424:	f000 faa0 	bl	8001968 <GPIO_ReadInputDataBit>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	e000      	b.n	8001438 <Bsp_KEY_Probe+0x88>
    }
    return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00

08001448 <Bsp_SPI_Init>:
*参    数:'' 
*返 回 值:'' 
*说    明: '' 
*作    者:Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
    
    SPI_InitTypeDef SPI_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 , ENABLE);
 800144e:	2101      	movs	r1, #1
 8001450:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001454:	f000 fb1a 	bl	8001a8c <RCC_APB2PeriphClockCmd>

    SPI_I2S_DeInit(GUI_SPI);
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <Bsp_SPI_Init+0x68>)
 800145a:	f000 fb8f 	bl	8001b7c <SPI_I2S_DeInit>
    SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 800145e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001462:	80bb      	strh	r3, [r7, #4]
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8001464:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001468:	80fb      	strh	r3, [r7, #6]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 800146a:	2300      	movs	r3, #0
 800146c:	813b      	strh	r3, [r7, #8]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                    //空闲 低
 800146e:	2300      	movs	r3, #0
 8001470:	817b      	strh	r3, [r7, #10]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001472:	2300      	movs	r3, #0
 8001474:	81bb      	strh	r3, [r7, #12]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147a:	81fb      	strh	r3, [r7, #14]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 800147c:	2318      	movs	r3, #24
 800147e:	823b      	strh	r3, [r7, #16]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;            //大端
 8001480:	2300      	movs	r3, #0
 8001482:	827b      	strh	r3, [r7, #18]
    SPI_InitStruct.SPI_CRCPolynomial = 7;
 8001484:	2307      	movs	r3, #7
 8001486:	82bb      	strh	r3, [r7, #20]

    SPI_Init(GUI_SPI,&SPI_InitStruct);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4808      	ldr	r0, [pc, #32]	; (80014b0 <Bsp_SPI_Init+0x68>)
 800148e:	f000 fbaf 	bl	8001bf0 <SPI_Init>
    //SPI1->CR1 &=0xfeff;
    SPI1->CR2=1 << 1;                                          //允许DMA往缓冲区内发送
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <Bsp_SPI_Init+0x68>)
 8001494:	2202      	movs	r2, #2
 8001496:	809a      	strh	r2, [r3, #4]
    
    SPI_Cmd(GUI_SPI,ENABLE);
 8001498:	2101      	movs	r1, #1
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <Bsp_SPI_Init+0x68>)
 800149c:	f000 fbeb 	bl	8001c76 <SPI_Cmd>
    Bsp_DelayMS(100);
 80014a0:	2064      	movs	r0, #100	; 0x64
 80014a2:	f7ff fe72 	bl	800118a <Bsp_DelayMS>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40013000 	.word	0x40013000

080014b4 <Bsp_SPI_Send_CMD>:
*函数功能:'SPI 发送 指令' 
*说    明: '发送完指令以后自动设置成发送数据模式' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_Send_CMD(uint8_t TxData)                                   //发送命令
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	uint8_t retry=0;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_CMD();                                              //命令模式
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <Bsp_SPI_Send_CMD+0x5c>)
 80014c6:	f000 fa76 	bl	80019b6 <GPIO_ResetBits>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 80014ca:	e005      	b.n	80014d8 <Bsp_SPI_Send_CMD+0x24>
	{
		retry++;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
		if(retry>200) return ;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2bc8      	cmp	r3, #200	; 0xc8
 80014d6:	d816      	bhi.n	8001506 <Bsp_SPI_Send_CMD+0x52>
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的 SPI标志位设置与否:发送缓存空标志位
 80014d8:	2102      	movs	r1, #2
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <Bsp_SPI_Send_CMD+0x60>)
 80014dc:	f000 fbf8 	bl	8001cd0 <SPI_I2S_GetFlagStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f2      	beq.n	80014cc <Bsp_SPI_Send_CMD+0x18>
	}
	
	Bsp_DelayMS(100);
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f7ff fe4f 	bl	800118a <Bsp_DelayMS>
	SPI_I2S_SendData(SPI1, TxData);                                 //通过外设 SPIx 发送一个数据
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <Bsp_SPI_Send_CMD+0x60>)
 80014f4:	f000 fbde 	bl	8001cb4 <SPI_I2S_SendData>
	retry=0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
	Bsp_SPI_DC_DAT();                                               //数据模式
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <Bsp_SPI_Send_CMD+0x5c>)
 8001500:	f000 fa4b 	bl	800199a <GPIO_SetBits>
 8001504:	e000      	b.n	8001508 <Bsp_SPI_Send_CMD+0x54>
		if(retry>200) return ;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010800 	.word	0x40010800
 8001514:	40013000 	.word	0x40013000

08001518 <Bsp_SPI_RES_LOW>:
*函数名称:'Bsp_SPI_RES_LOW' 
*函数功能:'SPI RESET引脚 拉低' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_LOW(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

    GPIO_ResetBits(GPIOA,GUI_RST_PIN);
 800151c:	2110      	movs	r1, #16
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <Bsp_SPI_RES_LOW+0x10>)
 8001520:	f000 fa49 	bl	80019b6 <GPIO_ResetBits>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40010800 	.word	0x40010800

0800152c <Bsp_SPI_RES_HIGH>:
*函数名称:'Bsp_SPI_RES_HIGH' 
*函数功能:'SPI RESET引脚 拉高' 
*说    明: '配置或遇到通信问题时，将SPI接口恢复到初始状态或已知状态' 
*作    者: Danny 
*----------------------------------------------------------------------------------------*/ 
void Bsp_SPI_RES_HIGH(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA,GUI_RST_PIN);
 8001530:	2110      	movs	r1, #16
 8001532:	4802      	ldr	r0, [pc, #8]	; (800153c <Bsp_SPI_RES_HIGH+0x10>)
 8001534:	f000 fa31 	bl	800199a <GPIO_SetBits>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40010800 	.word	0x40010800

08001540 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a43      	ldr	r2, [pc, #268]	; (8001680 <DMA_DeInit+0x140>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d106      	bne.n	8001584 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <DMA_DeInit+0x144>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a42      	ldr	r2, [pc, #264]	; (8001684 <DMA_DeInit+0x144>)
 800157c:	f043 030f 	orr.w	r3, r3, #15
 8001580:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8001582:	e077      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a40      	ldr	r2, [pc, #256]	; (8001688 <DMA_DeInit+0x148>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d106      	bne.n	800159a <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800158c:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <DMA_DeInit+0x144>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <DMA_DeInit+0x144>)
 8001592:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001596:	6053      	str	r3, [r2, #4]
}
 8001598:	e06c      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a3b      	ldr	r2, [pc, #236]	; (800168c <DMA_DeInit+0x14c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d106      	bne.n	80015b0 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <DMA_DeInit+0x144>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a37      	ldr	r2, [pc, #220]	; (8001684 <DMA_DeInit+0x144>)
 80015a8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80015ac:	6053      	str	r3, [r2, #4]
}
 80015ae:	e061      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a37      	ldr	r2, [pc, #220]	; (8001690 <DMA_DeInit+0x150>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d106      	bne.n	80015c6 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <DMA_DeInit+0x144>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <DMA_DeInit+0x144>)
 80015be:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80015c2:	6053      	str	r3, [r2, #4]
}
 80015c4:	e056      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <DMA_DeInit+0x154>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d106      	bne.n	80015dc <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <DMA_DeInit+0x144>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <DMA_DeInit+0x144>)
 80015d4:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80015d8:	6053      	str	r3, [r2, #4]
}
 80015da:	e04b      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <DMA_DeInit+0x158>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d106      	bne.n	80015f2 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <DMA_DeInit+0x144>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <DMA_DeInit+0x144>)
 80015ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ee:	6053      	str	r3, [r2, #4]
}
 80015f0:	e040      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <DMA_DeInit+0x15c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d106      	bne.n	8001608 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <DMA_DeInit+0x144>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <DMA_DeInit+0x144>)
 8001600:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001604:	6053      	str	r3, [r2, #4]
}
 8001606:	e035      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <DMA_DeInit+0x160>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d106      	bne.n	800161e <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <DMA_DeInit+0x164>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <DMA_DeInit+0x164>)
 8001616:	f043 030f 	orr.w	r3, r3, #15
 800161a:	6053      	str	r3, [r2, #4]
}
 800161c:	e02a      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <DMA_DeInit+0x168>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d106      	bne.n	8001634 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <DMA_DeInit+0x164>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <DMA_DeInit+0x164>)
 800162c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001630:	6053      	str	r3, [r2, #4]
}
 8001632:	e01f      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <DMA_DeInit+0x16c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <DMA_DeInit+0x164>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <DMA_DeInit+0x164>)
 8001642:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001646:	6053      	str	r3, [r2, #4]
}
 8001648:	e014      	b.n	8001674 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <DMA_DeInit+0x170>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <DMA_DeInit+0x164>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <DMA_DeInit+0x164>)
 8001658:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800165c:	6053      	str	r3, [r2, #4]
}
 800165e:	e009      	b.n	8001674 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <DMA_DeInit+0x174>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d105      	bne.n	8001674 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <DMA_DeInit+0x164>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <DMA_DeInit+0x164>)
 800166e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001672:	6053      	str	r3, [r2, #4]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40020008 	.word	0x40020008
 8001684:	40020000 	.word	0x40020000
 8001688:	4002001c 	.word	0x4002001c
 800168c:	40020030 	.word	0x40020030
 8001690:	40020044 	.word	0x40020044
 8001694:	40020058 	.word	0x40020058
 8001698:	4002006c 	.word	0x4002006c
 800169c:	40020080 	.word	0x40020080
 80016a0:	40020408 	.word	0x40020408
 80016a4:	40020400 	.word	0x40020400
 80016a8:	4002041c 	.word	0x4002041c
 80016ac:	40020430 	.word	0x40020430
 80016b0:	40020444 	.word	0x40020444
 80016b4:	40020458 	.word	0x40020458

080016b8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016e6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001752:	e006      	b.n	8001762 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <DMA_GetFlagStatus+0x48>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	e002      	b.n	8001794 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <DMA_GetFlagStatus+0x4c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e001      	b.n	80017a8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020000 	.word	0x40020000

080017bc <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <DMA_ClearFlag+0x2c>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80017d4:	e002      	b.n	80017dc <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <DMA_ClearFlag+0x30>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6053      	str	r3, [r2, #4]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020000 	.word	0x40020000

080017f0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	78db      	ldrb	r3, [r3, #3]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	78db      	ldrb	r3, [r3, #3]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	789b      	ldrb	r3, [r3, #2]
 800182c:	461a      	mov	r2, r3
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4313      	orrs	r3, r2
 8001832:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	e038      	b.n	80018bc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800184a:	2201      	movs	r2, #1
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d126      	bne.n	80018b6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800186e:	220f      	movs	r2, #15
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	43db      	mvns	r3, r3
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4013      	ands	r3, r2
 8001880:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	2b28      	cmp	r3, #40	; 0x28
 8001896:	d105      	bne.n	80018a4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001898:	2201      	movs	r2, #1
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	409a      	lsls	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	e008      	b.n	80018b6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	78db      	ldrb	r3, [r3, #3]
 80018a8:	2b48      	cmp	r3, #72	; 0x48
 80018aa:	d104      	bne.n	80018b6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80018ac:	2201      	movs	r2, #1
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	409a      	lsls	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d9c3      	bls.n	800184a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d946      	bls.n	800195e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e03a      	b.n	8001952 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3308      	adds	r3, #8
 80018e0:	2201      	movs	r2, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d127      	bne.n	800194c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001902:	220f      	movs	r2, #15
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	43db      	mvns	r3, r3
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4013      	ands	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	2b28      	cmp	r3, #40	; 0x28
 800192a:	d105      	bne.n	8001938 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3308      	adds	r3, #8
 8001930:	2201      	movs	r2, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	78db      	ldrb	r3, [r3, #3]
 800193c:	2b48      	cmp	r3, #72	; 0x48
 800193e:	d105      	bne.n	800194c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	3308      	adds	r3, #8
 8001944:	2201      	movs	r2, #1
 8001946:	409a      	lsls	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	3301      	adds	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b07      	cmp	r3, #7
 8001956:	d9c1      	bls.n	80018dc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	605a      	str	r2, [r3, #4]
  }
}
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e001      	b.n	800198e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	611a      	str	r2, [r3, #16]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	615a      	str	r2, [r3, #20]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80019f4:	e007      	b.n	8001a06 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8001a32:	e007      	b.n	8001a44 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	801a      	strh	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <RCC_AHBPeriphClockCmd+0x38>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <RCC_AHBPeriphClockCmd+0x38>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001a6e:	e006      	b.n	8001a7e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <RCC_AHBPeriphClockCmd+0x38>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <RCC_AHBPeriphClockCmd+0x38>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	614b      	str	r3, [r1, #20]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <RCC_APB2PeriphClockCmd+0x38>)
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <RCC_APB2PeriphClockCmd+0x38>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001aaa:	e006      	b.n	8001aba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <RCC_APB2PeriphClockCmd+0x38>)
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <RCC_APB2PeriphClockCmd+0x38>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	618b      	str	r3, [r1, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <RCC_APB1PeriphClockCmd+0x38>)
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <RCC_APB1PeriphClockCmd+0x38>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001ae6:	e006      	b.n	8001af6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <RCC_APB1PeriphClockCmd+0x38>)
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <RCC_APB1PeriphClockCmd+0x38>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	61cb      	str	r3, [r1, #28]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <RCC_APB2PeriphResetCmd+0x38>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <RCC_APB2PeriphResetCmd+0x38>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001b22:	e006      	b.n	8001b32 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <RCC_APB2PeriphResetCmd+0x38>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <RCC_APB2PeriphResetCmd+0x38>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000

08001b40 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <RCC_APB1PeriphResetCmd+0x38>)
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <RCC_APB1PeriphResetCmd+0x38>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001b5e:	e006      	b.n	8001b6e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <RCC_APB1PeriphResetCmd+0x38>)
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <RCC_APB1PeriphResetCmd+0x38>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	610b      	str	r3, [r1, #16]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000

08001b7c <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <SPI_I2S_DeInit+0x68>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d10a      	bne.n	8001ba2 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b92:	f7ff ffb7 	bl	8001b04 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001b96:	2100      	movs	r1, #0
 8001b98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b9c:	f7ff ffb2 	bl	8001b04 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001ba0:	e01c      	b.n	8001bdc <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <SPI_I2S_DeInit+0x6c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10a      	bne.n	8001bc0 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001baa:	2101      	movs	r1, #1
 8001bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bb0:	f7ff ffc6 	bl	8001b40 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bba:	f7ff ffc1 	bl	8001b40 <RCC_APB1PeriphResetCmd>
}
 8001bbe:	e00d      	b.n	8001bdc <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SPI_I2S_DeInit+0x70>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d109      	bne.n	8001bdc <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bce:	f7ff ffb7 	bl	8001b40 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bd8:	f7ff ffb2 	bl	8001b40 <RCC_APB1PeriphResetCmd>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40003800 	.word	0x40003800
 8001bec:	40003c00 	.word	0x40003c00

08001bf0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001c0a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	89fa      	ldrh	r2, [r7, #14]
 8001c52:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8b9b      	ldrh	r3, [r3, #28]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	8a1a      	ldrh	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	821a      	strh	r2, [r3, #16]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001c98:	e007      	b.n	8001caa <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	801a      	strh	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	819a      	strh	r2, [r3, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	891b      	ldrh	r3, [r3, #8]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
	...

08001d08 <__libc_init_array>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	4d0c      	ldr	r5, [pc, #48]	; (8001d40 <__libc_init_array+0x38>)
 8001d0e:	4c0d      	ldr	r4, [pc, #52]	; (8001d44 <__libc_init_array+0x3c>)
 8001d10:	1b64      	subs	r4, r4, r5
 8001d12:	10a4      	asrs	r4, r4, #2
 8001d14:	42a6      	cmp	r6, r4
 8001d16:	d109      	bne.n	8001d2c <__libc_init_array+0x24>
 8001d18:	f000 f81a 	bl	8001d50 <_init>
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	4d0a      	ldr	r5, [pc, #40]	; (8001d48 <__libc_init_array+0x40>)
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <__libc_init_array+0x44>)
 8001d22:	1b64      	subs	r4, r4, r5
 8001d24:	10a4      	asrs	r4, r4, #2
 8001d26:	42a6      	cmp	r6, r4
 8001d28:	d105      	bne.n	8001d36 <__libc_init_array+0x2e>
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d30:	4798      	blx	r3
 8001d32:	3601      	adds	r6, #1
 8001d34:	e7ee      	b.n	8001d14 <__libc_init_array+0xc>
 8001d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3a:	4798      	blx	r3
 8001d3c:	3601      	adds	r6, #1
 8001d3e:	e7f2      	b.n	8001d26 <__libc_init_array+0x1e>
 8001d40:	08002080 	.word	0x08002080
 8001d44:	08002080 	.word	0x08002080
 8001d48:	08002080 	.word	0x08002080
 8001d4c:	08002084 	.word	0x08002084

08001d50 <_init>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	bf00      	nop
 8001d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d56:	bc08      	pop	{r3}
 8001d58:	469e      	mov	lr, r3
 8001d5a:	4770      	bx	lr

08001d5c <_fini>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr
